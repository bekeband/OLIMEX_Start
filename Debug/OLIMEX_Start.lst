
OLIMEX_Start.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_sfixed>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	200024a0 	.word	0x200024a0
       4:	00000541 	.word	0x00000541
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
       8:	000005b9 	.word	0x000005b9
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
       c:	000005b9 	.word	0x000005b9
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
      10:	000005b9 	.word	0x000005b9
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
      14:	000005b9 	.word	0x000005b9
			cpu_irq_prev_interrupt_state = true;
      18:	000005b9 	.word	0x000005b9
	...
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      2c:	000005b9 	.word	0x000005b9
      30:	000005b9 	.word	0x000005b9
      34:	00000000 	.word	0x00000000
      38:	000005b9 	.word	0x000005b9
      3c:	00001f2d 	.word	0x00001f2d
      40:	000005b9 	.word	0x000005b9
      44:	000005b9 	.word	0x000005b9
      48:	000005b9 	.word	0x000005b9
      4c:	000005b9 	.word	0x000005b9
      50:	000005b9 	.word	0x000005b9
      54:	000005b9 	.word	0x000005b9
      58:	000005b9 	.word	0x000005b9
      5c:	000005b9 	.word	0x000005b9
      60:	000005b9 	.word	0x000005b9
      64:	000005b9 	.word	0x000005b9
      68:	000005b9 	.word	0x000005b9
      6c:	00001455 	.word	0x00001455
      70:	00001465 	.word	0x00001465
      74:	000005b9 	.word	0x000005b9
      78:	000005b9 	.word	0x000005b9
      7c:	000005b9 	.word	0x000005b9
      80:	000005b9 	.word	0x000005b9
      84:	000005b9 	.word	0x000005b9
      88:	000005b9 	.word	0x000005b9
      8c:	000005b9 	.word	0x000005b9
      90:	000005b9 	.word	0x000005b9
      94:	000005b9 	.word	0x000005b9
      98:	000005b9 	.word	0x000005b9
      9c:	00001a25 	.word	0x00001a25
      a0:	000005b9 	.word	0x000005b9
      a4:	000005b9 	.word	0x000005b9
      a8:	000005b9 	.word	0x000005b9
      ac:	000005b9 	.word	0x000005b9
      b0:	000005b9 	.word	0x000005b9
      b4:	000005b9 	.word	0x000005b9
      b8:	000005b9 	.word	0x000005b9
      bc:	000005b9 	.word	0x000005b9
      c0:	000005b9 	.word	0x000005b9
      c4:	000005b9 	.word	0x000005b9
      c8:	000005b9 	.word	0x000005b9
      cc:	000005b9 	.word	0x000005b9

000000d0 <deregister_tm_clones>:
      d0:	4b04      	ldr	r3, [pc, #16]	; (e4 <deregister_tm_clones+0x14>)
      d2:	4805      	ldr	r0, [pc, #20]	; (e8 <deregister_tm_clones+0x18>)
      d4:	1a1b      	subs	r3, r3, r0
      d6:	2b06      	cmp	r3, #6
      d8:	d902      	bls.n	e0 <deregister_tm_clones+0x10>
      da:	4b04      	ldr	r3, [pc, #16]	; (ec <deregister_tm_clones+0x1c>)
      dc:	b103      	cbz	r3, e0 <deregister_tm_clones+0x10>
      de:	4718      	bx	r3
      e0:	4770      	bx	lr
      e2:	bf00      	nop
      e4:	00003dd7 	.word	0x00003dd7
      e8:	00003dd4 	.word	0x00003dd4
      ec:	00000000 	.word	0x00000000

000000f0 <register_tm_clones>:
      f0:	4905      	ldr	r1, [pc, #20]	; (108 <register_tm_clones+0x18>)
      f2:	4806      	ldr	r0, [pc, #24]	; (10c <register_tm_clones+0x1c>)
      f4:	1a09      	subs	r1, r1, r0
      f6:	1089      	asrs	r1, r1, #2
      f8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
      fc:	1049      	asrs	r1, r1, #1
      fe:	d002      	beq.n	106 <register_tm_clones+0x16>
     100:	4b03      	ldr	r3, [pc, #12]	; (110 <register_tm_clones+0x20>)
     102:	b103      	cbz	r3, 106 <register_tm_clones+0x16>
     104:	4718      	bx	r3
     106:	4770      	bx	lr
     108:	00003dd4 	.word	0x00003dd4
     10c:	00003dd4 	.word	0x00003dd4
     110:	00000000 	.word	0x00000000

00000114 <__do_global_dtors_aux>:
     114:	b510      	push	{r4, lr}
     116:	4c06      	ldr	r4, [pc, #24]	; (130 <__do_global_dtors_aux+0x1c>)
     118:	7823      	ldrb	r3, [r4, #0]
     11a:	b943      	cbnz	r3, 12e <__do_global_dtors_aux+0x1a>
     11c:	f7ff ffd8 	bl	d0 <deregister_tm_clones>
     120:	4b04      	ldr	r3, [pc, #16]	; (134 <__do_global_dtors_aux+0x20>)
     122:	b113      	cbz	r3, 12a <__do_global_dtors_aux+0x16>
     124:	4804      	ldr	r0, [pc, #16]	; (138 <__do_global_dtors_aux+0x24>)
     126:	f3af 8000 	nop.w
     12a:	2301      	movs	r3, #1
     12c:	7023      	strb	r3, [r4, #0]
     12e:	bd10      	pop	{r4, pc}
     130:	200001e8 	.word	0x200001e8
     134:	00000000 	.word	0x00000000
     138:	00003dd4 	.word	0x00003dd4

0000013c <frame_dummy>:
     13c:	b508      	push	{r3, lr}
     13e:	4b08      	ldr	r3, [pc, #32]	; (160 <frame_dummy+0x24>)
     140:	b11b      	cbz	r3, 14a <frame_dummy+0xe>
     142:	4908      	ldr	r1, [pc, #32]	; (164 <frame_dummy+0x28>)
     144:	4808      	ldr	r0, [pc, #32]	; (168 <frame_dummy+0x2c>)
     146:	f3af 8000 	nop.w
     14a:	4808      	ldr	r0, [pc, #32]	; (16c <frame_dummy+0x30>)
     14c:	6803      	ldr	r3, [r0, #0]
     14e:	b913      	cbnz	r3, 156 <frame_dummy+0x1a>
     150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     154:	e7cc      	b.n	f0 <register_tm_clones>
     156:	4b06      	ldr	r3, [pc, #24]	; (170 <frame_dummy+0x34>)
     158:	2b00      	cmp	r3, #0
     15a:	d0f9      	beq.n	150 <frame_dummy+0x14>
     15c:	4798      	blx	r3
     15e:	e7f7      	b.n	150 <frame_dummy+0x14>
     160:	00000000 	.word	0x00000000
     164:	200001ec 	.word	0x200001ec
     168:	00003dd4 	.word	0x00003dd4
     16c:	00003dd4 	.word	0x00003dd4
     170:	00000000 	.word	0x00000000

00000174 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     174:	6943      	ldr	r3, [r0, #20]
     176:	f013 0f02 	tst.w	r3, #2
     17a:	d004      	beq.n	186 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
     17c:	f3c1 0108 	ubfx	r1, r1, #0, #9
     180:	61c1      	str	r1, [r0, #28]
	return 0;
     182:	2000      	movs	r0, #0
     184:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
     186:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
     188:	4770      	bx	lr
     18a:	bf00      	nop

0000018c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     18c:	6943      	ldr	r3, [r0, #20]
     18e:	f013 0f01 	tst.w	r3, #1
     192:	d005      	beq.n	1a0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     194:	6983      	ldr	r3, [r0, #24]
     196:	f3c3 0308 	ubfx	r3, r3, #0, #9
     19a:	600b      	str	r3, [r1, #0]

	return 0;
     19c:	2000      	movs	r0, #0
     19e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
     1a0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
     1a2:	4770      	bx	lr

000001a4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
     1a4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
     1a6:	23ac      	movs	r3, #172	; 0xac
     1a8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
     1aa:	680b      	ldr	r3, [r1, #0]
     1ac:	684a      	ldr	r2, [r1, #4]
     1ae:	fbb3 f3f2 	udiv	r3, r3, r2
     1b2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
     1b4:	1e5c      	subs	r4, r3, #1
     1b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
     1ba:	4294      	cmp	r4, r2
     1bc:	d80a      	bhi.n	1d4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
     1be:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
     1c0:	688b      	ldr	r3, [r1, #8]
     1c2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
     1c4:	f240 2302 	movw	r3, #514	; 0x202
     1c8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
     1cc:	2350      	movs	r3, #80	; 0x50
     1ce:	6003      	str	r3, [r0, #0]

	return 0;
     1d0:	2000      	movs	r0, #0
     1d2:	e000      	b.n	1d6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
     1d4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
     1d6:	bc10      	pop	{r4}
     1d8:	4770      	bx	lr
     1da:	bf00      	nop

000001dc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
     1dc:	6943      	ldr	r3, [r0, #20]
     1de:	f013 0f02 	tst.w	r3, #2
     1e2:	d002      	beq.n	1ea <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
     1e4:	61c1      	str	r1, [r0, #28]
	return 0;
     1e6:	2000      	movs	r0, #0
     1e8:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
     1ea:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
     1ec:	4770      	bx	lr
     1ee:	bf00      	nop

000001f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
     1f0:	6943      	ldr	r3, [r0, #20]
     1f2:	f013 0f01 	tst.w	r3, #1
     1f6:	d003      	beq.n	200 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
     1f8:	6983      	ldr	r3, [r0, #24]
     1fa:	700b      	strb	r3, [r1, #0]
	return 0;
     1fc:	2000      	movs	r0, #0
     1fe:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
     200:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
     202:	4770      	bx	lr

00000204 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
     204:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     206:	0189      	lsls	r1, r1, #6
     208:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
     20a:	2402      	movs	r4, #2
     20c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
     20e:	f04f 31ff 	mov.w	r1, #4294967295
     212:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
     214:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
     216:	605a      	str	r2, [r3, #4]
}
     218:	bc10      	pop	{r4}
     21a:	4770      	bx	lr

0000021c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
     21c:	0189      	lsls	r1, r1, #6
     21e:	2305      	movs	r3, #5
     220:	5043      	str	r3, [r0, r1]
     222:	4770      	bx	lr

00000224 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
     224:	0189      	lsls	r1, r1, #6
     226:	2302      	movs	r3, #2
     228:	5043      	str	r3, [r0, r1]
     22a:	4770      	bx	lr

0000022c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
     22c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     230:	61ca      	str	r2, [r1, #28]
     232:	4770      	bx	lr

00000234 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     234:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
     238:	624a      	str	r2, [r1, #36]	; 0x24
     23a:	4770      	bx	lr

0000023c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     23c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
     240:	6a08      	ldr	r0, [r1, #32]
}
     242:	4770      	bx	lr

00000244 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
     244:	b470      	push	{r4, r5, r6}
     246:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
     248:	2402      	movs	r4, #2
     24a:	9401      	str	r4, [sp, #4]
     24c:	2408      	movs	r4, #8
     24e:	9402      	str	r4, [sp, #8]
     250:	2420      	movs	r4, #32
     252:	9403      	str	r4, [sp, #12]
     254:	2480      	movs	r4, #128	; 0x80
     256:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
     258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
     25a:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
     25c:	9405      	str	r4, [sp, #20]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
     25e:	2500      	movs	r5, #0
     260:	e00c      	b.n	27c <tc_find_mck_divisor+0x38>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
     262:	ac06      	add	r4, sp, #24
     264:	eb04 0485 	add.w	r4, r4, r5, lsl #2
     268:	f854 4c14 	ldr.w	r4, [r4, #-20]
     26c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
     270:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
     272:	4284      	cmp	r4, r0
     274:	d311      	bcc.n	29a <tc_find_mck_divisor+0x56>
			return 0;
		} else if (ul_freq >= ul_low) {
     276:	4286      	cmp	r6, r0
     278:	d902      	bls.n	280 <tc_find_mck_divisor+0x3c>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
     27a:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
     27c:	2d04      	cmp	r5, #4
     27e:	d9f0      	bls.n	262 <tc_find_mck_divisor+0x1e>
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
     280:	2d04      	cmp	r5, #4
     282:	d80c      	bhi.n	29e <tc_find_mck_divisor+0x5a>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
     284:	b12a      	cbz	r2, 292 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
     286:	a906      	add	r1, sp, #24
     288:	eb01 0185 	add.w	r1, r1, r5, lsl #2
     28c:	f851 1c14 	ldr.w	r1, [r1, #-20]
     290:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
     292:	b133      	cbz	r3, 2a2 <tc_find_mck_divisor+0x5e>
		*p_ultcclks = ul_index;
     294:	601d      	str	r5, [r3, #0]
	}

	return 1;
     296:	2001      	movs	r0, #1
     298:	e004      	b.n	2a4 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
     29a:	2000      	movs	r0, #0
     29c:	e002      	b.n	2a4 <tc_find_mck_divisor+0x60>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
     29e:	2000      	movs	r0, #0
     2a0:	e000      	b.n	2a4 <tc_find_mck_divisor+0x60>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
     2a2:	2001      	movs	r0, #1
}
     2a4:	b007      	add	sp, #28
     2a6:	bc70      	pop	{r4, r5, r6}
     2a8:	4770      	bx	lr
     2aa:	bf00      	nop

000002ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
     2ac:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
     2ae:	2015      	movs	r0, #21
     2b0:	f000 fe84 	bl	fbc <pmc_enable_periph_clk>
     2b4:	bd08      	pop	{r3, pc}
     2b6:	bf00      	nop

000002b8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
     2b8:	6843      	ldr	r3, [r0, #4]
     2ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     2be:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
     2c0:	6843      	ldr	r3, [r0, #4]
     2c2:	0409      	lsls	r1, r1, #16
     2c4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
     2c8:	4319      	orrs	r1, r3
     2ca:	6041      	str	r1, [r0, #4]
     2cc:	4770      	bx	lr
     2ce:	bf00      	nop

000002d0 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
     2d0:	6843      	ldr	r3, [r0, #4]
     2d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
     2d8:	6843      	ldr	r3, [r0, #4]
     2da:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
     2de:	6041      	str	r1, [r0, #4]
     2e0:	4770      	bx	lr
     2e2:	bf00      	nop

000002e4 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
     2e4:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
     2e6:	4b0c      	ldr	r3, [pc, #48]	; (318 <spi_read+0x34>)
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
     2e8:	e002      	b.n	2f0 <spi_read+0xc>
		if (!timeout--) {
     2ea:	1e5c      	subs	r4, r3, #1
     2ec:	b18b      	cbz	r3, 312 <spi_read+0x2e>
     2ee:	4623      	mov	r3, r4
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
     2f0:	6904      	ldr	r4, [r0, #16]
     2f2:	f014 0f01 	tst.w	r4, #1
     2f6:	d0f8      	beq.n	2ea <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
     2f8:	6884      	ldr	r4, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
     2fa:	6843      	ldr	r3, [r0, #4]
     2fc:	f013 0302 	ands.w	r3, r3, #2
     300:	d000      	beq.n	304 <spi_read+0x20>
		return 1;
     302:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_mode(p_spi)) {
     304:	b113      	cbz	r3, 30c <spi_read+0x28>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
     306:	f3c4 4303 	ubfx	r3, r4, #16, #4
     30a:	7013      	strb	r3, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
     30c:	800c      	strh	r4, [r1, #0]

	return SPI_OK;
     30e:	2000      	movs	r0, #0
     310:	e000      	b.n	314 <spi_read+0x30>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
     312:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
     314:	bc10      	pop	{r4}
     316:	4770      	bx	lr
     318:	000249f0 	.word	0x000249f0

0000031c <spi_write>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data, uint8_t uc_pcs, uint8_t uc_last)
{
     31c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
     31e:	4c0e      	ldr	r4, [pc, #56]	; (358 <spi_write+0x3c>)
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
     320:	e002      	b.n	328 <spi_write+0xc>
		if (!timeout--) {
     322:	1e65      	subs	r5, r4, #1
     324:	b1a4      	cbz	r4, 350 <spi_write+0x34>
     326:	462c      	mov	r4, r5
spi_status_t spi_write(Spi *p_spi, uint16_t us_data, uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
     328:	6905      	ldr	r5, [r0, #16]
     32a:	f015 0f02 	tst.w	r5, #2
     32e:	d0f8      	beq.n	322 <spi_write+0x6>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
     330:	6844      	ldr	r4, [r0, #4]
     332:	f014 0402 	ands.w	r4, r4, #2
     336:	d000      	beq.n	33a <spi_write+0x1e>
		return 1;
     338:	2401      	movs	r4, #1
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
     33a:	b134      	cbz	r4, 34a <spi_write+0x2e>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
     33c:	0412      	lsls	r2, r2, #16
     33e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
     342:	4311      	orrs	r1, r2
		if (uc_last) {
     344:	b10b      	cbz	r3, 34a <spi_write+0x2e>
			value |= SPI_TDR_LASTXFER;
     346:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
     34a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
     34c:	2000      	movs	r0, #0
     34e:	e000      	b.n	352 <spi_write+0x36>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
     350:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
     352:	bc30      	pop	{r4, r5}
     354:	4770      	bx	lr
     356:	bf00      	nop
     358:	000249f0 	.word	0x000249f0

0000035c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
     35c:	b13a      	cbz	r2, 36e <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
     35e:	310c      	adds	r1, #12
     360:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     364:	f043 0301 	orr.w	r3, r3, #1
     368:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     36c:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
     36e:	310c      	adds	r1, #12
     370:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     374:	f023 0301 	bic.w	r3, r3, #1
     378:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     37c:	4770      	bx	lr
     37e:	bf00      	nop

00000380 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
     380:	b13a      	cbz	r2, 392 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
     382:	310c      	adds	r1, #12
     384:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     388:	f043 0302 	orr.w	r3, r3, #2
     38c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     390:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
     392:	310c      	adds	r1, #12
     394:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     398:	f023 0302 	bic.w	r3, r3, #2
     39c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop

000003a4 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
     3a4:	2a04      	cmp	r2, #4
     3a6:	d10d      	bne.n	3c4 <spi_configure_cs_behavior+0x20>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
     3a8:	310c      	adds	r1, #12
     3aa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3ae:	f023 0308 	bic.w	r3, r3, #8
     3b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
     3b6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3ba:	f043 0304 	orr.w	r3, r3, #4
     3be:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     3c2:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
     3c4:	b96a      	cbnz	r2, 3e2 <spi_configure_cs_behavior+0x3e>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
     3c6:	310c      	adds	r1, #12
     3c8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3cc:	f023 0308 	bic.w	r3, r3, #8
     3d0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
     3d4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3d8:	f023 0304 	bic.w	r3, r3, #4
     3dc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     3e0:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
     3e2:	2a08      	cmp	r2, #8
     3e4:	d106      	bne.n	3f4 <spi_configure_cs_behavior+0x50>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
     3e6:	310c      	adds	r1, #12
     3e8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3ec:	f043 0308 	orr.w	r3, r3, #8
     3f0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
     3f8:	310c      	adds	r1, #12
     3fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     3fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     402:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
     406:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     40a:	431a      	orrs	r2, r3
     40c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
     410:	4770      	bx	lr
     412:	bf00      	nop

00000414 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
     414:	4401      	add	r1, r0
     416:	3901      	subs	r1, #1
     418:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
     41c:	1e43      	subs	r3, r0, #1
     41e:	2bfe      	cmp	r3, #254	; 0xfe
     420:	d801      	bhi.n	426 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
     422:	b280      	uxth	r0, r0
     424:	e001      	b.n	42a <spi_calc_baudrate_div+0x16>
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
     426:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return baud_div;
}
     42a:	b200      	sxth	r0, r0
     42c:	4770      	bx	lr
     42e:	bf00      	nop

00000430 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
     430:	b182      	cbz	r2, 454 <spi_set_baudrate_div+0x24>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
     432:	b410      	push	{r4}
     434:	4614      	mov	r4, r2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
     436:	310c      	adds	r1, #12
     438:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
     43c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     440:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
     444:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
     448:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
     44c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
     450:	2000      	movs	r0, #0
     452:	e003      	b.n	45c <spi_set_baudrate_div+0x2c>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
     454:	f64f 70ff 	movw	r0, #65535	; 0xffff

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
     458:	b200      	sxth	r0, r0
     45a:	4770      	bx	lr
     45c:	b200      	sxth	r0, r0
     45e:	bc10      	pop	{r4}
     460:	4770      	bx	lr
     462:	bf00      	nop

00000464 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
     464:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
     466:	310c      	adds	r1, #12
     468:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     46c:	b2a4      	uxth	r4, r4
     46e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
     472:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
     476:	061b      	lsls	r3, r3, #24
     478:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
     47c:	ea44 0302 	orr.w	r3, r4, r2
     480:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
     484:	bc10      	pop	{r4}
     486:	4770      	bx	lr

00000488 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
     488:	b508      	push	{r3, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
     48a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     48e:	4b27      	ldr	r3, [pc, #156]	; (52c <board_init+0xa4>)
     490:	605a      	str	r2, [r3, #4]
     492:	200b      	movs	r0, #11
     494:	f000 fd92 	bl	fbc <pmc_enable_periph_clk>
     498:	200c      	movs	r0, #12
     49a:	f000 fd8f 	bl	fbc <pmc_enable_periph_clk>
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED_GREEN_GPIO, LED_GREEN_FLAGS);
     49e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
     4a2:	2012      	movs	r0, #18
     4a4:	f000 fef4 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(LED_YELLOW_GPIO, LED_YELLOW_FLAGS);
     4a8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
     4ac:	2011      	movs	r0, #17
     4ae:	f000 feef 	bl	1290 <pio_configure_pin>

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
     4b2:	491f      	ldr	r1, [pc, #124]	; (530 <board_init+0xa8>)
     4b4:	2013      	movs	r0, #19
     4b6:	f000 feeb 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
     4ba:	491e      	ldr	r1, [pc, #120]	; (534 <board_init+0xac>)
     4bc:	2014      	movs	r0, #20
     4be:	f000 fee7 	bl	1290 <pio_configure_pin>

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
     4c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     4c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
     4ca:	481b      	ldr	r0, [pc, #108]	; (538 <board_init+0xb0>)
     4cc:	f000 fe58 	bl	1180 <pio_configure_pin_group>
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#ifdef CONF_BOARD_ILI9341
	/* Configure SPI LCD control pin */
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
     4d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     4d4:	200c      	movs	r0, #12
     4d6:	f000 fedb 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
     4da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     4de:	200d      	movs	r0, #13
     4e0:	f000 fed6 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
     4e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     4e8:	200e      	movs	r0, #14
     4ea:	f000 fed1 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(LCD_SPI_NPCS_GPIO, LCD_SPI_NPCS_GPIO_FLAGS);
     4ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     4f2:	201f      	movs	r0, #31
     4f4:	f000 fecc 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(BOARD_ILI9341_DC_GPIO, BOARD_ILI9341_DC_FLAGS);
     4f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
     4fc:	2002      	movs	r0, #2
     4fe:	f000 fec7 	bl	1290 <pio_configure_pin>
	gpio_configure_pin(BOARD_ILI9341_RSTN_GPIO, BOARD_ILI9341_RSTN_FLAGS);
     502:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
     506:	2000      	movs	r0, #0
     508:	f000 fec2 	bl	1290 <pio_configure_pin>

#if defined(CONF_BOARD_SD_MMC_SPI)
	/* Configure SD/MMC card (SPI0 channel) The NPCS line must be connect
	 * to the NPCS0 IO.
	 */
	gpio_configure_pin(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_GPIO_FLAGS);
     50c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     510:	200b      	movs	r0, #11
     512:	f000 febd 	bl	1290 <pio_configure_pin>
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
     516:	4909      	ldr	r1, [pc, #36]	; (53c <board_init+0xb4>)
     518:	200f      	movs	r0, #15
     51a:	f000 feb9 	bl	1290 <pio_configure_pin>

#if defined(CONF_BOARD_TOUCH_SPI)
	/* Configure SD/MMC card (SPI0 channel) The NPCS line must be connect
	 * to the NPCS0 IO.
	 */
	gpio_configure_pin(TOUCH_SPI_NPCS_GPIO, TOUCH_SPI_NPCS_FLAGS);
     51e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     522:	201e      	movs	r0, #30
     524:	f000 feb4 	bl	1290 <pio_configure_pin>
     528:	bd08      	pop	{r3, pc}
     52a:	bf00      	nop
     52c:	400e1450 	.word	0x400e1450
     530:	28000079 	.word	0x28000079
     534:	28000059 	.word	0x28000059
     538:	400e0e00 	.word	0x400e0e00
     53c:	28000001 	.word	0x28000001

00000540 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     540:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
     542:	4b16      	ldr	r3, [pc, #88]	; (59c <Reset_Handler+0x5c>)
     544:	4a16      	ldr	r2, [pc, #88]	; (5a0 <Reset_Handler+0x60>)
     546:	429a      	cmp	r2, r3
     548:	d105      	bne.n	556 <Reset_Handler+0x16>
     54a:	e009      	b.n	560 <Reset_Handler+0x20>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
     54c:	6811      	ldr	r1, [r2, #0]
     54e:	6019      	str	r1, [r3, #0]
     550:	3304      	adds	r3, #4
     552:	3204      	adds	r2, #4
     554:	e001      	b.n	55a <Reset_Handler+0x1a>
     556:	4b11      	ldr	r3, [pc, #68]	; (59c <Reset_Handler+0x5c>)
     558:	4a11      	ldr	r2, [pc, #68]	; (5a0 <Reset_Handler+0x60>)
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
     55a:	4912      	ldr	r1, [pc, #72]	; (5a4 <Reset_Handler+0x64>)
     55c:	428b      	cmp	r3, r1
     55e:	d3f5      	bcc.n	54c <Reset_Handler+0xc>
			*pDest++ = *pSrc++;
     560:	4b11      	ldr	r3, [pc, #68]	; (5a8 <Reset_Handler+0x68>)
     562:	e002      	b.n	56a <Reset_Handler+0x2a>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
     564:	2200      	movs	r2, #0
     566:	601a      	str	r2, [r3, #0]
     568:	3304      	adds	r3, #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
     56a:	4a10      	ldr	r2, [pc, #64]	; (5ac <Reset_Handler+0x6c>)
     56c:	4293      	cmp	r3, r2
     56e:	d3f9      	bcc.n	564 <Reset_Handler+0x24>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     570:	4b0f      	ldr	r3, [pc, #60]	; (5b0 <Reset_Handler+0x70>)
     572:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
     576:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     57a:	490e      	ldr	r1, [pc, #56]	; (5b4 <Reset_Handler+0x74>)
     57c:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
     57e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
     586:	d203      	bcs.n	590 <Reset_Handler+0x50>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
     588:	688b      	ldr	r3, [r1, #8]
     58a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     58e:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
     590:	f001 fcd4 	bl	1f3c <__libc_init_array>

	/* Branch to main function */
	main();
     594:	f001 fbb6 	bl	1d04 <main>
     598:	e7fe      	b.n	598 <Reset_Handler+0x58>
     59a:	bf00      	nop
     59c:	20000000 	.word	0x20000000
     5a0:	00003dd4 	.word	0x00003dd4
     5a4:	200001e8 	.word	0x200001e8
     5a8:	200001e8 	.word	0x200001e8
     5ac:	200004a0 	.word	0x200004a0
     5b0:	00000000 	.word	0x00000000
     5b4:	e000ed00 	.word	0xe000ed00

000005b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     5b8:	e7fe      	b.n	5b8 <Dummy_Handler>
     5ba:	bf00      	nop

000005bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
     5bc:	4b45      	ldr	r3, [pc, #276]	; (6d4 <SystemCoreClockUpdate+0x118>)
     5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     5c0:	f003 0303 	and.w	r3, r3, #3
     5c4:	2b03      	cmp	r3, #3
     5c6:	d86e      	bhi.n	6a6 <SystemCoreClockUpdate+0xea>
     5c8:	e8df f003 	tbb	[pc, r3]
     5cc:	2e2e1102 	.word	0x2e2e1102
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
     5d0:	4b41      	ldr	r3, [pc, #260]	; (6d8 <SystemCoreClockUpdate+0x11c>)
     5d2:	695b      	ldr	r3, [r3, #20]
     5d4:	f013 0f80 	tst.w	r3, #128	; 0x80
     5d8:	d004      	beq.n	5e4 <SystemCoreClockUpdate+0x28>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
     5da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     5de:	4b3f      	ldr	r3, [pc, #252]	; (6dc <SystemCoreClockUpdate+0x120>)
     5e0:	601a      	str	r2, [r3, #0]
     5e2:	e060      	b.n	6a6 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
     5e4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
     5e8:	4b3c      	ldr	r3, [pc, #240]	; (6dc <SystemCoreClockUpdate+0x120>)
     5ea:	601a      	str	r2, [r3, #0]
     5ec:	e05b      	b.n	6a6 <SystemCoreClockUpdate+0xea>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
     5ee:	4b39      	ldr	r3, [pc, #228]	; (6d4 <SystemCoreClockUpdate+0x118>)
     5f0:	6a1b      	ldr	r3, [r3, #32]
     5f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     5f6:	d003      	beq.n	600 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
     5f8:	4a39      	ldr	r2, [pc, #228]	; (6e0 <SystemCoreClockUpdate+0x124>)
     5fa:	4b38      	ldr	r3, [pc, #224]	; (6dc <SystemCoreClockUpdate+0x120>)
     5fc:	601a      	str	r2, [r3, #0]
     5fe:	e052      	b.n	6a6 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
     600:	4a38      	ldr	r2, [pc, #224]	; (6e4 <SystemCoreClockUpdate+0x128>)
     602:	4b36      	ldr	r3, [pc, #216]	; (6dc <SystemCoreClockUpdate+0x120>)
     604:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
     606:	4b33      	ldr	r3, [pc, #204]	; (6d4 <SystemCoreClockUpdate+0x118>)
     608:	6a1b      	ldr	r3, [r3, #32]
     60a:	f003 0370 	and.w	r3, r3, #112	; 0x70
     60e:	2b10      	cmp	r3, #16
     610:	d002      	beq.n	618 <SystemCoreClockUpdate+0x5c>
     612:	2b20      	cmp	r3, #32
     614:	d004      	beq.n	620 <SystemCoreClockUpdate+0x64>
     616:	e046      	b.n	6a6 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
     618:	4a33      	ldr	r2, [pc, #204]	; (6e8 <SystemCoreClockUpdate+0x12c>)
     61a:	4b30      	ldr	r3, [pc, #192]	; (6dc <SystemCoreClockUpdate+0x120>)
     61c:	601a      	str	r2, [r3, #0]
				break;
     61e:	e042      	b.n	6a6 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
     620:	4a2f      	ldr	r2, [pc, #188]	; (6e0 <SystemCoreClockUpdate+0x124>)
     622:	4b2e      	ldr	r3, [pc, #184]	; (6dc <SystemCoreClockUpdate+0x120>)
     624:	601a      	str	r2, [r3, #0]
				break;
     626:	e03e      	b.n	6a6 <SystemCoreClockUpdate+0xea>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
     628:	4b2a      	ldr	r3, [pc, #168]	; (6d4 <SystemCoreClockUpdate+0x118>)
     62a:	6a1b      	ldr	r3, [r3, #32]
     62c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     630:	d003      	beq.n	63a <SystemCoreClockUpdate+0x7e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
     632:	4a2b      	ldr	r2, [pc, #172]	; (6e0 <SystemCoreClockUpdate+0x124>)
     634:	4b29      	ldr	r3, [pc, #164]	; (6dc <SystemCoreClockUpdate+0x120>)
     636:	601a      	str	r2, [r3, #0]
     638:	e012      	b.n	660 <SystemCoreClockUpdate+0xa4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
     63a:	4a2a      	ldr	r2, [pc, #168]	; (6e4 <SystemCoreClockUpdate+0x128>)
     63c:	4b27      	ldr	r3, [pc, #156]	; (6dc <SystemCoreClockUpdate+0x120>)
     63e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
     640:	4b24      	ldr	r3, [pc, #144]	; (6d4 <SystemCoreClockUpdate+0x118>)
     642:	6a1b      	ldr	r3, [r3, #32]
     644:	f003 0370 	and.w	r3, r3, #112	; 0x70
     648:	2b10      	cmp	r3, #16
     64a:	d002      	beq.n	652 <SystemCoreClockUpdate+0x96>
     64c:	2b20      	cmp	r3, #32
     64e:	d004      	beq.n	65a <SystemCoreClockUpdate+0x9e>
     650:	e006      	b.n	660 <SystemCoreClockUpdate+0xa4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
     652:	4a25      	ldr	r2, [pc, #148]	; (6e8 <SystemCoreClockUpdate+0x12c>)
     654:	4b21      	ldr	r3, [pc, #132]	; (6dc <SystemCoreClockUpdate+0x120>)
     656:	601a      	str	r2, [r3, #0]
				break;
     658:	e002      	b.n	660 <SystemCoreClockUpdate+0xa4>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
     65a:	4a21      	ldr	r2, [pc, #132]	; (6e0 <SystemCoreClockUpdate+0x124>)
     65c:	4b1f      	ldr	r3, [pc, #124]	; (6dc <SystemCoreClockUpdate+0x120>)
     65e:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
     660:	4b1c      	ldr	r3, [pc, #112]	; (6d4 <SystemCoreClockUpdate+0x118>)
     662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     664:	f003 0303 	and.w	r3, r3, #3
     668:	2b02      	cmp	r3, #2
     66a:	d10e      	bne.n	68a <SystemCoreClockUpdate+0xce>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
     66c:	4819      	ldr	r0, [pc, #100]	; (6d4 <SystemCoreClockUpdate+0x118>)
     66e:	6a83      	ldr	r3, [r0, #40]	; 0x28
     670:	f3c3 410a 	ubfx	r1, r3, #16, #11
     674:	4a19      	ldr	r2, [pc, #100]	; (6dc <SystemCoreClockUpdate+0x120>)
     676:	6813      	ldr	r3, [r2, #0]
     678:	fb01 3303 	mla	r3, r1, r3, r3
     67c:	6013      	str	r3, [r2, #0]
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
     67e:	6a81      	ldr	r1, [r0, #40]	; 0x28
     680:	b2c9      	uxtb	r1, r1
     682:	fbb3 f3f1 	udiv	r3, r3, r1
     686:	6013      	str	r3, [r2, #0]
     688:	e00d      	b.n	6a6 <SystemCoreClockUpdate+0xea>
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
     68a:	4812      	ldr	r0, [pc, #72]	; (6d4 <SystemCoreClockUpdate+0x118>)
     68c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     68e:	f3c3 410a 	ubfx	r1, r3, #16, #11
     692:	4a12      	ldr	r2, [pc, #72]	; (6dc <SystemCoreClockUpdate+0x120>)
     694:	6813      	ldr	r3, [r2, #0]
     696:	fb01 3303 	mla	r3, r1, r3, r3
     69a:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
     69c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     69e:	b2c9      	uxtb	r1, r1
     6a0:	fbb3 f3f1 	udiv	r3, r3, r1
     6a4:	6013      	str	r3, [r2, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
     6a6:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <SystemCoreClockUpdate+0x118>)
     6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     6aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
     6ae:	2b70      	cmp	r3, #112	; 0x70
     6b0:	d107      	bne.n	6c2 <SystemCoreClockUpdate+0x106>
		SystemCoreClock /= 3U;
     6b2:	4a0a      	ldr	r2, [pc, #40]	; (6dc <SystemCoreClockUpdate+0x120>)
     6b4:	6813      	ldr	r3, [r2, #0]
     6b6:	490d      	ldr	r1, [pc, #52]	; (6ec <SystemCoreClockUpdate+0x130>)
     6b8:	fba1 1303 	umull	r1, r3, r1, r3
     6bc:	085b      	lsrs	r3, r3, #1
     6be:	6013      	str	r3, [r2, #0]
     6c0:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <SystemCoreClockUpdate+0x118>)
     6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     6c6:	f3c3 1202 	ubfx	r2, r3, #4, #3
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <SystemCoreClockUpdate+0x120>)
     6cc:	680b      	ldr	r3, [r1, #0]
     6ce:	40d3      	lsrs	r3, r2
     6d0:	600b      	str	r3, [r1, #0]
     6d2:	4770      	bx	lr
     6d4:	400e0400 	.word	0x400e0400
     6d8:	400e1410 	.word	0x400e1410
     6dc:	2000016c 	.word	0x2000016c
     6e0:	00b71b00 	.word	0x00b71b00
     6e4:	003d0900 	.word	0x003d0900
     6e8:	007a1200 	.word	0x007a1200
     6ec:	aaaaaaab 	.word	0xaaaaaaab

000006f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <_sbrk+0x28>)
     6f2:	681b      	ldr	r3, [r3, #0]
     6f4:	b913      	cbnz	r3, 6fc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
     6f6:	4a09      	ldr	r2, [pc, #36]	; (71c <_sbrk+0x2c>)
     6f8:	4b07      	ldr	r3, [pc, #28]	; (718 <_sbrk+0x28>)
     6fa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     6fc:	4b06      	ldr	r3, [pc, #24]	; (718 <_sbrk+0x28>)
     6fe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
     700:	181a      	adds	r2, r3, r0
     702:	4907      	ldr	r1, [pc, #28]	; (720 <_sbrk+0x30>)
     704:	4291      	cmp	r1, r2
     706:	db04      	blt.n	712 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
     708:	4610      	mov	r0, r2
     70a:	4a03      	ldr	r2, [pc, #12]	; (718 <_sbrk+0x28>)
     70c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
     70e:	4618      	mov	r0, r3
     710:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
     712:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
     716:	4770      	bx	lr
     718:	20000204 	.word	0x20000204
     71c:	200024a0 	.word	0x200024a0
     720:	2000bffc 	.word	0x2000bffc

00000724 <_close>:
}

extern int _close(int file)
{
	return -1;
}
     724:	f04f 30ff 	mov.w	r0, #4294967295
     728:	4770      	bx	lr
     72a:	bf00      	nop

0000072c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
     72c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     730:	604b      	str	r3, [r1, #4]

	return 0;
}
     732:	2000      	movs	r0, #0
     734:	4770      	bx	lr
     736:	bf00      	nop

00000738 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
     738:	2001      	movs	r0, #1
     73a:	4770      	bx	lr

0000073c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
     73c:	2000      	movs	r0, #0
     73e:	4770      	bx	lr

00000740 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
     740:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
     742:	460a      	mov	r2, r1
     744:	4601      	mov	r1, r0
     746:	4802      	ldr	r0, [pc, #8]	; (750 <flash_init+0x10>)
     748:	f000 f856 	bl	7f8 <efc_init>
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
     74c:	2000      	movs	r0, #0
     74e:	bd08      	pop	{r3, pc}
     750:	400e0a00 	.word	0x400e0a00

00000754 <flash_is_gpnvm_set>:
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
     754:	2801      	cmp	r0, #1
     756:	d811      	bhi.n	77c <flash_is_gpnvm_set+0x28>
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
     758:	b510      	push	{r4, lr}
     75a:	4604      	mov	r4, r0

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
     75c:	2200      	movs	r2, #0
     75e:	210d      	movs	r1, #13
     760:	4808      	ldr	r0, [pc, #32]	; (784 <flash_is_gpnvm_set+0x30>)
     762:	f000 f853 	bl	80c <efc_perform_command>
     766:	b958      	cbnz	r0, 780 <flash_is_gpnvm_set+0x2c>
		return FLASH_RC_ERROR;
	}

	ul_gpnvm_bits = efc_get_result(EFC);
     768:	4806      	ldr	r0, [pc, #24]	; (784 <flash_is_gpnvm_set+0x30>)
     76a:	f000 f843 	bl	7f4 <efc_get_result>
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
     76e:	2301      	movs	r3, #1
     770:	fa03 f404 	lsl.w	r4, r3, r4
     774:	4020      	ands	r0, r4
     776:	d004      	beq.n	782 <flash_is_gpnvm_set+0x2e>
		return FLASH_RC_YES;
     778:	4618      	mov	r0, r3
     77a:	bd10      	pop	{r4, pc}
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
     77c:	2011      	movs	r0, #17
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
		return FLASH_RC_YES;
	}

	return FLASH_RC_NO;
}
     77e:	4770      	bx	lr
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
		return FLASH_RC_ERROR;
     780:	2010      	movs	r0, #16
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
		return FLASH_RC_YES;
	}

	return FLASH_RC_NO;
}
     782:	bd10      	pop	{r4, pc}
     784:	400e0a00 	.word	0x400e0a00

00000788 <flash_set_gpnvm>:
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
     788:	2801      	cmp	r0, #1
     78a:	d80d      	bhi.n	7a8 <flash_set_gpnvm+0x20>
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
     78c:	b510      	push	{r4, lr}
     78e:	4604      	mov	r4, r0
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
     790:	f7ff ffe0 	bl	754 <flash_is_gpnvm_set>
     794:	2801      	cmp	r0, #1
     796:	d00a      	beq.n	7ae <flash_set_gpnvm+0x26>
		return FLASH_RC_OK;
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
     798:	4622      	mov	r2, r4
     79a:	210b      	movs	r1, #11
     79c:	4806      	ldr	r0, [pc, #24]	; (7b8 <flash_set_gpnvm+0x30>)
     79e:	f000 f835 	bl	80c <efc_perform_command>
     7a2:	4603      	mov	r3, r0
     7a4:	b928      	cbnz	r0, 7b2 <flash_set_gpnvm+0x2a>
     7a6:	e005      	b.n	7b4 <flash_set_gpnvm+0x2c>
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
     7a8:	2311      	movs	r3, #17
	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
		return FLASH_RC_OK;
	}

	return FLASH_RC_ERROR;
}
     7aa:	4618      	mov	r0, r3
     7ac:	4770      	bx	lr
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
		return FLASH_RC_OK;
     7ae:	2300      	movs	r3, #0
     7b0:	e000      	b.n	7b4 <flash_set_gpnvm+0x2c>

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
		return FLASH_RC_OK;
	}

	return FLASH_RC_ERROR;
     7b2:	2310      	movs	r3, #16
}
     7b4:	4618      	mov	r0, r3
     7b6:	bd10      	pop	{r4, pc}
     7b8:	400e0a00 	.word	0x400e0a00

000007bc <flash_clear_gpnvm>:
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_clear_gpnvm(uint32_t ul_gpnvm)
{
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
     7bc:	2801      	cmp	r0, #1
     7be:	d80d      	bhi.n	7dc <flash_clear_gpnvm+0x20>
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_clear_gpnvm(uint32_t ul_gpnvm)
{
     7c0:	b510      	push	{r4, lr}
     7c2:	4604      	mov	r4, r0
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
	}

	if (FLASH_RC_NO == flash_is_gpnvm_set(ul_gpnvm)) {
     7c4:	f7ff ffc6 	bl	754 <flash_is_gpnvm_set>
     7c8:	4603      	mov	r3, r0
     7ca:	b158      	cbz	r0, 7e4 <flash_clear_gpnvm+0x28>
		return FLASH_RC_OK;
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_CGPB, ul_gpnvm)) {
     7cc:	4622      	mov	r2, r4
     7ce:	210c      	movs	r1, #12
     7d0:	4805      	ldr	r0, [pc, #20]	; (7e8 <flash_clear_gpnvm+0x2c>)
     7d2:	f000 f81b 	bl	80c <efc_perform_command>
     7d6:	4603      	mov	r3, r0
     7d8:	b918      	cbnz	r0, 7e2 <flash_clear_gpnvm+0x26>
     7da:	e003      	b.n	7e4 <flash_clear_gpnvm+0x28>
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_clear_gpnvm(uint32_t ul_gpnvm)
{
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
		return FLASH_RC_INVALID;
     7dc:	2311      	movs	r3, #17
	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_CGPB, ul_gpnvm)) {
		return FLASH_RC_OK;
	}

	return FLASH_RC_ERROR;
}
     7de:	4618      	mov	r0, r3
     7e0:	4770      	bx	lr

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_CGPB, ul_gpnvm)) {
		return FLASH_RC_OK;
	}

	return FLASH_RC_ERROR;
     7e2:	2310      	movs	r3, #16
}
     7e4:	4618      	mov	r0, r3
     7e6:	bd10      	pop	{r4, pc}
     7e8:	400e0a00 	.word	0x400e0a00

000007ec <rstc_get_reset_cause>:
 * \return The last reset cause.
 */
uint32_t rstc_get_reset_cause(
		Rstc *p_rstc)
{
	return (p_rstc->RSTC_SR & RSTC_SR_RSTTYP_Msk);
     7ec:	6840      	ldr	r0, [r0, #4]
}
     7ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
     7f2:	4770      	bx	lr

000007f4 <efc_get_result>:
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
	return p_efc->EEFC_FRR;
     7f4:	68c0      	ldr	r0, [r0, #12]
}
     7f6:	4770      	bx	lr

000007f8 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
     7f8:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
     7fa:	0212      	lsls	r2, r2, #8
     7fc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
     800:	4311      	orrs	r1, r2
     802:	f003 facd 	bl	3da0 <__efc_write_fmr_veneer>
#endif
	return EFC_RC_OK;
}
     806:	2000      	movs	r0, #0
     808:	bd08      	pop	{r3, pc}
     80a:	bf00      	nop

0000080c <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
     80c:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
     80e:	f1a1 030e 	sub.w	r3, r1, #14
     812:	2b01      	cmp	r3, #1
     814:	d91a      	bls.n	84c <efc_perform_command+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     816:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     81a:	b672      	cpsid	i
     81c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     820:	2500      	movs	r5, #0
     822:	4b0c      	ldr	r3, [pc, #48]	; (854 <efc_perform_command+0x48>)
     824:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
     826:	0212      	lsls	r2, r2, #8
     828:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     82c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
     830:	b2c9      	uxtb	r1, r1
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
     832:	4311      	orrs	r1, r2
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
     834:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
     838:	f003 fac2 	bl	3dc0 <__efc_perform_fcr_veneer>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     83c:	b944      	cbnz	r4, 850 <efc_perform_command+0x44>
		cpu_irq_enable();
     83e:	2201      	movs	r2, #1
     840:	4b04      	ldr	r3, [pc, #16]	; (854 <efc_perform_command+0x48>)
     842:	701a      	strb	r2, [r3, #0]
     844:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     848:	b662      	cpsie	i
     84a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
		return EFC_RC_NOT_SUPPORT;
     84c:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
     850:	bd38      	pop	{r3, r4, r5, pc}
     852:	bf00      	nop
     854:	2000017c 	.word	0x2000017c

00000858 <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
     858:	b082      	sub	sp, #8
  volatile uint32_t i;
  for (i = 0; i < ul_ms; i++) { for (i = 0; i < 100000; i++) { } }
     85a:	2300      	movs	r3, #0
     85c:	9301      	str	r3, [sp, #4]
     85e:	e00c      	b.n	87a <ili93xx_delay+0x22>
     860:	2300      	movs	r3, #0
     862:	9301      	str	r3, [sp, #4]
     864:	e002      	b.n	86c <ili93xx_delay+0x14>
     866:	9b01      	ldr	r3, [sp, #4]
     868:	3301      	adds	r3, #1
     86a:	9301      	str	r3, [sp, #4]
     86c:	9a01      	ldr	r2, [sp, #4]
     86e:	4b05      	ldr	r3, [pc, #20]	; (884 <ili93xx_delay+0x2c>)
     870:	429a      	cmp	r2, r3
     872:	d9f8      	bls.n	866 <ili93xx_delay+0xe>
     874:	9b01      	ldr	r3, [sp, #4]
     876:	3301      	adds	r3, #1
     878:	9301      	str	r3, [sp, #4]
     87a:	9b01      	ldr	r3, [sp, #4]
     87c:	4283      	cmp	r3, r0
     87e:	d3ef      	bcc.n	860 <ili93xx_delay+0x8>
}
     880:	b002      	add	sp, #8
     882:	4770      	bx	lr
     884:	0001869f 	.word	0x0001869f

00000888 <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
     888:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
     88a:	6805      	ldr	r5, [r0, #0]
     88c:	4c12      	ldr	r4, [pc, #72]	; (8d8 <ili93xx_check_box_coordinates+0x50>)
     88e:	6824      	ldr	r4, [r4, #0]
     890:	42a5      	cmp	r5, r4
     892:	d301      	bcc.n	898 <ili93xx_check_box_coordinates+0x10>
		*p_ul_x1 = g_ul_lcd_x_length - 1;
     894:	1e65      	subs	r5, r4, #1
     896:	6005      	str	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
     898:	6815      	ldr	r5, [r2, #0]
     89a:	42ac      	cmp	r4, r5
     89c:	d801      	bhi.n	8a2 <ili93xx_check_box_coordinates+0x1a>
		*p_ul_x2 = g_ul_lcd_x_length - 1;
     89e:	3c01      	subs	r4, #1
     8a0:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
     8a2:	680d      	ldr	r5, [r1, #0]
     8a4:	4c0d      	ldr	r4, [pc, #52]	; (8dc <ili93xx_check_box_coordinates+0x54>)
     8a6:	6824      	ldr	r4, [r4, #0]
     8a8:	42a5      	cmp	r5, r4
     8aa:	d301      	bcc.n	8b0 <ili93xx_check_box_coordinates+0x28>
		*p_ul_y1 = g_ul_lcd_y_length - 1;
     8ac:	1e65      	subs	r5, r4, #1
     8ae:	600d      	str	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
     8b0:	681d      	ldr	r5, [r3, #0]
     8b2:	42ac      	cmp	r4, r5
     8b4:	d801      	bhi.n	8ba <ili93xx_check_box_coordinates+0x32>
		*p_ul_y2 = g_ul_lcd_y_length - 1;
     8b6:	3c01      	subs	r4, #1
     8b8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
     8ba:	6804      	ldr	r4, [r0, #0]
     8bc:	6815      	ldr	r5, [r2, #0]
     8be:	42ac      	cmp	r4, r5
     8c0:	d901      	bls.n	8c6 <ili93xx_check_box_coordinates+0x3e>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
     8c2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
     8c4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
     8c6:	680a      	ldr	r2, [r1, #0]
     8c8:	6818      	ldr	r0, [r3, #0]
     8ca:	4282      	cmp	r2, r0
     8cc:	d901      	bls.n	8d2 <ili93xx_check_box_coordinates+0x4a>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
     8ce:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
     8d0:	601a      	str	r2, [r3, #0]
	}
}
     8d2:	bc30      	pop	{r4, r5}
     8d4:	4770      	bx	lr
     8d6:	bf00      	nop
     8d8:	20000174 	.word	0x20000174
     8dc:	20000178 	.word	0x20000178

000008e0 <ili9341_write_cmd>:
 * \brief Send command to LCD controller.
 *
 * \param uc_cmd command.
 */
static void ili9341_write_cmd(uint8_t uc_cmd)
{
     8e0:	b510      	push	{r4, lr}
     8e2:	4604      	mov	r4, r0
//  spi_set_bits_per_transfer(BOARD_ILI9341_SPI, BOARD_ILI9341_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  /* Enable SPI */
//  spi_enable(BOARD_ILI9341_SPI);

  /* Transfer data/command pin. (Select command.) */
  gpio_set_pin_low(BOARD_ILI9341_DC_GPIO);
     8e4:	2002      	movs	r0, #2
     8e6:	f000 fcc9 	bl	127c <pio_set_pin_low>
  spi_write(BOARD_ILI9341_SPI, uc_cmd, BOARD_ILI9341_SPI_NPCS, 0);
     8ea:	2300      	movs	r3, #0
     8ec:	2201      	movs	r2, #1
     8ee:	4621      	mov	r1, r4
     8f0:	4801      	ldr	r0, [pc, #4]	; (8f8 <ili9341_write_cmd+0x18>)
     8f2:	f7ff fd13 	bl	31c <spi_write>
     8f6:	bd10      	pop	{r4, pc}
     8f8:	40008000 	.word	0x40008000

000008fc <ili93xx_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
     8fc:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
     8fe:	4b05      	ldr	r3, [pc, #20]	; (914 <ili93xx_write_ram_prepare+0x18>)
     900:	781b      	ldrb	r3, [r3, #0]
     902:	2b01      	cmp	r3, #1
     904:	d004      	beq.n	910 <ili93xx_write_ram_prepare+0x14>

	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
     906:	2b02      	cmp	r3, #2
     908:	d102      	bne.n	910 <ili93xx_write_ram_prepare+0x14>
		/** memory write command (R2Ch)*/
	    ili9341_write_cmd(ILI9341_CMD_MEMORY_WRITE);
     90a:	202c      	movs	r0, #44	; 0x2c
     90c:	f7ff ffe8 	bl	8e0 <ili9341_write_cmd>
     910:	bd08      	pop	{r3, pc}
     912:	bf00      	nop
     914:	200003e8 	.word	0x200003e8

00000918 <ili93xx_write_ram>:
 * \brief Write data to LCD GRAM.
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
     918:	b538      	push	{r3, r4, r5, lr}
     91a:	4605      	mov	r5, r0

  /* Transfer data/command pin. (Select data.) */
  gpio_set_pin_high(BOARD_ILI9341_DC_GPIO);
     91c:	2002      	movs	r0, #2
     91e:	f000 fca3 	bl	1268 <pio_set_pin_high>

#if defined(BITS_16_COLOR)
  spi_write(BOARD_ILI9341_SPI, ((ul_color >> 8) & 0xFF), BOARD_ILI9341_SPI_NPCS, 0);
     922:	4c07      	ldr	r4, [pc, #28]	; (940 <ili93xx_write_ram+0x28>)
     924:	2300      	movs	r3, #0
     926:	2201      	movs	r2, #1
     928:	0a29      	lsrs	r1, r5, #8
     92a:	4620      	mov	r0, r4
     92c:	f7ff fcf6 	bl	31c <spi_write>
  spi_write(BOARD_ILI9341_SPI, (ul_color & 0xFF), BOARD_ILI9341_SPI_NPCS, 0);
     930:	2300      	movs	r3, #0
     932:	2201      	movs	r2, #1
     934:	b2e9      	uxtb	r1, r5
     936:	4620      	mov	r0, r4
     938:	f7ff fcf0 	bl	31c <spi_write>
     93c:	bd38      	pop	{r3, r4, r5, pc}
     93e:	bf00      	nop
     940:	40008000 	.word	0x40008000

00000944 <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
     944:	b570      	push	{r4, r5, r6, lr}
     946:	4605      	mov	r5, r0
     948:	460e      	mov	r6, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
     94a:	2400      	movs	r4, #0
     94c:	e027      	b.n	99e <ili93xx_write_ram_buffer+0x5a>
		ili93xx_write_ram(p_ul_buf[ul_addr]);
     94e:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
     952:	f7ff ffe1 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
     956:	1c63      	adds	r3, r4, #1
     958:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     95c:	f7ff ffdc 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
     960:	1ca3      	adds	r3, r4, #2
     962:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     966:	f7ff ffd7 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
     96a:	1ce3      	adds	r3, r4, #3
     96c:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     970:	f7ff ffd2 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
     974:	1d23      	adds	r3, r4, #4
     976:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     97a:	f7ff ffcd 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
     97e:	1d63      	adds	r3, r4, #5
     980:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     984:	f7ff ffc8 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
     988:	1da3      	adds	r3, r4, #6
     98a:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     98e:	f7ff ffc3 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
     992:	1de3      	adds	r3, r4, #7
     994:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
     998:	f7ff ffbe 	bl	918 <ili93xx_write_ram>
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
     99c:	3408      	adds	r4, #8
     99e:	f026 0307 	bic.w	r3, r6, #7
     9a2:	429c      	cmp	r4, r3
     9a4:	d3d3      	bcc.n	94e <ili93xx_write_ram_buffer+0xa>
     9a6:	e004      	b.n	9b2 <ili93xx_write_ram_buffer+0x6e>
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
		ili93xx_write_ram(p_ul_buf[ul_addr]);
     9a8:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
     9ac:	f7ff ffb4 	bl	918 <ili93xx_write_ram>
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
     9b0:	3401      	adds	r4, #1
     9b2:	42b4      	cmp	r4, r6
     9b4:	d3f8      	bcc.n	9a8 <ili93xx_write_ram_buffer+0x64>
		ili93xx_write_ram(p_ul_buf[ul_addr]);
	}
}
     9b6:	bd70      	pop	{r4, r5, r6, pc}

000009b8 <ili93xx_write_register_datas>:
 *
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register_datas(uint8_t uc_reg, uint8_t *p_data, uint8_t uc_datacnt)
{
     9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9bc:	b082      	sub	sp, #8
     9be:	460f      	mov	r7, r1
     9c0:	4690      	mov	r8, r2
     9c2:	ac02      	add	r4, sp, #8
     9c4:	f804 0d01 	strb.w	r0, [r4, #-1]!
  /* select command in the DC register. */
  gpio_set_pin_low(BOARD_ILI9341_DC_GPIO);
     9c8:	2002      	movs	r0, #2
     9ca:	f000 fc57 	bl	127c <pio_set_pin_low>
  spi_write_packet(BOARD_ILI9341_SPI, &uc_reg, &ILI9341_SPI_DEVICE, 1);
     9ce:	4e0a      	ldr	r6, [pc, #40]	; (9f8 <ili93xx_write_register_datas+0x40>)
     9d0:	4d0a      	ldr	r5, [pc, #40]	; (9fc <ili93xx_write_register_datas+0x44>)
     9d2:	2301      	movs	r3, #1
     9d4:	4632      	mov	r2, r6
     9d6:	4621      	mov	r1, r4
     9d8:	4628      	mov	r0, r5
     9da:	f000 fe2b 	bl	1634 <spi_write_packet>

  /* select data in the DC resgister. */
  gpio_set_pin_high(BOARD_ILI9341_DC_GPIO);
     9de:	2002      	movs	r0, #2
     9e0:	f000 fc42 	bl	1268 <pio_set_pin_high>

  spi_write_packet(BOARD_ILI9341_SPI, p_data, &ILI9341_SPI_DEVICE, uc_datacnt);
     9e4:	4643      	mov	r3, r8
     9e6:	4632      	mov	r2, r6
     9e8:	4639      	mov	r1, r7
     9ea:	4628      	mov	r0, r5
     9ec:	f000 fe22 	bl	1634 <spi_write_packet>

};
     9f0:	b002      	add	sp, #8
     9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9f6:	bf00      	nop
     9f8:	20000170 	.word	0x20000170
     9fc:	40008000 	.word	0x40008000

00000a00 <ili93xx_write_register_word>:
 *
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
     a00:	b500      	push	{lr}
     a02:	b083      	sub	sp, #12
     a04:	ab02      	add	r3, sp, #8
     a06:	f823 1d02 	strh.w	r1, [r3, #-2]!
  ili93xx_write_register_datas(uc_reg, (uint8_t*)&us_data, 2);
     a0a:	2202      	movs	r2, #2
     a0c:	4619      	mov	r1, r3
     a0e:	f7ff ffd3 	bl	9b8 <ili93xx_write_register_datas>
}
     a12:	b003      	add	sp, #12
     a14:	f85d fb04 	ldr.w	pc, [sp], #4

00000a18 <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
     a18:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
     a1a:	4b08      	ldr	r3, [pc, #32]	; (a3c <ili93xx_display_on+0x24>)
     a1c:	781b      	ldrb	r3, [r3, #0]
     a1e:	2b01      	cmp	r3, #1
     a20:	d105      	bne.n	a2e <ili93xx_display_on+0x16>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
     a22:	f240 1133 	movw	r1, #307	; 0x133
     a26:	2007      	movs	r0, #7
     a28:	f7ff ffea 	bl	a00 <ili93xx_write_register_word>
     a2c:	bd08      	pop	{r3, pc}
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
     a2e:	2b02      	cmp	r3, #2
     a30:	d102      	bne.n	a38 <ili93xx_display_on+0x20>
	    ili9341_write_cmd(ILI9341_CMD_DISPLAY_ON);
     a32:	2029      	movs	r0, #41	; 0x29
     a34:	f7ff ff54 	bl	8e0 <ili9341_write_cmd>
     a38:	bd08      	pop	{r3, pc}
     a3a:	bf00      	nop
     a3c:	200003e8 	.word	0x200003e8

00000a40 <ili93xx_set_foreground_color>:
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  uint32_t i;

  /** Fill the cache with selected color */
  for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
     a40:	2300      	movs	r3, #0
     a42:	e003      	b.n	a4c <ili93xx_set_foreground_color+0xc>
      g_ul_pixel_cache[i] = ul_color;
     a44:	4a03      	ldr	r2, [pc, #12]	; (a54 <ili93xx_set_foreground_color+0x14>)
     a46:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  uint32_t i;

  /** Fill the cache with selected color */
  for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
     a4a:	3301      	adds	r3, #1
     a4c:	2bef      	cmp	r3, #239	; 0xef
     a4e:	d9f9      	bls.n	a44 <ili93xx_set_foreground_color+0x4>
      g_ul_pixel_cache[i] = ul_color;
  }
}
     a50:	4770      	bx	lr
     a52:	bf00      	nop
     a54:	20000208 	.word	0x20000208

00000a58 <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	b083      	sub	sp, #12
     a5c:	460c      	mov	r4, r1
     a5e:	4617      	mov	r7, r2
     a60:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
     a62:	4b24      	ldr	r3, [pc, #144]	; (af4 <ili93xx_set_window+0x9c>)
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b01      	cmp	r3, #1
     a68:	d116      	bne.n	a98 <ili93xx_set_window+0x40>
		/** Set Horizontal Address Start Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
     a6a:	b285      	uxth	r5, r0
     a6c:	4629      	mov	r1, r5
     a6e:	2050      	movs	r0, #80	; 0x50
     a70:	f7ff ffc6 	bl	a00 <ili93xx_write_register_word>
				(uint16_t)ul_x);

		/** Set Horizontal Address End Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
     a74:	19e8      	adds	r0, r5, r7
     a76:	1e41      	subs	r1, r0, #1
     a78:	b289      	uxth	r1, r1
     a7a:	2051      	movs	r0, #81	; 0x51
     a7c:	f7ff ffc0 	bl	a00 <ili93xx_write_register_word>
				(uint16_t)(ul_x + ul_width - 1));

		/** Set Vertical Address Start Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
     a80:	b2a4      	uxth	r4, r4
     a82:	4621      	mov	r1, r4
     a84:	2052      	movs	r0, #82	; 0x52
     a86:	f7ff ffbb 	bl	a00 <ili93xx_write_register_word>
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
     a8a:	4434      	add	r4, r6
     a8c:	1e61      	subs	r1, r4, #1
     a8e:	b289      	uxth	r1, r1
     a90:	2053      	movs	r0, #83	; 0x53
     a92:	f7ff ffb5 	bl	a00 <ili93xx_write_register_word>
     a96:	e02b      	b.n	af0 <ili93xx_set_window+0x98>
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
     a98:	2b02      	cmp	r3, #2
     a9a:	d129      	bne.n	af0 <ili93xx_set_window+0x98>
		uint8_t paratable[4];

		/** Set Column Address Position */
		paratable[0] = (ul_x >> 8) & 0xFF;
     a9c:	0a03      	lsrs	r3, r0, #8
     a9e:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
     aa2:	b2c1      	uxtb	r1, r0
     aa4:	f88d 1005 	strb.w	r1, [sp, #5]
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
     aa8:	4410      	add	r0, r2
     aaa:	3801      	subs	r0, #1
     aac:	0a00      	lsrs	r0, r0, #8
     aae:	f88d 0006 	strb.w	r0, [sp, #6]
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
     ab2:	1888      	adds	r0, r1, r2
     ab4:	3801      	subs	r0, #1
     ab6:	f88d 0007 	strb.w	r0, [sp, #7]
		ili93xx_write_register_datas(ILI9341_CMD_COLUMN_ADDRESS_SET,
     aba:	2204      	movs	r2, #4
     abc:	eb0d 0102 	add.w	r1, sp, r2
     ac0:	202a      	movs	r0, #42	; 0x2a
     ac2:	f7ff ff79 	bl	9b8 <ili93xx_write_register_datas>
				paratable, 4);

		/** Set Page Address Position */
		paratable[0] = (ul_y >> 8) & 0xFF;
     ac6:	0a23      	lsrs	r3, r4, #8
     ac8:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_y & 0xFF;
     acc:	b2e3      	uxtb	r3, r4
     ace:	f88d 3005 	strb.w	r3, [sp, #5]
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
     ad2:	4434      	add	r4, r6
     ad4:	3c01      	subs	r4, #1
     ad6:	0a24      	lsrs	r4, r4, #8
     ad8:	f88d 4006 	strb.w	r4, [sp, #6]
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
     adc:	441e      	add	r6, r3
     ade:	3e01      	subs	r6, #1
     ae0:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register_datas(ILI9341_CMD_PAGE_ADDRESS_SET,
     ae4:	2204      	movs	r2, #4
     ae6:	eb0d 0102 	add.w	r1, sp, r2
     aea:	202b      	movs	r0, #43	; 0x2b
     aec:	f7ff ff64 	bl	9b8 <ili93xx_write_register_datas>
				       paratable, 4);
	}
}
     af0:	b003      	add	sp, #12
     af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af4:	200003e8 	.word	0x200003e8

00000af8 <ili93xx_init_w_spi>:
* \param p_opt pointer to ILI93xx option structure.
*
* \return 0 if initialization succeeds, otherwise fails.
*/
uint32_t ili93xx_init_w_spi(struct ili93xx_opt_t *p_opt)
{
     af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     afc:	b085      	sub	sp, #20
     afe:	4680      	mov	r8, r0
  uint8_t paratable[6];

    g_uc_device_type = DEVICE_TYPE_ILI9341;
     b00:	2602      	movs	r6, #2
     b02:	4b6c      	ldr	r3, [pc, #432]	; (cb4 <ili93xx_init_w_spi+0x1bc>)
     b04:	701e      	strb	r6, [r3, #0]

    /* Reset LCD module */
    gpio_set_pin_high(BOARD_ILI9341_RSTN_GPIO);
     b06:	2000      	movs	r0, #0
     b08:	f000 fbae 	bl	1268 <pio_set_pin_high>
    ili93xx_delay(2); /* wait for at least 2ms */
     b0c:	4630      	mov	r0, r6
     b0e:	f7ff fea3 	bl	858 <ili93xx_delay>

    gpio_set_pin_low(BOARD_ILI9341_RSTN_GPIO);
     b12:	2000      	movs	r0, #0
     b14:	f000 fbb2 	bl	127c <pio_set_pin_low>
    ili93xx_delay(20); /* wait for at least 20ms */
     b18:	2014      	movs	r0, #20
     b1a:	f7ff fe9d 	bl	858 <ili93xx_delay>

    gpio_set_pin_high(BOARD_ILI9341_RSTN_GPIO);
     b1e:	2000      	movs	r0, #0
     b20:	f000 fba2 	bl	1268 <pio_set_pin_high>
    ili93xx_delay(50); /* wait for at least 50ms */
     b24:	2032      	movs	r0, #50	; 0x32
     b26:	f7ff fe97 	bl	858 <ili93xx_delay>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
     b2a:	4f63      	ldr	r7, [pc, #396]	; (cb8 <ili93xx_init_w_spi+0x1c0>)
     b2c:	603e      	str	r6, [r7, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
     b2e:	2380      	movs	r3, #128	; 0x80
     b30:	603b      	str	r3, [r7, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
     b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     b36:	603b      	str	r3, [r7, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     b38:	4b60      	ldr	r3, [pc, #384]	; (cbc <ili93xx_init_w_spi+0x1c4>)
     b3a:	2501      	movs	r5, #1
     b3c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     b40:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     b44:	2400      	movs	r4, #0
     b46:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(BOARD_ILI9341_SPI_IRQN);
    NVIC_SetPriority(BOARD_ILI9341_SPI_IRQN, 0);
//    NVIC_EnableIRQ(BOARD_ILI9341_SPI_IRQN);

    /* Init, select and configure the chip */
    spi_master_init(BOARD_ILI9341_SPI);
     b4a:	4638      	mov	r0, r7
     b4c:	f000 fd0a 	bl	1564 <spi_master_init>
    spi_master_setup_device(BOARD_ILI9341_SPI, &ILI9341_SPI_DEVICE, SPI_MODE_0, ILI9341_SPI_BAUDRATE, 0);
     b50:	f8df 9178 	ldr.w	r9, [pc, #376]	; ccc <ili93xx_init_w_spi+0x1d4>
     b54:	9400      	str	r4, [sp, #0]
     b56:	4b5a      	ldr	r3, [pc, #360]	; (cc0 <ili93xx_init_w_spi+0x1c8>)
     b58:	4622      	mov	r2, r4
     b5a:	4649      	mov	r1, r9
     b5c:	4638      	mov	r0, r7
     b5e:	f000 fd25 	bl	15ac <spi_master_setup_device>
    spi_select_device(BOARD_ILI9341_SPI, &ILI9341_SPI_DEVICE);
     b62:	4649      	mov	r1, r9
     b64:	4638      	mov	r0, r7
     b66:	f000 fd4f 	bl	1608 <spi_select_device>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
     b6a:	603d      	str	r5, [r7, #0]

    /* Enable the SPI peripheral */
    spi_enable(BOARD_ILI9341_SPI);
//    spi_enable_interrupt(BOARD_ILI9341_SPI, SPI_IER_RDRF);

    g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
     b6c:	22f0      	movs	r2, #240	; 0xf0
     b6e:	4b55      	ldr	r3, [pc, #340]	; (cc4 <ili93xx_init_w_spi+0x1cc>)
     b70:	601a      	str	r2, [r3, #0]
    g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
     b72:	f44f 72a0 	mov.w	r2, #320	; 0x140
     b76:	4b54      	ldr	r3, [pc, #336]	; (cc8 <ili93xx_init_w_spi+0x1d0>)
     b78:	601a      	str	r2, [r3, #0]
//    ili93xx_device_type_identify();
	//{	return 1; }

    /** init for ILI9341 **/
    /** power control A configuration*/
    paratable[0] = 0x39;
     b7a:	2339      	movs	r3, #57	; 0x39
     b7c:	f88d 3008 	strb.w	r3, [sp, #8]
    paratable[1] = 0x2C;
     b80:	232c      	movs	r3, #44	; 0x2c
     b82:	f88d 3009 	strb.w	r3, [sp, #9]
    paratable[2] = 0x00;
     b86:	f88d 400a 	strb.w	r4, [sp, #10]
    paratable[3] = 0x34;
     b8a:	2334      	movs	r3, #52	; 0x34
     b8c:	f88d 300b 	strb.w	r3, [sp, #11]
    paratable[4] = 0x02;
     b90:	f88d 600c 	strb.w	r6, [sp, #12]
    ili93xx_write_register_datas(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
     b94:	2205      	movs	r2, #5
     b96:	a902      	add	r1, sp, #8
     b98:	20cb      	movs	r0, #203	; 0xcb
     b9a:	f7ff ff0d 	bl	9b8 <ili93xx_write_register_datas>

    /** power control B configuration */
    paratable[0] = 0;
     b9e:	f88d 4008 	strb.w	r4, [sp, #8]
    paratable[1] = 0xAA;
     ba2:	23aa      	movs	r3, #170	; 0xaa
     ba4:	f88d 3009 	strb.w	r3, [sp, #9]
    paratable[2] = 0xB0;
     ba8:	23b0      	movs	r3, #176	; 0xb0
     baa:	f88d 300a 	strb.w	r3, [sp, #10]
    ili93xx_write_register_datas(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
     bae:	2203      	movs	r2, #3
     bb0:	a902      	add	r1, sp, #8
     bb2:	20cf      	movs	r0, #207	; 0xcf
     bb4:	f7ff ff00 	bl	9b8 <ili93xx_write_register_datas>

    /** Pump Ratio Control configuration */
    paratable[0] = 0x30;
     bb8:	2330      	movs	r3, #48	; 0x30
     bba:	f88d 3008 	strb.w	r3, [sp, #8]
    ili93xx_write_register_datas(ILI9341_CMD_PUMP_RATIO_CONTROL, paratable, 1);
     bbe:	462a      	mov	r2, r5
     bc0:	a902      	add	r1, sp, #8
     bc2:	20f7      	movs	r0, #247	; 0xf7
     bc4:	f7ff fef8 	bl	9b8 <ili93xx_write_register_datas>

    /** Power Control 1 configuration*/
    paratable[0] = 0x25;
     bc8:	2325      	movs	r3, #37	; 0x25
     bca:	f88d 3008 	strb.w	r3, [sp, #8]
    ili93xx_write_register_datas(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
     bce:	462a      	mov	r2, r5
     bd0:	a902      	add	r1, sp, #8
     bd2:	20c0      	movs	r0, #192	; 0xc0
     bd4:	f7ff fef0 	bl	9b8 <ili93xx_write_register_datas>

    /** Power Control 2 configuration*/
    paratable[0] = 0x11;
     bd8:	2711      	movs	r7, #17
     bda:	f88d 7008 	strb.w	r7, [sp, #8]
    ili93xx_write_register_datas(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
     bde:	462a      	mov	r2, r5
     be0:	a902      	add	r1, sp, #8
     be2:	20c1      	movs	r0, #193	; 0xc1
     be4:	f7ff fee8 	bl	9b8 <ili93xx_write_register_datas>

    /** VOM Control 1 configuration*/
    paratable[0] = 0x5C;
     be8:	235c      	movs	r3, #92	; 0x5c
     bea:	f88d 3008 	strb.w	r3, [sp, #8]
    paratable[1] = 0x4C;
     bee:	234c      	movs	r3, #76	; 0x4c
     bf0:	f88d 3009 	strb.w	r3, [sp, #9]
    ili93xx_write_register_datas(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
     bf4:	4632      	mov	r2, r6
     bf6:	a902      	add	r1, sp, #8
     bf8:	20c5      	movs	r0, #197	; 0xc5
     bfa:	f7ff fedd 	bl	9b8 <ili93xx_write_register_datas>

    /** VOM control 2 configuration*/
    paratable[0] = 0x94;
     bfe:	2394      	movs	r3, #148	; 0x94
     c00:	f88d 3008 	strb.w	r3, [sp, #8]
    ili93xx_write_register_datas(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
     c04:	462a      	mov	r2, r5
     c06:	a902      	add	r1, sp, #8
     c08:	20c7      	movs	r0, #199	; 0xc7
     c0a:	f7ff fed5 	bl	9b8 <ili93xx_write_register_datas>

    /** Driver Timing Control A configuration*/
    paratable[0] = 0x85;
     c0e:	2385      	movs	r3, #133	; 0x85
     c10:	f88d 3008 	strb.w	r3, [sp, #8]
    paratable[1] = 0x01;
     c14:	f88d 5009 	strb.w	r5, [sp, #9]
    paratable[2] = 0x78;
     c18:	2378      	movs	r3, #120	; 0x78
     c1a:	f88d 300a 	strb.w	r3, [sp, #10]
    ili93xx_write_register_datas(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
     c1e:	2203      	movs	r2, #3
     c20:	a902      	add	r1, sp, #8
     c22:	20e8      	movs	r0, #232	; 0xe8
     c24:	f7ff fec8 	bl	9b8 <ili93xx_write_register_datas>

    /** Driver Timing Control B configuration*/
    paratable[0] = 0x00;
     c28:	f88d 4008 	strb.w	r4, [sp, #8]
    paratable[1] = 0x00;
     c2c:	f88d 4009 	strb.w	r4, [sp, #9]
    ili93xx_write_register_datas(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
     c30:	4632      	mov	r2, r6
     c32:	a902      	add	r1, sp, #8
     c34:	20ea      	movs	r0, #234	; 0xea
     c36:	f7ff febf 	bl	9b8 <ili93xx_write_register_datas>

    /** Memory Access Control configuration*/
    paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_BGR | ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX;
     c3a:	2348      	movs	r3, #72	; 0x48
     c3c:	f88d 3008 	strb.w	r3, [sp, #8]
    ili93xx_write_register_datas(ILI9341_CMD_MEMORY_ACCESS_CONTROL, paratable, 1);
     c40:	462a      	mov	r2, r5
     c42:	a902      	add	r1, sp, #8
     c44:	2036      	movs	r0, #54	; 0x36
     c46:	f7ff feb7 	bl	9b8 <ili93xx_write_register_datas>

    /** Colmod Pixel Format Set configuation*/
#if defined(BITS_16_COLOR)
    paratable[0] = ILI9341_CMD_PIXEL_FORMAT_16_BITS;
     c4a:	2355      	movs	r3, #85	; 0x55
     c4c:	f88d 3008 	strb.w	r3, [sp, #8]
#endif
#if defined(BITS_24_COLOR)
    paratable[0] = ILI9341_CMD_PIXEL_FORMAT_24_BITS;
#endif
    ili93xx_write_register_datas(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
     c50:	462a      	mov	r2, r5
     c52:	a902      	add	r1, sp, #8
     c54:	203a      	movs	r0, #58	; 0x3a
     c56:	f7ff feaf 	bl	9b8 <ili93xx_write_register_datas>

    /** Display Function Control */
    paratable[0] = 0x02;
     c5a:	f88d 6008 	strb.w	r6, [sp, #8]
    paratable[1] = 0x82;
     c5e:	2382      	movs	r3, #130	; 0x82
     c60:	f88d 3009 	strb.w	r3, [sp, #9]
    paratable[2] = 0x27;
     c64:	2327      	movs	r3, #39	; 0x27
     c66:	f88d 300a 	strb.w	r3, [sp, #10]
    paratable[3] = 0x00;
     c6a:	f88d 400b 	strb.w	r4, [sp, #11]
    ili93xx_write_register_datas(ILI9341_CMD_DISPLAY_FUNCTION_CTL, paratable, 4);
     c6e:	2204      	movs	r2, #4
     c70:	a902      	add	r1, sp, #8
     c72:	20b6      	movs	r0, #182	; 0xb6
     c74:	f7ff fea0 	bl	9b8 <ili93xx_write_register_datas>

    /** set window area*/
    ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
     c78:	f8d8 3004 	ldr.w	r3, [r8, #4]
     c7c:	f8d8 2000 	ldr.w	r2, [r8]
     c80:	4621      	mov	r1, r4
     c82:	4620      	mov	r0, r4
     c84:	f7ff fee8 	bl	a58 <ili93xx_set_window>
    ili93xx_set_foreground_color(p_opt->foreground_color);
     c88:	f8b8 0008 	ldrh.w	r0, [r8, #8]
     c8c:	f7ff fed8 	bl	a40 <ili93xx_set_foreground_color>
    /** Leave sleep mode*/
    ili93xx_write_register_datas(ILI9341_CMD_SLEEP_OUT, paratable, 0);
     c90:	4622      	mov	r2, r4
     c92:	a902      	add	r1, sp, #8
     c94:	4638      	mov	r0, r7
     c96:	f7ff fe8f 	bl	9b8 <ili93xx_write_register_datas>
    ili93xx_delay(10);
     c9a:	200a      	movs	r0, #10
     c9c:	f7ff fddc 	bl	858 <ili93xx_delay>
    /** Display on*/
    ili93xx_write_register_datas(ILI9341_CMD_DISPLAY_ON, paratable, 0);
     ca0:	4622      	mov	r2, r4
     ca2:	a902      	add	r1, sp, #8
     ca4:	2029      	movs	r0, #41	; 0x29
     ca6:	f7ff fe87 	bl	9b8 <ili93xx_write_register_datas>

//    ili93xx_device_type_identify();

    return 0;

};
     caa:	4620      	mov	r0, r4
     cac:	b005      	add	sp, #20
     cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     cb2:	bf00      	nop
     cb4:	200003e8 	.word	0x200003e8
     cb8:	40008000 	.word	0x40008000
     cbc:	e000e100 	.word	0xe000e100
     cc0:	00e4e1c0 	.word	0x00e4e1c0
     cc4:	20000174 	.word	0x20000174
     cc8:	20000178 	.word	0x20000178
     ccc:	20000170 	.word	0x20000170

00000cd0 <ili93xx_set_cursor_position>:
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
     cd0:	4b07      	ldr	r3, [pc, #28]	; (cf0 <ili93xx_set_cursor_position+0x20>)
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b01      	cmp	r3, #1
     cd6:	d10a      	bne.n	cee <ili93xx_set_cursor_position+0x1e>
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
     cd8:	b510      	push	{r4, lr}
     cda:	460c      	mov	r4, r1
     cdc:	4601      	mov	r1, r0
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
     cde:	2020      	movs	r0, #32
     ce0:	f7ff fe8e 	bl	a00 <ili93xx_write_register_word>
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
     ce4:	4621      	mov	r1, r4
     ce6:	2021      	movs	r0, #33	; 0x21
     ce8:	f7ff fe8a 	bl	a00 <ili93xx_write_register_word>
     cec:	bd10      	pop	{r4, pc}
     cee:	4770      	bx	lr
     cf0:	200003e8 	.word	0x200003e8

00000cf4 <ili93xx_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
     cf4:	b508      	push	{r3, lr}
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
     cf6:	4b16      	ldr	r3, [pc, #88]	; (d50 <ili93xx_draw_pixel+0x5c>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	4283      	cmp	r3, r0
     cfc:	d921      	bls.n	d42 <ili93xx_draw_pixel+0x4e>
     cfe:	4b15      	ldr	r3, [pc, #84]	; (d54 <ili93xx_draw_pixel+0x60>)
     d00:	681b      	ldr	r3, [r3, #0]
     d02:	428b      	cmp	r3, r1
     d04:	d91f      	bls.n	d46 <ili93xx_draw_pixel+0x52>
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
     d06:	4b14      	ldr	r3, [pc, #80]	; (d58 <ili93xx_draw_pixel+0x64>)
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	2b01      	cmp	r3, #1
     d0c:	d10b      	bne.n	d26 <ili93xx_draw_pixel+0x32>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
     d0e:	b289      	uxth	r1, r1
     d10:	b280      	uxth	r0, r0
     d12:	f7ff ffdd 	bl	cd0 <ili93xx_set_cursor_position>
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
     d16:	f7ff fdf1 	bl	8fc <ili93xx_write_ram_prepare>
		ili93xx_write_ram(*g_ul_pixel_cache);
     d1a:	4b10      	ldr	r3, [pc, #64]	; (d5c <ili93xx_draw_pixel+0x68>)
     d1c:	8818      	ldrh	r0, [r3, #0]
     d1e:	f7ff fdfb 	bl	918 <ili93xx_write_ram>
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
     d22:	2000      	movs	r0, #0
     d24:	bd08      	pop	{r3, pc}
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
     d26:	2b02      	cmp	r3, #2
     d28:	d10f      	bne.n	d4a <ili93xx_draw_pixel+0x56>
		ili93xx_set_window(ul_x, ul_y, 0, 0);
     d2a:	2300      	movs	r3, #0
     d2c:	461a      	mov	r2, r3
     d2e:	f7ff fe93 	bl	a58 <ili93xx_set_window>
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
     d32:	f7ff fde3 	bl	8fc <ili93xx_write_ram_prepare>
		ili93xx_write_ram(*g_ul_pixel_cache);
     d36:	4b09      	ldr	r3, [pc, #36]	; (d5c <ili93xx_draw_pixel+0x68>)
     d38:	8818      	ldrh	r0, [r3, #0]
     d3a:	f7ff fded 	bl	918 <ili93xx_write_ram>
	}

	return 0;
     d3e:	2000      	movs	r0, #0
     d40:	bd08      	pop	{r3, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
		return 1;
     d42:	2001      	movs	r0, #1
     d44:	bd08      	pop	{r3, pc}
     d46:	2001      	movs	r0, #1
     d48:	bd08      	pop	{r3, pc}
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
     d4a:	2000      	movs	r0, #0
}
     d4c:	bd08      	pop	{r3, pc}
     d4e:	bf00      	nop
     d50:	20000174 	.word	0x20000174
     d54:	20000178 	.word	0x20000178
     d58:	200003e8 	.word	0x200003e8
     d5c:	20000208 	.word	0x20000208

00000d60 <ili93xx_draw_char>:
 * \param ul_x X coordinate of character upper-left corner.
 * \param ul_y Y coordinate of character upper-left corner.
 * \param uc_c character to print.
 */
static void ili93xx_draw_char(uint32_t ul_x, uint32_t ul_y, uint8_t uc_c)
{
     d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d64:	4681      	mov	r9, r0
     d66:	4688      	mov	r8, r1

	/**
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;
     d68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     d6c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
     d70:	f5aa 7a20 	sub.w	sl, sl, #640	; 0x280

	for (col = 0; col < 10; col++) {
     d74:	2600      	movs	r6, #0
     d76:	e02a      	b.n	dce <ili93xx_draw_char+0x6e>
		/** Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
     d78:	eb0a 0546 	add.w	r5, sl, r6, lsl #1
		offset1 = offset0 + 1;
     d7c:	1c6f      	adds	r7, r5, #1

		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
     d7e:	2400      	movs	r4, #0
     d80:	e00e      	b.n	da0 <ili93xx_draw_char+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
     d82:	4b15      	ldr	r3, [pc, #84]	; (dd8 <ili93xx_draw_char+0x78>)
     d84:	5d5b      	ldrb	r3, [r3, r5]
     d86:	f1c4 0207 	rsb	r2, r4, #7
     d8a:	4113      	asrs	r3, r2
     d8c:	f013 0f01 	tst.w	r3, #1
     d90:	d005      	beq.n	d9e <ili93xx_draw_char+0x3e>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
     d92:	eb04 0108 	add.w	r1, r4, r8
     d96:	eb06 0009 	add.w	r0, r6, r9
     d9a:	f7ff ffab 	bl	cf4 <ili93xx_draw_pixel>

		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
     d9e:	3401      	adds	r4, #1
     da0:	2c07      	cmp	r4, #7
     da2:	d9ee      	bls.n	d82 <ili93xx_draw_char+0x22>
     da4:	2400      	movs	r4, #0
     da6:	e00f      	b.n	dc8 <ili93xx_draw_char+0x68>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
     da8:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <ili93xx_draw_char+0x78>)
     daa:	5ddb      	ldrb	r3, [r3, r7]
     dac:	f1c4 0207 	rsb	r2, r4, #7
     db0:	4113      	asrs	r3, r2
     db2:	f013 0f01 	tst.w	r3, #1
     db6:	d006      	beq.n	dc6 <ili93xx_draw_char+0x66>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
     db8:	eb04 0108 	add.w	r1, r4, r8
     dbc:	3108      	adds	r1, #8
     dbe:	eb06 0009 	add.w	r0, r6, r9
     dc2:	f7ff ff97 	bl	cf4 <ili93xx_draw_pixel>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
     dc6:	3401      	adds	r4, #1
     dc8:	2c05      	cmp	r4, #5
     dca:	d9ed      	bls.n	da8 <ili93xx_draw_char+0x48>
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
     dcc:	3601      	adds	r6, #1
     dce:	2e09      	cmp	r6, #9
     dd0:	d9d2      	bls.n	d78 <ili93xx_draw_char+0x18>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
			}
		}
	}
}
     dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     dd6:	bf00      	nop
     dd8:	0000331c 	.word	0x0000331c

00000ddc <ili93xx_draw_filled_rectangle>:
 * \param ul_y1 Y coordinate of upper-left corner on LCD.
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1, uint32_t ul_x2, uint32_t ul_y2)
{
     ddc:	b530      	push	{r4, r5, lr}
     dde:	b085      	sub	sp, #20
     de0:	9003      	str	r0, [sp, #12]
     de2:	9102      	str	r1, [sp, #8]
     de4:	9201      	str	r2, [sp, #4]
     de6:	aa04      	add	r2, sp, #16
     de8:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
     dec:	4613      	mov	r3, r2
     dee:	aa01      	add	r2, sp, #4
     df0:	a902      	add	r1, sp, #8
     df2:	a803      	add	r0, sp, #12
     df4:	f7ff fd48 	bl	888 <ili93xx_check_box_coordinates>

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
     df8:	9803      	ldr	r0, [sp, #12]
     dfa:	9a01      	ldr	r2, [sp, #4]
     dfc:	1a12      	subs	r2, r2, r0
			(ul_y2 - ul_y1) + 1);
     dfe:	9902      	ldr	r1, [sp, #8]
     e00:	9b00      	ldr	r3, [sp, #0]
     e02:	1a5b      	subs	r3, r3, r1

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
     e04:	3301      	adds	r3, #1
     e06:	3201      	adds	r2, #1
     e08:	f7ff fe26 	bl	a58 <ili93xx_set_window>
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
     e0c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
     e10:	f8bd 000c 	ldrh.w	r0, [sp, #12]
     e14:	f7ff ff5c 	bl	cd0 <ili93xx_set_cursor_position>

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
     e18:	f7ff fd70 	bl	8fc <ili93xx_write_ram_prepare>

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
     e1c:	9d03      	ldr	r5, [sp, #12]
     e1e:	9b01      	ldr	r3, [sp, #4]
     e20:	1b5a      	subs	r2, r3, r5
     e22:	9d02      	ldr	r5, [sp, #8]
     e24:	9b00      	ldr	r3, [sp, #0]
     e26:	1b5d      	subs	r5, r3, r5
     e28:	3501      	adds	r5, #1
     e2a:	fb02 5505 	mla	r5, r2, r5, r5

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
     e2e:	4b11      	ldr	r3, [pc, #68]	; (e74 <ili93xx_draw_filled_rectangle+0x98>)
     e30:	fba3 2305 	umull	r2, r3, r3, r5
     e34:	09db      	lsrs	r3, r3, #7
	while (blocks--) { ili93xx_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE); }
     e36:	e004      	b.n	e42 <ili93xx_draw_filled_rectangle+0x66>
     e38:	21f0      	movs	r1, #240	; 0xf0
     e3a:	480f      	ldr	r0, [pc, #60]	; (e78 <ili93xx_draw_filled_rectangle+0x9c>)
     e3c:	f7ff fd82 	bl	944 <ili93xx_write_ram_buffer>
     e40:	4623      	mov	r3, r4
     e42:	1e5c      	subs	r4, r3, #1
     e44:	2b00      	cmp	r3, #0
     e46:	d1f7      	bne.n	e38 <ili93xx_draw_filled_rectangle+0x5c>

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache, size % LCD_DATA_CACHE_SIZE);
     e48:	f1a3 3377 	sub.w	r3, r3, #2004318071	; 0x77777777
     e4c:	fba3 2305 	umull	r2, r3, r3, r5
     e50:	09db      	lsrs	r3, r3, #7
     e52:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     e56:	0119      	lsls	r1, r3, #4
     e58:	1a69      	subs	r1, r5, r1
     e5a:	4807      	ldr	r0, [pc, #28]	; (e78 <ili93xx_draw_filled_rectangle+0x9c>)
     e5c:	f7ff fd72 	bl	944 <ili93xx_write_ram_buffer>

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
     e60:	4b06      	ldr	r3, [pc, #24]	; (e7c <ili93xx_draw_filled_rectangle+0xa0>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	4a06      	ldr	r2, [pc, #24]	; (e80 <ili93xx_draw_filled_rectangle+0xa4>)
     e66:	6812      	ldr	r2, [r2, #0]
     e68:	2100      	movs	r1, #0
     e6a:	4608      	mov	r0, r1
     e6c:	f7ff fdf4 	bl	a58 <ili93xx_set_window>
}
     e70:	b005      	add	sp, #20
     e72:	bd30      	pop	{r4, r5, pc}
     e74:	88888889 	.word	0x88888889
     e78:	20000208 	.word	0x20000208
     e7c:	20000178 	.word	0x20000178
     e80:	20000174 	.word	0x20000174

00000e84 <ili93xx_draw_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
     e84:	b500      	push	{lr}
     e86:	b085      	sub	sp, #20
     e88:	9003      	str	r0, [sp, #12]
     e8a:	9102      	str	r1, [sp, #8]
     e8c:	9201      	str	r2, [sp, #4]
     e8e:	aa04      	add	r2, sp, #16
     e90:	f842 3d10 	str.w	r3, [r2, #-16]!
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
     e94:	4613      	mov	r3, r2
     e96:	aa01      	add	r2, sp, #4
     e98:	a902      	add	r1, sp, #8
     e9a:	a803      	add	r0, sp, #12
     e9c:	f7ff fcf4 	bl	888 <ili93xx_check_box_coordinates>

	ili93xx_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y1);
     ea0:	9b02      	ldr	r3, [sp, #8]
     ea2:	9a01      	ldr	r2, [sp, #4]
     ea4:	4619      	mov	r1, r3
     ea6:	9803      	ldr	r0, [sp, #12]
     ea8:	f7ff ff98 	bl	ddc <ili93xx_draw_filled_rectangle>
	ili93xx_draw_filled_rectangle(ul_x1, ul_y2, ul_x2, ul_y2);
     eac:	9b00      	ldr	r3, [sp, #0]
     eae:	9a01      	ldr	r2, [sp, #4]
     eb0:	4619      	mov	r1, r3
     eb2:	9803      	ldr	r0, [sp, #12]
     eb4:	f7ff ff92 	bl	ddc <ili93xx_draw_filled_rectangle>

	ili93xx_draw_filled_rectangle(ul_x1, ul_y1, ul_x1, ul_y2);
     eb8:	9b00      	ldr	r3, [sp, #0]
     eba:	9a03      	ldr	r2, [sp, #12]
     ebc:	9902      	ldr	r1, [sp, #8]
     ebe:	4610      	mov	r0, r2
     ec0:	f7ff ff8c 	bl	ddc <ili93xx_draw_filled_rectangle>
	ili93xx_draw_filled_rectangle(ul_x2, ul_y1, ul_x2, ul_y2);
     ec4:	9b00      	ldr	r3, [sp, #0]
     ec6:	9a01      	ldr	r2, [sp, #4]
     ec8:	9902      	ldr	r1, [sp, #8]
     eca:	4610      	mov	r0, r2
     ecc:	f7ff ff86 	bl	ddc <ili93xx_draw_filled_rectangle>
}
     ed0:	b005      	add	sp, #20
     ed2:	f85d fb04 	ldr.w	pc, [sp], #4
     ed6:	bf00      	nop

00000ed8 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
     ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eda:	4607      	mov	r7, r0
     edc:	460e      	mov	r6, r1
     ede:	4614      	mov	r4, r2
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
     ee0:	4605      	mov	r5, r0
     ee2:	e00a      	b.n	efa <ili93xx_draw_string+0x22>
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
     ee4:	2a0a      	cmp	r2, #10
     ee6:	d102      	bne.n	eee <ili93xx_draw_string+0x16>
			ul_y += gfont.height + 2;
     ee8:	3610      	adds	r6, #16
			ul_x = xorg;
     eea:	463d      	mov	r5, r7
     eec:	e004      	b.n	ef8 <ili93xx_draw_string+0x20>
		} else {
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
     eee:	4631      	mov	r1, r6
     ef0:	4628      	mov	r0, r5
     ef2:	f7ff ff35 	bl	d60 <ili93xx_draw_char>
			ul_x += gfont.width + 2;
     ef6:	350c      	adds	r5, #12
		}

		p_str++;
     ef8:	3401      	adds	r4, #1
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
     efa:	7822      	ldrb	r2, [r4, #0]
     efc:	2a00      	cmp	r2, #0
     efe:	d1f1      	bne.n	ee4 <ili93xx_draw_string+0xc>
			ul_x += gfont.width + 2;
		}

		p_str++;
	}
}
     f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f02:	bf00      	nop

00000f04 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
     f04:	4a13      	ldr	r2, [pc, #76]	; (f54 <pmc_switch_mck_to_mainck+0x50>)
     f06:	6b13      	ldr	r3, [r2, #48]	; 0x30
     f08:	f023 0303 	bic.w	r3, r3, #3
     f0c:	f043 0301 	orr.w	r3, r3, #1
     f10:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
     f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
     f16:	e001      	b.n	f1c <pmc_switch_mck_to_mainck+0x18>
			--ul_timeout) {
		if (ul_timeout == 0) {
     f18:	b1bb      	cbz	r3, f4a <pmc_switch_mck_to_mainck+0x46>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
     f1a:	3b01      	subs	r3, #1
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
     f1c:	4a0d      	ldr	r2, [pc, #52]	; (f54 <pmc_switch_mck_to_mainck+0x50>)
     f1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
     f20:	f012 0f08 	tst.w	r2, #8
     f24:	d0f8      	beq.n	f18 <pmc_switch_mck_to_mainck+0x14>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
     f26:	4a0b      	ldr	r2, [pc, #44]	; (f54 <pmc_switch_mck_to_mainck+0x50>)
     f28:	6b13      	ldr	r3, [r2, #48]	; 0x30
     f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     f2e:	4318      	orrs	r0, r3
     f30:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
     f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
     f36:	e001      	b.n	f3c <pmc_switch_mck_to_mainck+0x38>
			--ul_timeout) {
		if (ul_timeout == 0) {
     f38:	b14b      	cbz	r3, f4e <pmc_switch_mck_to_mainck+0x4a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
     f3a:	3b01      	subs	r3, #1
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
     f3c:	4a05      	ldr	r2, [pc, #20]	; (f54 <pmc_switch_mck_to_mainck+0x50>)
     f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
     f40:	f012 0f08 	tst.w	r2, #8
     f44:	d0f8      	beq.n	f38 <pmc_switch_mck_to_mainck+0x34>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
     f46:	2000      	movs	r0, #0
     f48:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
     f4a:	2001      	movs	r0, #1
     f4c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
     f4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
     f50:	4770      	bx	lr
     f52:	bf00      	nop
     f54:	400e0400 	.word	0x400e0400

00000f58 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
     f58:	b138      	cbz	r0, f6a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
     f5a:	4911      	ldr	r1, [pc, #68]	; (fa0 <pmc_switch_mainck_to_xtal+0x48>)
     f5c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
     f5e:	4a11      	ldr	r2, [pc, #68]	; (fa4 <pmc_switch_mainck_to_xtal+0x4c>)
     f60:	401a      	ands	r2, r3
     f62:	4b11      	ldr	r3, [pc, #68]	; (fa8 <pmc_switch_mainck_to_xtal+0x50>)
     f64:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
     f66:	620b      	str	r3, [r1, #32]
     f68:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
     f6a:	4a0d      	ldr	r2, [pc, #52]	; (fa0 <pmc_switch_mainck_to_xtal+0x48>)
     f6c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
     f6e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
     f72:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
     f76:	0209      	lsls	r1, r1, #8
     f78:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
     f7a:	430b      	orrs	r3, r1
     f7c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
     f80:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
     f84:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
     f86:	4b06      	ldr	r3, [pc, #24]	; (fa0 <pmc_switch_mainck_to_xtal+0x48>)
     f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     f8a:	f013 0f01 	tst.w	r3, #1
     f8e:	d0fa      	beq.n	f86 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
     f90:	4a03      	ldr	r2, [pc, #12]	; (fa0 <pmc_switch_mainck_to_xtal+0x48>)
     f92:	6a13      	ldr	r3, [r2, #32]
     f94:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
     f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     f9c:	6213      	str	r3, [r2, #32]
     f9e:	4770      	bx	lr
     fa0:	400e0400 	.word	0x400e0400
     fa4:	fec8fffc 	.word	0xfec8fffc
     fa8:	01370002 	.word	0x01370002

00000fac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
     fac:	4b02      	ldr	r3, [pc, #8]	; (fb8 <pmc_osc_is_ready_mainck+0xc>)
     fae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
     fb0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
     fb4:	4770      	bx	lr
     fb6:	bf00      	nop
     fb8:	400e0400 	.word	0x400e0400

00000fbc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
     fbc:	2822      	cmp	r0, #34	; 0x22
     fbe:	d81e      	bhi.n	ffe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
     fc0:	281f      	cmp	r0, #31
     fc2:	d80c      	bhi.n	fde <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
     fc4:	4b11      	ldr	r3, [pc, #68]	; (100c <pmc_enable_periph_clk+0x50>)
     fc6:	699a      	ldr	r2, [r3, #24]
     fc8:	2301      	movs	r3, #1
     fca:	4083      	lsls	r3, r0
     fcc:	4393      	bics	r3, r2
     fce:	d018      	beq.n	1002 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
     fd0:	2301      	movs	r3, #1
     fd2:	fa03 f000 	lsl.w	r0, r3, r0
     fd6:	4b0d      	ldr	r3, [pc, #52]	; (100c <pmc_enable_periph_clk+0x50>)
     fd8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
     fda:	2000      	movs	r0, #0
     fdc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
     fde:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
     fe0:	4b0a      	ldr	r3, [pc, #40]	; (100c <pmc_enable_periph_clk+0x50>)
     fe2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     fe6:	2301      	movs	r3, #1
     fe8:	4083      	lsls	r3, r0
     fea:	4393      	bics	r3, r2
     fec:	d00b      	beq.n	1006 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
     fee:	2301      	movs	r3, #1
     ff0:	fa03 f000 	lsl.w	r0, r3, r0
     ff4:	4b05      	ldr	r3, [pc, #20]	; (100c <pmc_enable_periph_clk+0x50>)
     ff6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
     ffa:	2000      	movs	r0, #0
     ffc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
     ffe:	2001      	movs	r0, #1
    1000:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
    1002:	2000      	movs	r0, #0
    1004:	4770      	bx	lr
    1006:	2000      	movs	r0, #0
}
    1008:	4770      	bx	lr
    100a:	bf00      	nop
    100c:	400e0400 	.word	0x400e0400

00001010 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
    1010:	b10a      	cbz	r2, 1016 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
    1012:	6641      	str	r1, [r0, #100]	; 0x64
    1014:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
    1016:	6601      	str	r1, [r0, #96]	; 0x60
    1018:	4770      	bx	lr
    101a:	bf00      	nop

0000101c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
    101c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
    1020:	0052      	lsls	r2, r2, #1
    1022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1026:	fbb3 f2f2 	udiv	r2, r3, r2
    102a:	3a01      	subs	r2, #1
    102c:	f3c2 020d 	ubfx	r2, r2, #0, #14
    1030:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    1034:	4770      	bx	lr
    1036:	bf00      	nop

00001038 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
    1038:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
    103a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
    103e:	d02f      	beq.n	10a0 <pio_set_peripheral+0x68>
    1040:	d807      	bhi.n	1052 <pio_set_peripheral+0x1a>
    1042:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    1046:	d014      	beq.n	1072 <pio_set_peripheral+0x3a>
    1048:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    104c:	d01e      	beq.n	108c <pio_set_peripheral+0x54>
    104e:	b939      	cbnz	r1, 1060 <pio_set_peripheral+0x28>
    1050:	4770      	bx	lr
    1052:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
    1056:	d036      	beq.n	10c6 <pio_set_peripheral+0x8e>
    1058:	d804      	bhi.n	1064 <pio_set_peripheral+0x2c>
    105a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    105e:	d029      	beq.n	10b4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
    1060:	6042      	str	r2, [r0, #4]
    1062:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
    1064:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
    1068:	d02d      	beq.n	10c6 <pio_set_peripheral+0x8e>
    106a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
    106e:	d02a      	beq.n	10c6 <pio_set_peripheral+0x8e>
    1070:	e7f6      	b.n	1060 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
    1072:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
    1074:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
    1076:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1078:	43d3      	mvns	r3, r2
    107a:	4019      	ands	r1, r3
    107c:	4021      	ands	r1, r4
    107e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
    1080:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
    1082:	6f44      	ldr	r4, [r0, #116]	; 0x74
    1084:	400b      	ands	r3, r1
    1086:	4023      	ands	r3, r4
    1088:	6743      	str	r3, [r0, #116]	; 0x74
		break;
    108a:	e01a      	b.n	10c2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
    108c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
    108e:	4313      	orrs	r3, r2
    1090:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
    1092:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
    1094:	6f41      	ldr	r1, [r0, #116]	; 0x74
    1096:	ea23 0302 	bic.w	r3, r3, r2
    109a:	400b      	ands	r3, r1
    109c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
    109e:	e7df      	b.n	1060 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
    10a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
    10a2:	6f01      	ldr	r1, [r0, #112]	; 0x70
    10a4:	ea23 0302 	bic.w	r3, r3, r2
    10a8:	400b      	ands	r3, r1
    10aa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
    10ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
    10ae:	4313      	orrs	r3, r2
    10b0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
    10b2:	e7d5      	b.n	1060 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
    10b4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
    10b6:	4313      	orrs	r3, r2
    10b8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
    10ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
    10bc:	4313      	orrs	r3, r2
    10be:	6743      	str	r3, [r0, #116]	; 0x74
		break;
    10c0:	e7ce      	b.n	1060 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
    10c2:	6042      	str	r2, [r0, #4]
}
    10c4:	bc10      	pop	{r4}
    10c6:	4770      	bx	lr

000010c8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
    10c8:	f012 0f10 	tst.w	r2, #16
    10cc:	d012      	beq.n	10f4 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
    10ce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
    10d2:	f012 0f20 	tst.w	r2, #32
    10d6:	d002      	beq.n	10de <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
    10d8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
    10dc:	e001      	b.n	10e2 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
    10de:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
    10e2:	f012 0f40 	tst.w	r2, #64	; 0x40
    10e6:	d002      	beq.n	10ee <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
    10e8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    10ec:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
    10ee:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
    10f2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
    10f4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
    10fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
    10fe:	6401      	str	r1, [r0, #64]	; 0x40
    1100:	4770      	bx	lr
    1102:	bf00      	nop

00001104 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
    1104:	6441      	str	r1, [r0, #68]	; 0x44
    1106:	4770      	bx	lr

00001108 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
    1108:	b570      	push	{r4, r5, r6, lr}
    110a:	4604      	mov	r4, r0
    110c:	460d      	mov	r5, r1
    110e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
    1110:	f7ff fff8 	bl	1104 <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
    1114:	f006 0201 	and.w	r2, r6, #1
    1118:	4629      	mov	r1, r5
    111a:	4620      	mov	r0, r4
    111c:	f7ff ff78 	bl	1010 <pio_pull_up>

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
    1120:	f016 0f0a 	tst.w	r6, #10
    1124:	d001      	beq.n	112a <pio_set_input+0x22>
		p_pio->PIO_IFER = ul_mask;
    1126:	6225      	str	r5, [r4, #32]
    1128:	e000      	b.n	112c <pio_set_input+0x24>
	} else {
		p_pio->PIO_IFDR = ul_mask;
    112a:	6265      	str	r5, [r4, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
    112c:	f016 0f02 	tst.w	r6, #2
    1130:	d002      	beq.n	1138 <pio_set_input+0x30>
		p_pio->PIO_IFSCDR = ul_mask;
    1132:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    1136:	e004      	b.n	1142 <pio_set_input+0x3a>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
    1138:	f016 0f08 	tst.w	r6, #8
    113c:	d001      	beq.n	1142 <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
    113e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
    1142:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
    1144:	6025      	str	r5, [r4, #0]
    1146:	bd70      	pop	{r4, r5, r6, pc}

00001148 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
    1148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114a:	4604      	mov	r4, r0
    114c:	460d      	mov	r5, r1
    114e:	4616      	mov	r6, r2
    1150:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
    1152:	f7ff ffd7 	bl	1104 <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
    1156:	9a06      	ldr	r2, [sp, #24]
    1158:	4629      	mov	r1, r5
    115a:	4620      	mov	r0, r4
    115c:	f7ff ff58 	bl	1010 <pio_pull_up>

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
    1160:	b10f      	cbz	r7, 1166 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
    1162:	6525      	str	r5, [r4, #80]	; 0x50
    1164:	e000      	b.n	1168 <pio_set_output+0x20>
	} else {
		p_pio->PIO_MDDR = ul_mask;
    1166:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
    1168:	b10e      	cbz	r6, 116e <pio_set_output+0x26>
		p_pio->PIO_SODR = ul_mask;
    116a:	6325      	str	r5, [r4, #48]	; 0x30
    116c:	e000      	b.n	1170 <pio_set_output+0x28>
	} else {
		p_pio->PIO_CODR = ul_mask;
    116e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
    1170:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
    1172:	6025      	str	r5, [r4, #0]
    1174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1176:	bf00      	nop

00001178 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
    1178:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
    117a:	4770      	bx	lr

0000117c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
    117c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
    117e:	4770      	bx	lr

00001180 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	b082      	sub	sp, #8
    1184:	4605      	mov	r5, r0
    1186:	460e      	mov	r6, r1
    1188:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
    118a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
    118e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1192:	d03b      	beq.n	120c <pio_configure_pin_group+0x8c>
    1194:	d809      	bhi.n	11aa <pio_configure_pin_group+0x2a>
    1196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    119a:	d01d      	beq.n	11d8 <pio_configure_pin_group+0x58>
    119c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
    11a0:	d027      	beq.n	11f2 <pio_configure_pin_group+0x72>
    11a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    11a6:	d154      	bne.n	1252 <pio_configure_pin_group+0xd2>
    11a8:	e009      	b.n	11be <pio_configure_pin_group+0x3e>
    11aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
    11ae:	d03e      	beq.n	122e <pio_configure_pin_group+0xae>
    11b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
    11b4:	d03b      	beq.n	122e <pio_configure_pin_group+0xae>
    11b6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
    11ba:	d034      	beq.n	1226 <pio_configure_pin_group+0xa6>
    11bc:	e049      	b.n	1252 <pio_configure_pin_group+0xd2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
    11be:	460a      	mov	r2, r1
    11c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    11c4:	f7ff ff38 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
    11c8:	f004 0201 	and.w	r2, r4, #1
    11cc:	4631      	mov	r1, r6
    11ce:	4628      	mov	r0, r5
    11d0:	f7ff ff1e 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    11d4:	2001      	movs	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
    11d6:	e03d      	b.n	1254 <pio_configure_pin_group+0xd4>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
    11d8:	460a      	mov	r2, r1
    11da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    11de:	f7ff ff2b 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
    11e2:	f004 0201 	and.w	r2, r4, #1
    11e6:	4631      	mov	r1, r6
    11e8:	4628      	mov	r0, r5
    11ea:	f7ff ff11 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    11ee:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
    11f0:	e030      	b.n	1254 <pio_configure_pin_group+0xd4>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
    11f2:	460a      	mov	r2, r1
    11f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
    11f8:	f7ff ff1e 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
    11fc:	f004 0201 	and.w	r2, r4, #1
    1200:	4631      	mov	r1, r6
    1202:	4628      	mov	r0, r5
    1204:	f7ff ff04 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    1208:	2001      	movs	r0, #1
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
    120a:	e023      	b.n	1254 <pio_configure_pin_group+0xd4>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
    120c:	460a      	mov	r2, r1
    120e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1212:	f7ff ff11 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
    1216:	f004 0201 	and.w	r2, r4, #1
    121a:	4631      	mov	r1, r6
    121c:	4628      	mov	r0, r5
    121e:	f7ff fef7 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    1222:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
    1224:	e016      	b.n	1254 <pio_configure_pin_group+0xd4>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
    1226:	f7ff ff6f 	bl	1108 <pio_set_input>

	default:
		return 0;
	}

	return 1;
    122a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
    122c:	e012      	b.n	1254 <pio_configure_pin_group+0xd4>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
    122e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
    1232:	f004 0301 	and.w	r3, r4, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
    1236:	9300      	str	r3, [sp, #0]
    1238:	f3c4 0380 	ubfx	r3, r4, #2, #1
    123c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
    1240:	bf14      	ite	ne
    1242:	2200      	movne	r2, #0
    1244:	2201      	moveq	r2, #1
    1246:	4631      	mov	r1, r6
    1248:	4628      	mov	r0, r5
    124a:	f7ff ff7d 	bl	1148 <pio_set_output>

	default:
		return 0;
	}

	return 1;
    124e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
    1250:	e000      	b.n	1254 <pio_configure_pin_group+0xd4>

	default:
		return 0;
    1252:	2000      	movs	r0, #0
	}

	return 1;
}
    1254:	b002      	add	sp, #8
    1256:	bd70      	pop	{r4, r5, r6, pc}

00001258 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
    1258:	0940      	lsrs	r0, r0, #5
    125a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
    125e:	f200 7007 	addw	r0, r0, #1799	; 0x707
#endif
	return p_pio;
}
    1262:	0240      	lsls	r0, r0, #9
    1264:	4770      	bx	lr
    1266:	bf00      	nop

00001268 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
    1268:	b510      	push	{r4, lr}
    126a:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
    126c:	f7ff fff4 	bl	1258 <pio_get_pin_group>

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
    1270:	f004 041f 	and.w	r4, r4, #31
    1274:	2301      	movs	r3, #1
    1276:	40a3      	lsls	r3, r4
    1278:	6303      	str	r3, [r0, #48]	; 0x30
    127a:	bd10      	pop	{r4, pc}

0000127c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
    127c:	b510      	push	{r4, lr}
    127e:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
    1280:	f7ff ffea 	bl	1258 <pio_get_pin_group>

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
    1284:	f004 041f 	and.w	r4, r4, #31
    1288:	2301      	movs	r3, #1
    128a:	40a3      	lsls	r3, r4
    128c:	6343      	str	r3, [r0, #52]	; 0x34
    128e:	bd10      	pop	{r4, pc}

00001290 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
    1290:	b5f0      	push	{r4, r5, r6, r7, lr}
    1292:	b083      	sub	sp, #12
    1294:	4604      	mov	r4, r0
    1296:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
    1298:	f7ff ffde 	bl	1258 <pio_get_pin_group>
    129c:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
    129e:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
    12a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    12a6:	d04a      	beq.n	133e <pio_configure_pin+0xae>
    12a8:	d809      	bhi.n	12be <pio_configure_pin+0x2e>
    12aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    12ae:	d022      	beq.n	12f6 <pio_configure_pin+0x66>
    12b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
    12b4:	d031      	beq.n	131a <pio_configure_pin+0x8a>
    12b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    12ba:	d172      	bne.n	13a2 <pio_configure_pin+0x112>
    12bc:	e009      	b.n	12d2 <pio_configure_pin+0x42>
    12be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
    12c2:	d058      	beq.n	1376 <pio_configure_pin+0xe6>
    12c4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
    12c8:	d055      	beq.n	1376 <pio_configure_pin+0xe6>
    12ca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
    12ce:	d048      	beq.n	1362 <pio_configure_pin+0xd2>
    12d0:	e067      	b.n	13a2 <pio_configure_pin+0x112>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
    12d2:	f004 041f 	and.w	r4, r4, #31
    12d6:	2701      	movs	r7, #1
    12d8:	fa07 f404 	lsl.w	r4, r7, r4
    12dc:	4622      	mov	r2, r4
    12de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    12e2:	f7ff fea9 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
    12e6:	ea05 0207 	and.w	r2, r5, r7
    12ea:	4621      	mov	r1, r4
    12ec:	4630      	mov	r0, r6
    12ee:	f7ff fe8f 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    12f2:	4638      	mov	r0, r7
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
    12f4:	e056      	b.n	13a4 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
    12f6:	f004 041f 	and.w	r4, r4, #31
    12fa:	2701      	movs	r7, #1
    12fc:	fa07 f404 	lsl.w	r4, r7, r4
    1300:	4622      	mov	r2, r4
    1302:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1306:	f7ff fe97 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
    130a:	ea05 0207 	and.w	r2, r5, r7
    130e:	4621      	mov	r1, r4
    1310:	4630      	mov	r0, r6
    1312:	f7ff fe7d 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    1316:	4638      	mov	r0, r7
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
    1318:	e044      	b.n	13a4 <pio_configure_pin+0x114>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
    131a:	f004 041f 	and.w	r4, r4, #31
    131e:	2701      	movs	r7, #1
    1320:	fa07 f404 	lsl.w	r4, r7, r4
    1324:	4622      	mov	r2, r4
    1326:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
    132a:	f7ff fe85 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
    132e:	ea05 0207 	and.w	r2, r5, r7
    1332:	4621      	mov	r1, r4
    1334:	4630      	mov	r0, r6
    1336:	f7ff fe6b 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    133a:	4638      	mov	r0, r7
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
    133c:	e032      	b.n	13a4 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
    133e:	f004 041f 	and.w	r4, r4, #31
    1342:	2701      	movs	r7, #1
    1344:	fa07 f404 	lsl.w	r4, r7, r4
    1348:	4622      	mov	r2, r4
    134a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    134e:	f7ff fe73 	bl	1038 <pio_set_peripheral>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
    1352:	ea05 0207 	and.w	r2, r5, r7
    1356:	4621      	mov	r1, r4
    1358:	4630      	mov	r0, r6
    135a:	f7ff fe59 	bl	1010 <pio_pull_up>

	default:
		return 0;
	}

	return 1;
    135e:	4638      	mov	r0, r7
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
    1360:	e020      	b.n	13a4 <pio_configure_pin+0x114>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
    1362:	f004 011f 	and.w	r1, r4, #31
    1366:	2401      	movs	r4, #1
    1368:	462a      	mov	r2, r5
    136a:	fa04 f101 	lsl.w	r1, r4, r1
    136e:	f7ff fecb 	bl	1108 <pio_set_input>

	default:
		return 0;
	}

	return 1;
    1372:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
    1374:	e016      	b.n	13a4 <pio_configure_pin+0x114>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
    1376:	f004 011f 	and.w	r1, r4, #31
    137a:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
    137c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
    1380:	ea05 0304 	and.w	r3, r5, r4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
    1384:	9300      	str	r3, [sp, #0]
    1386:	f3c5 0380 	ubfx	r3, r5, #2, #1
    138a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
    138e:	bf14      	ite	ne
    1390:	2200      	movne	r2, #0
    1392:	2201      	moveq	r2, #1
    1394:	fa04 f101 	lsl.w	r1, r4, r1
    1398:	4630      	mov	r0, r6
    139a:	f7ff fed5 	bl	1148 <pio_set_output>

	default:
		return 0;
	}

	return 1;
    139e:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
    13a0:	e000      	b.n	13a4 <pio_configure_pin+0x114>

	default:
		return 0;
    13a2:	2000      	movs	r0, #0
	}

	return 1;
}
    13a4:	b003      	add	sp, #12
    13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
    13a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13ac:	4607      	mov	r7, r0
    13ae:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
    13b0:	f7ff fee2 	bl	1178 <pio_get_interrupt_status>
    13b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
    13b6:	4638      	mov	r0, r7
    13b8:	f7ff fee0 	bl	117c <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
    13bc:	4005      	ands	r5, r0
    13be:	d117      	bne.n	13f0 <pio_handler_process+0x48>
    13c0:	e019      	b.n	13f6 <pio_handler_process+0x4e>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
    13c2:	0123      	lsls	r3, r4, #4
    13c4:	4a11      	ldr	r2, [pc, #68]	; (140c <pio_handler_process+0x64>)
    13c6:	58d0      	ldr	r0, [r2, r3]
    13c8:	42b0      	cmp	r0, r6
    13ca:	d10d      	bne.n	13e8 <pio_handler_process+0x40>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
    13cc:	eb02 1304 	add.w	r3, r2, r4, lsl #4
    13d0:	6859      	ldr	r1, [r3, #4]
    13d2:	420d      	tst	r5, r1
    13d4:	d008      	beq.n	13e8 <pio_handler_process+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
    13d6:	eb02 1804 	add.w	r8, r2, r4, lsl #4
    13da:	f8d8 300c 	ldr.w	r3, [r8, #12]
    13de:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
    13e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    13e4:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
    13e8:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
    13ea:	2c06      	cmp	r4, #6
    13ec:	d901      	bls.n	13f2 <pio_handler_process+0x4a>
    13ee:	e002      	b.n	13f6 <pio_handler_process+0x4e>
    13f0:	2400      	movs	r4, #0

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
    13f2:	2d00      	cmp	r5, #0
    13f4:	d1e5      	bne.n	13c2 <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <pio_handler_process+0x68>)
    13f8:	681b      	ldr	r3, [r3, #0]
    13fa:	b123      	cbz	r3, 1406 <pio_handler_process+0x5e>
		if (pio_capture_handler) {
    13fc:	4b05      	ldr	r3, [pc, #20]	; (1414 <pio_handler_process+0x6c>)
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	b10b      	cbz	r3, 1406 <pio_handler_process+0x5e>
			pio_capture_handler(p_pio);
    1402:	4638      	mov	r0, r7
    1404:	4798      	blx	r3
    1406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    140a:	bf00      	nop
    140c:	200003f4 	.word	0x200003f4
    1410:	2000047c 	.word	0x2000047c
    1414:	200003f0 	.word	0x200003f0

00001418 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
    1418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
    141a:	4c0c      	ldr	r4, [pc, #48]	; (144c <pio_handler_set+0x34>)
    141c:	6824      	ldr	r4, [r4, #0]
    141e:	2c06      	cmp	r4, #6
    1420:	d811      	bhi.n	1446 <pio_handler_set+0x2e>
    1422:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
    1424:	4f0a      	ldr	r7, [pc, #40]	; (1450 <pio_handler_set+0x38>)
    1426:	0126      	lsls	r6, r4, #4
    1428:	19ba      	adds	r2, r7, r6
    142a:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
    142c:	6055      	str	r5, [r2, #4]
	pSource->attr = ul_attr;
    142e:	6093      	str	r3, [r2, #8]
	pSource->handler = p_handler;
    1430:	9906      	ldr	r1, [sp, #24]
    1432:	60d1      	str	r1, [r2, #12]
	gs_ul_nb_sources++;
    1434:	3401      	adds	r4, #1
    1436:	4a05      	ldr	r2, [pc, #20]	; (144c <pio_handler_set+0x34>)
    1438:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
    143a:	461a      	mov	r2, r3
    143c:	4629      	mov	r1, r5
    143e:	f7ff fe43 	bl	10c8 <pio_configure_interrupt>

	return 0;
    1442:	2000      	movs	r0, #0
    1444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
    1446:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
    1448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    144a:	bf00      	nop
    144c:	200003ec 	.word	0x200003ec
    1450:	200003f4 	.word	0x200003f4

00001454 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
    1454:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
    1456:	210b      	movs	r1, #11
    1458:	4801      	ldr	r0, [pc, #4]	; (1460 <PIOA_Handler+0xc>)
    145a:	f7ff ffa5 	bl	13a8 <pio_handler_process>
    145e:	bd08      	pop	{r3, pc}
    1460:	400e0e00 	.word	0x400e0e00

00001464 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    1464:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
    1466:	210c      	movs	r1, #12
    1468:	4801      	ldr	r0, [pc, #4]	; (1470 <PIOB_Handler+0xc>)
    146a:	f7ff ff9d 	bl	13a8 <pio_handler_process>
    146e:	bd08      	pop	{r3, pc}
    1470:	400e1000 	.word	0x400e1000

00001474 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
    1474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1476:	4606      	mov	r6, r0
    1478:	460c      	mov	r4, r1
    147a:	4615      	mov	r5, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
    147c:	f7ff fe7e 	bl	117c <pio_get_interrupt_mask>
    1480:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
    1482:	f04f 31ff 	mov.w	r1, #4294967295
    1486:	4630      	mov	r0, r6
    1488:	f7ff fe3c 	bl	1104 <pio_disable_interrupt>
	pio_get_interrupt_status(p_pio);
    148c:	4630      	mov	r0, r6
    148e:	f7ff fe73 	bl	1178 <pio_get_interrupt_status>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1492:	0962      	lsrs	r2, r4, #5
    1494:	b2e0      	uxtb	r0, r4
    1496:	f000 031f 	and.w	r3, r0, #31
    149a:	2101      	movs	r1, #1
    149c:	fa01 f303 	lsl.w	r3, r1, r3
    14a0:	4911      	ldr	r1, [pc, #68]	; (14e8 <pio_handler_set_priority+0x74>)
    14a2:	f102 0e20 	add.w	lr, r2, #32
    14a6:	f841 302e 	str.w	r3, [r1, lr, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    14aa:	f102 0e60 	add.w	lr, r2, #96	; 0x60
    14ae:	f841 302e 	str.w	r3, [r1, lr, lsl #2]
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    14b2:	2c00      	cmp	r4, #0
    14b4:	da07      	bge.n	14c6 <pio_handler_set_priority+0x52>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    14b6:	f000 000f 	and.w	r0, r0, #15
    14ba:	012d      	lsls	r5, r5, #4
    14bc:	b2ed      	uxtb	r5, r5
    14be:	f601 4114 	addw	r1, r1, #3092	; 0xc14
    14c2:	540d      	strb	r5, [r1, r0]
    14c4:	e007      	b.n	14d6 <pio_handler_set_priority+0x62>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    14c6:	012d      	lsls	r5, r5, #4
    14c8:	b2ed      	uxtb	r5, r5
    14ca:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
    14ce:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
    14d2:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    14d6:	4904      	ldr	r1, [pc, #16]	; (14e8 <pio_handler_set_priority+0x74>)
    14d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
    14dc:	4639      	mov	r1, r7
    14de:	4630      	mov	r0, r6
    14e0:	f7ff fe0c 	bl	10fc <pio_enable_interrupt>
    14e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e6:	bf00      	nop
    14e8:	e000e100 	.word	0xe000e100

000014ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
    14ec:	b988      	cbnz	r0, 1512 <_read+0x26>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    14ee:	b570      	push	{r4, r5, r6, lr}
    14f0:	460d      	mov	r5, r1
    14f2:	4614      	mov	r4, r2
    14f4:	2600      	movs	r6, #0
    14f6:	e008      	b.n	150a <_read+0x1e>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    14f8:	4b07      	ldr	r3, [pc, #28]	; (1518 <_read+0x2c>)
    14fa:	6818      	ldr	r0, [r3, #0]
    14fc:	4b07      	ldr	r3, [pc, #28]	; (151c <_read+0x30>)
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	4629      	mov	r1, r5
    1502:	4798      	blx	r3
		ptr++;
    1504:	3501      	adds	r5, #1
		nChars++;
    1506:	3601      	adds	r6, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1508:	3c01      	subs	r4, #1
    150a:	2c00      	cmp	r4, #0
    150c:	dcf4      	bgt.n	14f8 <_read+0xc>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    150e:	4630      	mov	r0, r6
    1510:	bd70      	pop	{r4, r5, r6, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1512:	f04f 30ff 	mov.w	r0, #4294967295
    1516:	4770      	bx	lr
    1518:	20000488 	.word	0x20000488
    151c:	20000480 	.word	0x20000480

00001520 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1520:	3801      	subs	r0, #1
    1522:	2802      	cmp	r0, #2
    1524:	d814      	bhi.n	1550 <_write+0x30>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
    1526:	b570      	push	{r4, r5, r6, lr}
    1528:	4614      	mov	r4, r2
    152a:	2500      	movs	r5, #0
    152c:	e00c      	b.n	1548 <_write+0x28>
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    152e:	4b0b      	ldr	r3, [pc, #44]	; (155c <_write+0x3c>)
    1530:	6818      	ldr	r0, [r3, #0]
    1532:	1c4e      	adds	r6, r1, #1
    1534:	4b0a      	ldr	r3, [pc, #40]	; (1560 <_write+0x40>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	f991 1000 	ldrsb.w	r1, [r1]
    153c:	4798      	blx	r3
    153e:	2800      	cmp	r0, #0
    1540:	db09      	blt.n	1556 <_write+0x36>
			return -1;
		}
		++nChars;
    1542:	3501      	adds	r5, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1544:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1546:	4631      	mov	r1, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1548:	2c00      	cmp	r4, #0
    154a:	d1f0      	bne.n	152e <_write+0xe>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    154c:	4628      	mov	r0, r5
    154e:	bd70      	pop	{r4, r5, r6, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1550:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
    1554:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1556:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
    155a:	bd70      	pop	{r4, r5, r6, pc}
    155c:	20000488 	.word	0x20000488
    1560:	20000484 	.word	0x20000484

00001564 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
    1564:	b510      	push	{r4, lr}
    1566:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
    1568:	f7fe fea0 	bl	2ac <spi_enable_clock>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
    1570:	6863      	ldr	r3, [r4, #4]
    1572:	f043 0301 	orr.w	r3, r3, #1
    1576:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
    1578:	6863      	ldr	r3, [r4, #4]
    157a:	f043 0310 	orr.w	r3, r3, #16
    157e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
    1580:	6863      	ldr	r3, [r4, #4]
    1582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1586:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
    1588:	2100      	movs	r1, #0
    158a:	4620      	mov	r0, r4
    158c:	f7fe fe94 	bl	2b8 <spi_set_peripheral_chip_select_value>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
    1590:	6863      	ldr	r3, [r4, #4]
    1592:	f023 0302 	bic.w	r3, r3, #2
    1596:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
    1598:	6863      	ldr	r3, [r4, #4]
    159a:	f023 0304 	bic.w	r3, r3, #4
    159e:	6063      	str	r3, [r4, #4]
	spi_set_variable_peripheral_select(p_spi);
#else
	spi_set_fixed_peripheral_select(p_spi);
#endif
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
    15a0:	2100      	movs	r1, #0
    15a2:	4620      	mov	r0, r4
    15a4:	f7fe fe94 	bl	2d0 <spi_set_delay_between_chip_select>
    15a8:	bd10      	pop	{r4, pc}
    15aa:	bf00      	nop

000015ac <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
    15ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ae:	4604      	mov	r4, r0
    15b0:	460d      	mov	r5, r1
    15b2:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
    15b4:	4913      	ldr	r1, [pc, #76]	; (1604 <spi_master_setup_device+0x58>)
    15b6:	4618      	mov	r0, r3
    15b8:	f7fe ff2c 	bl	414 <spi_calc_baudrate_div>
    15bc:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
    15be:	2300      	movs	r3, #0
    15c0:	461a      	mov	r2, r3
    15c2:	6829      	ldr	r1, [r5, #0]
    15c4:	4620      	mov	r0, r4
    15c6:	f7fe ff4d 	bl	464 <spi_set_transfer_delay>
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
    15ca:	2208      	movs	r2, #8
    15cc:	6829      	ldr	r1, [r5, #0]
    15ce:	4620      	mov	r0, r4
    15d0:	f7fe ff12 	bl	3f8 <spi_set_bits_per_transfer>
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
    15d4:	b2fa      	uxtb	r2, r7
    15d6:	6829      	ldr	r1, [r5, #0]
    15d8:	4620      	mov	r0, r4
    15da:	f7fe ff29 	bl	430 <spi_set_baudrate_div>
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
    15de:	2208      	movs	r2, #8
    15e0:	6829      	ldr	r1, [r5, #0]
    15e2:	4620      	mov	r0, r4
    15e4:	f7fe fede 	bl	3a4 <spi_configure_cs_behavior>
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
    15e8:	0872      	lsrs	r2, r6, #1
    15ea:	6829      	ldr	r1, [r5, #0]
    15ec:	4620      	mov	r0, r4
    15ee:	f7fe feb5 	bl	35c <spi_set_clock_polarity>
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
    15f2:	f086 0201 	eor.w	r2, r6, #1
    15f6:	f002 0201 	and.w	r2, r2, #1
    15fa:	6829      	ldr	r1, [r5, #0]
    15fc:	4620      	mov	r0, r4
    15fe:	f7fe febf 	bl	380 <spi_set_clock_phase>
    1602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1604:	005b8d80 	.word	0x005b8d80

00001608 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
    1608:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
    160a:	6843      	ldr	r3, [r0, #4]
    160c:	f013 0304 	ands.w	r3, r3, #4
    1610:	d000      	beq.n	1614 <spi_select_device+0xc>
		return 1;
    1612:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
    1614:	b12b      	cbz	r3, 1622 <spi_select_device+0x1a>
		if (device->id < MAX_NUM_WITH_DECODER) {
    1616:	6809      	ldr	r1, [r1, #0]
    1618:	290f      	cmp	r1, #15
    161a:	d80a      	bhi.n	1632 <spi_select_device+0x2a>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
    161c:	f7fe fe4c 	bl	2b8 <spi_set_peripheral_chip_select_value>
    1620:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
    1622:	680b      	ldr	r3, [r1, #0]
    1624:	2b03      	cmp	r3, #3
    1626:	d804      	bhi.n	1632 <spi_select_device+0x2a>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
    1628:	2101      	movs	r1, #1
    162a:	4099      	lsls	r1, r3
    162c:	43c9      	mvns	r1, r1
    162e:	f7fe fe43 	bl	2b8 <spi_set_peripheral_chip_select_value>
    1632:	bd08      	pop	{r3, pc}

00001634 <spi_write_packet>:
 * \pre SPI device must be selected with spi_select_device() first, except if defined SET_VARIABLE_PERIPHERAL_SELECT, then
 * selected device to write from device.id field.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data, struct spi_device *device,
		size_t len)
{
    1634:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
    1636:	2500      	movs	r5, #0
	uint8_t val;

	while (len) {
    1638:	e00f      	b.n	165a <spi_write_packet+0x26>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
    163a:	1e62      	subs	r2, r4, #1
    163c:	b18c      	cbz	r4, 1662 <spi_write_packet+0x2e>
    163e:	4614      	mov	r4, r2
    1640:	e000      	b.n	1644 <spi_write_packet+0x10>
    1642:	4c0a      	ldr	r4, [pc, #40]	; (166c <spi_write_packet+0x38>)
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
    1644:	6902      	ldr	r2, [r0, #16]
    1646:	f012 0202 	ands.w	r2, r2, #2
    164a:	d000      	beq.n	164e <spi_write_packet+0x1a>
		return 1;
    164c:	2201      	movs	r2, #1
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
    164e:	2a00      	cmp	r2, #0
    1650:	d0f3      	beq.n	163a <spi_write_packet+0x6>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		val = data[i];
    1652:	5d4a      	ldrb	r2, [r1, r5]
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
    1654:	60c2      	str	r2, [r0, #12]
#if defined (SET_VARIABLE_PERIPHERAL_SELECT)
		spi_write(BOARD_ILI9341_SPI, val, device->id, 0);
#else
		spi_write_single(p_spi, val);
#endif
		i++;
    1656:	3501      	adds	r5, #1
		len--;
    1658:	3b01      	subs	r3, #1
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
    165a:	2b00      	cmp	r3, #0
    165c:	d1f1      	bne.n	1642 <spi_write_packet+0xe>
#endif
		i++;
		len--;
	}

	return STATUS_OK;
    165e:	2000      	movs	r0, #0
    1660:	e000      	b.n	1664 <spi_write_packet+0x30>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
    1662:	20fd      	movs	r0, #253	; 0xfd
		i++;
		len--;
	}

	return STATUS_OK;
}
    1664:	b240      	sxtb	r0, r0
    1666:	bc30      	pop	{r4, r5}
    1668:	4770      	bx	lr
    166a:	bf00      	nop
    166c:	000249f0 	.word	0x000249f0

00001670 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    1670:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
    1672:	480a      	ldr	r0, [pc, #40]	; (169c <sysclk_init+0x2c>)
    1674:	f002 fb9c 	bl	3db0 <__system_init_flash_veneer>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
    1678:	213e      	movs	r1, #62	; 0x3e
    167a:	2000      	movs	r0, #0
    167c:	f7ff fc6c 	bl	f58 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
    1680:	f7ff fc94 	bl	fac <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1684:	2800      	cmp	r0, #0
    1686:	d0fb      	beq.n	1680 <sysclk_init+0x10>
	}

	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
		osc_enable(OSC_MAINCK_XTAL);
		osc_wait_ready(OSC_MAINCK_XTAL);
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
    1688:	2010      	movs	r0, #16
    168a:	f7ff fc3b 	bl	f04 <pmc_switch_mck_to_mainck>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
    168e:	f7fe ff95 	bl	5bc <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
    1692:	4803      	ldr	r0, [pc, #12]	; (16a0 <sysclk_init+0x30>)
    1694:	f002 fb8c 	bl	3db0 <__system_init_flash_veneer>
    1698:	bd08      	pop	{r3, pc}
    169a:	bf00      	nop
    169c:	03d09000 	.word	0x03d09000
    16a0:	005b8d80 	.word	0x005b8d80

000016a4 <SD_MMC_CD_Handler>:
 *  \brief Handler for Sd MMC card detect input
 *
 */
static void SD_MMC_CD_Handler(uint32_t id, uint32_t mask)
{
  card_detect = 1;
    16a4:	2201      	movs	r2, #1
    16a6:	4b01      	ldr	r3, [pc, #4]	; (16ac <SD_MMC_CD_Handler+0x8>)
    16a8:	701a      	strb	r2, [r3, #0]
    16aa:	4770      	bx	lr
    16ac:	20000464 	.word	0x20000464

000016b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    16b0:	b530      	push	{r4, r5, lr}
    16b2:	b083      	sub	sp, #12
    16b4:	4604      	mov	r4, r0
    16b6:	460d      	mov	r5, r1
	uint32_t val = 0;
    16b8:	2300      	movs	r3, #0
    16ba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
    16bc:	4b15      	ldr	r3, [pc, #84]	; (1714 <usart_serial_getchar+0x64>)
    16be:	4298      	cmp	r0, r3
    16c0:	d105      	bne.n	16ce <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
    16c2:	4629      	mov	r1, r5
    16c4:	4620      	mov	r0, r4
    16c6:	f7fe fd93 	bl	1f0 <uart_read>
    16ca:	2800      	cmp	r0, #0
    16cc:	d1f9      	bne.n	16c2 <usart_serial_getchar+0x12>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
    16ce:	4b12      	ldr	r3, [pc, #72]	; (1718 <usart_serial_getchar+0x68>)
    16d0:	429c      	cmp	r4, r3
    16d2:	d105      	bne.n	16e0 <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
    16d4:	4629      	mov	r1, r5
    16d6:	4620      	mov	r0, r4
    16d8:	f7fe fd8a 	bl	1f0 <uart_read>
    16dc:	2800      	cmp	r0, #0
    16de:	d1f9      	bne.n	16d4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    16e0:	4b0e      	ldr	r3, [pc, #56]	; (171c <usart_serial_getchar+0x6c>)
    16e2:	429c      	cmp	r4, r3
    16e4:	d108      	bne.n	16f8 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
    16e6:	a901      	add	r1, sp, #4
    16e8:	4620      	mov	r0, r4
    16ea:	f7fe fd4f 	bl	18c <usart_read>
    16ee:	2800      	cmp	r0, #0
    16f0:	d1f9      	bne.n	16e6 <usart_serial_getchar+0x36>
		*data = (uint8_t)(val & 0xFF);
    16f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    16f6:	702b      	strb	r3, [r5, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    16f8:	4b09      	ldr	r3, [pc, #36]	; (1720 <usart_serial_getchar+0x70>)
    16fa:	429c      	cmp	r4, r3
    16fc:	d108      	bne.n	1710 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
    16fe:	a901      	add	r1, sp, #4
    1700:	4620      	mov	r0, r4
    1702:	f7fe fd43 	bl	18c <usart_read>
    1706:	2800      	cmp	r0, #0
    1708:	d1f9      	bne.n	16fe <usart_serial_getchar+0x4e>
		*data = (uint8_t)(val & 0xFF);
    170a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    170e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    1710:	b003      	add	sp, #12
    1712:	bd30      	pop	{r4, r5, pc}
    1714:	400e0600 	.word	0x400e0600
    1718:	400e0800 	.word	0x400e0800
    171c:	40024000 	.word	0x40024000
    1720:	40028000 	.word	0x40028000

00001724 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1724:	b538      	push	{r3, r4, r5, lr}
    1726:	4604      	mov	r4, r0
    1728:	460d      	mov	r5, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
    172a:	4b17      	ldr	r3, [pc, #92]	; (1788 <usart_serial_putchar+0x64>)
    172c:	4298      	cmp	r0, r3
    172e:	d107      	bne.n	1740 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
    1730:	4629      	mov	r1, r5
    1732:	4620      	mov	r0, r4
    1734:	f7fe fd52 	bl	1dc <uart_write>
    1738:	2800      	cmp	r0, #0
    173a:	d1f9      	bne.n	1730 <usart_serial_putchar+0xc>
		return 1;
    173c:	2001      	movs	r0, #1
    173e:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
    1740:	4b12      	ldr	r3, [pc, #72]	; (178c <usart_serial_putchar+0x68>)
    1742:	4298      	cmp	r0, r3
    1744:	d107      	bne.n	1756 <usart_serial_putchar+0x32>
		while (uart_write((Uart*)p_usart, c)!=0);
    1746:	4629      	mov	r1, r5
    1748:	4620      	mov	r0, r4
    174a:	f7fe fd47 	bl	1dc <uart_write>
    174e:	2800      	cmp	r0, #0
    1750:	d1f9      	bne.n	1746 <usart_serial_putchar+0x22>
		return 1;
    1752:	2001      	movs	r0, #1
    1754:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1756:	4b0e      	ldr	r3, [pc, #56]	; (1790 <usart_serial_putchar+0x6c>)
    1758:	4298      	cmp	r0, r3
    175a:	d107      	bne.n	176c <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
    175c:	4629      	mov	r1, r5
    175e:	4620      	mov	r0, r4
    1760:	f7fe fd08 	bl	174 <usart_write>
    1764:	2800      	cmp	r0, #0
    1766:	d1f9      	bne.n	175c <usart_serial_putchar+0x38>
		return 1;
    1768:	2001      	movs	r0, #1
    176a:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    176c:	4b09      	ldr	r3, [pc, #36]	; (1794 <usart_serial_putchar+0x70>)
    176e:	4298      	cmp	r0, r3
    1770:	d107      	bne.n	1782 <usart_serial_putchar+0x5e>
		while (usart_write(p_usart, c)!=0);
    1772:	4629      	mov	r1, r5
    1774:	4620      	mov	r0, r4
    1776:	f7fe fcfd 	bl	174 <usart_write>
    177a:	2800      	cmp	r0, #0
    177c:	d1f9      	bne.n	1772 <usart_serial_putchar+0x4e>
		return 1;
    177e:	2001      	movs	r0, #1
    1780:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    1782:	2000      	movs	r0, #0
}
    1784:	bd38      	pop	{r3, r4, r5, pc}
    1786:	bf00      	nop
    1788:	400e0600 	.word	0x400e0600
    178c:	400e0800 	.word	0x400e0800
    1790:	40024000 	.word	0x40024000
    1794:	40028000 	.word	0x40028000

00001798 <configure_tc>:
/**
 *  Configure Timer Counter 0 to generate an interrupt every 250ms.
 */
// [main_tc_configure]
static void configure_tc(void)
{
    1798:	b530      	push	{r4, r5, lr}
    179a:	b085      	sub	sp, #20
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
    179c:	2017      	movs	r0, #23
    179e:	f7ff fc0d 	bl	fbc <pmc_enable_periph_clk>
	pmc_switch_pck_to_sclk(PMC_PCK_3, PMC_PCK_PRES_CLK_1);
	pmc_enable_pck(PMC_PCK_3);
#endif

	/** Configure TC for a 4Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(4, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
    17a2:	4c16      	ldr	r4, [pc, #88]	; (17fc <configure_tc+0x64>)
    17a4:	9400      	str	r4, [sp, #0]
    17a6:	ab02      	add	r3, sp, #8
    17a8:	aa03      	add	r2, sp, #12
    17aa:	4621      	mov	r1, r4
    17ac:	2004      	movs	r0, #4
    17ae:	f7fe fd49 	bl	244 <tc_find_mck_divisor>
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
    17b2:	4d13      	ldr	r5, [pc, #76]	; (1800 <configure_tc+0x68>)
    17b4:	9a02      	ldr	r2, [sp, #8]
    17b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    17ba:	2100      	movs	r1, #0
    17bc:	4628      	mov	r0, r5
    17be:	f7fe fd21 	bl	204 <tc_init>
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / 4);
    17c2:	9a03      	ldr	r2, [sp, #12]
    17c4:	fbb4 f2f2 	udiv	r2, r4, r2
    17c8:	0892      	lsrs	r2, r2, #2
    17ca:	2100      	movs	r1, #0
    17cc:	4628      	mov	r0, r5
    17ce:	f7fe fd2d 	bl	22c <tc_write_rc>
    17d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    17d6:	4b0b      	ldr	r3, [pc, #44]	; (1804 <configure_tc+0x6c>)
    17d8:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
    17da:	2210      	movs	r2, #16
    17dc:	2100      	movs	r1, #0
    17de:	4628      	mov	r0, r5
    17e0:	f7fe fd28 	bl	234 <tc_enable_interrupt>

#ifdef LED_YELLOW_GPIO
	/** Start the counter if LED1 is enabled. */
	if (g_b_led1_active) {
    17e4:	4b08      	ldr	r3, [pc, #32]	; (1808 <configure_tc+0x70>)
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	f013 0fff 	tst.w	r3, #255	; 0xff
    17ec:	d003      	beq.n	17f6 <configure_tc+0x5e>
		tc_start(TC0, 0);
    17ee:	2100      	movs	r1, #0
    17f0:	4628      	mov	r0, r5
    17f2:	f7fe fd13 	bl	21c <tc_start>
	}
#else
	tc_start(TC0, 0);
#endif
}
    17f6:	b005      	add	sp, #20
    17f8:	bd30      	pop	{r4, r5, pc}
    17fa:	bf00      	nop
    17fc:	005b8d80 	.word	0x005b8d80
    1800:	40010000 	.word	0x40010000
    1804:	e000e100 	.word	0xe000e100
    1808:	2000017e 	.word	0x2000017e

0000180c <configure_buttons>:
 *
 *  Configure the PIO as inputs and generate corresponding interrupt when
 *  pressed or released.
 */
static void configure_buttons(void)
{
    180c:	b570      	push	{r4, r5, r6, lr}
    180e:	b082      	sub	sp, #8
// [main_button1_configure]
	/* Configure Pushbutton 1 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
    1810:	200b      	movs	r0, #11
    1812:	f7ff fbd3 	bl	fbc <pmc_enable_periph_clk>
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
    1816:	4c1e      	ldr	r4, [pc, #120]	; (1890 <configure_buttons+0x84>)
    1818:	220a      	movs	r2, #10
    181a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    181e:	4620      	mov	r0, r4
    1820:	f7ff fbfc 	bl	101c <pio_set_debounce_filter>
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
    1824:	4b1b      	ldr	r3, [pc, #108]	; (1894 <configure_buttons+0x88>)
    1826:	9300      	str	r3, [sp, #0]
    1828:	2379      	movs	r3, #121	; 0x79
    182a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    182e:	210b      	movs	r1, #11
    1830:	4620      	mov	r0, r4
    1832:	f7ff fdf1 	bl	1418 <pio_handler_set>
    1836:	4d18      	ldr	r5, [pc, #96]	; (1898 <configure_buttons+0x8c>)
    1838:	f44f 6600 	mov.w	r6, #2048	; 0x800
    183c:	602e      	str	r6, [r5, #0]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
    183e:	2200      	movs	r2, #0
    1840:	210b      	movs	r1, #11
    1842:	4620      	mov	r0, r4
    1844:	f7ff fe16 	bl	1474 <pio_handler_set_priority>
			(IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
    1848:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    184c:	4620      	mov	r0, r4
    184e:	f7ff fc55 	bl	10fc <pio_enable_interrupt>
// [main_button1_configure]
#ifndef BOARD_NO_PUSHBUTTON_2
// [main_button2_configure]
	/* Configure Pushbutton 2 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
    1852:	200b      	movs	r0, #11
    1854:	f7ff fbb2 	bl	fbc <pmc_enable_periph_clk>
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
    1858:	220a      	movs	r2, #10
    185a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    185e:	4620      	mov	r0, r4
    1860:	f7ff fbdc 	bl	101c <pio_set_debounce_filter>
	/* Interrupt on falling edge */
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <configure_buttons+0x90>)
    1866:	9300      	str	r3, [sp, #0]
    1868:	2359      	movs	r3, #89	; 0x59
    186a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    186e:	210b      	movs	r1, #11
    1870:	4620      	mov	r0, r4
    1872:	f7ff fdd1 	bl	1418 <pio_handler_set>
    1876:	602e      	str	r6, [r5, #0]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO,
    1878:	2200      	movs	r2, #0
    187a:	210b      	movs	r1, #11
    187c:	4620      	mov	r0, r4
    187e:	f7ff fdf9 	bl	1474 <pio_handler_set_priority>
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
    1882:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    1886:	4620      	mov	r0, r4
    1888:	f7ff fc38 	bl	10fc <pio_enable_interrupt>
// [main_button2_configure]
#endif
}
    188c:	b002      	add	sp, #8
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	400e0e00 	.word	0x400e0e00
    1894:	00001965 	.word	0x00001965
    1898:	e000e100 	.word	0xe000e100
    189c:	0000194d 	.word	0x0000194d

000018a0 <configure_SD_CD_input>:
 *
 *  Configure the PIO as inputs and generate corresponding interrupt when
 *  pressed or released.
 */
static void configure_SD_CD_input(void)
{
    18a0:	b510      	push	{r4, lr}
    18a2:	b082      	sub	sp, #8
  /* Configure Pushbutton 2 */
  pmc_enable_periph_clk(SD_MMC_0_CD_PIO_ID);
    18a4:	200b      	movs	r0, #11
    18a6:	f7ff fb89 	bl	fbc <pmc_enable_periph_clk>
  pio_set_debounce_filter(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK, 10);
    18aa:	4c10      	ldr	r4, [pc, #64]	; (18ec <configure_SD_CD_input+0x4c>)
    18ac:	220a      	movs	r2, #10
    18ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    18b2:	4620      	mov	r0, r4
    18b4:	f7ff fbb2 	bl	101c <pio_set_debounce_filter>
  /* Interrupt on falling edge */
  pio_handler_set(SD_MMC_0_CD_PIO, SD_MMC_0_CD_PIO_ID, SD_MMC_0_CD_MASK, SD_MMC_0_CD_ATTR, SD_MMC_CD_Handler);
    18b8:	4b0d      	ldr	r3, [pc, #52]	; (18f0 <configure_SD_CD_input+0x50>)
    18ba:	9300      	str	r3, [sp, #0]
    18bc:	2359      	movs	r3, #89	; 0x59
    18be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18c2:	210b      	movs	r1, #11
    18c4:	4620      	mov	r0, r4
    18c6:	f7ff fda7 	bl	1418 <pio_handler_set>
    18ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18ce:	4b09      	ldr	r3, [pc, #36]	; (18f4 <configure_SD_CD_input+0x54>)
    18d0:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ((IRQn_Type) SD_MMC_0_CD_PIO_ID);
  pio_handler_set_priority(SD_MMC_0_CD_PIO, (IRQn_Type) SD_MMC_0_CD_PIO_ID, IRQ_PRIOR_PIO);
    18d2:	2200      	movs	r2, #0
    18d4:	210b      	movs	r1, #11
    18d6:	4620      	mov	r0, r4
    18d8:	f7ff fdcc 	bl	1474 <pio_handler_set_priority>
  pio_enable_interrupt(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK);
    18dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    18e0:	4620      	mov	r0, r4
    18e2:	f7ff fc0b 	bl	10fc <pio_enable_interrupt>
};
    18e6:	b002      	add	sp, #8
    18e8:	bd10      	pop	{r4, pc}
    18ea:	bf00      	nop
    18ec:	400e0e00 	.word	0x400e0e00
    18f0:	000016a5 	.word	0x000016a5
    18f4:	e000e100 	.word	0xe000e100

000018f8 <ProcessButtonEvt>:
 *  \brief Process Buttons Events
 *
 *  Change active states of LEDs when corresponding button events happened.
 */
static void ProcessButtonEvt(uint8_t uc_button)
{
    18f8:	b508      	push	{r3, lr}
// [main_button1_evnt_process]
  if (uc_button == 0)
    18fa:	b918      	cbnz	r0, 1904 <ProcessButtonEvt+0xc>
      if (!g_b_led0_active)
	{
	ioport_set_pin_level(LED0_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}*/

      reset_program_and_load_SAM_BA = 1;
    18fc:	2201      	movs	r2, #1
    18fe:	4b0f      	ldr	r3, [pc, #60]	; (193c <ProcessButtonEvt+0x44>)
    1900:	801a      	strh	r2, [r3, #0]
    1902:	bd08      	pop	{r3, pc}

// [main_button1_evnt_process]
#ifdef LED_YELLOW_GPIO
  else {
// [main_button2_evnt_process]
      g_b_led1_active = !g_b_led1_active;
    1904:	4b0e      	ldr	r3, [pc, #56]	; (1940 <ProcessButtonEvt+0x48>)
    1906:	781a      	ldrb	r2, [r3, #0]
    1908:	f082 0201 	eor.w	r2, r2, #1
    190c:	701a      	strb	r2, [r3, #0]

      /* Enable LED#2 and TC if they were enabled */
      if (g_b_led1_active) {
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	f013 0fff 	tst.w	r3, #255	; 0xff
    1914:	d008      	beq.n	1928 <ProcessButtonEvt+0x30>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
    1916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    191a:	4b0a      	ldr	r3, [pc, #40]	; (1944 <ProcessButtonEvt+0x4c>)
    191c:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(LED_YELLOW_GPIO, IOPORT_PIN_LEVEL_LOW);
	tc_start(TC0, 0);
    191e:	2100      	movs	r1, #0
    1920:	4809      	ldr	r0, [pc, #36]	; (1948 <ProcessButtonEvt+0x50>)
    1922:	f7fe fc7b 	bl	21c <tc_start>
    1926:	bd08      	pop	{r3, pc}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
    1928:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    192c:	4b05      	ldr	r3, [pc, #20]	; (1944 <ProcessButtonEvt+0x4c>)
    192e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      /* Disable LED#2 and TC if they were disabled */
      else {
	ioport_set_pin_level(LED_YELLOW_GPIO, IOPORT_PIN_LEVEL_HIGH);
	tc_stop(TC0, 0);
    1930:	2100      	movs	r1, #0
    1932:	4805      	ldr	r0, [pc, #20]	; (1948 <ProcessButtonEvt+0x50>)
    1934:	f7fe fc76 	bl	224 <tc_stop>
    1938:	bd08      	pop	{r3, pc}
    193a:	bf00      	nop
    193c:	2000046c 	.word	0x2000046c
    1940:	2000017e 	.word	0x2000017e
    1944:	400e0e00 	.word	0x400e0e00
    1948:	40010000 	.word	0x40010000

0000194c <Button2_Handler>:
 *
 */
// [main_button2_handler] 
static void Button2_Handler(uint32_t id, uint32_t mask)
{
  if (PIN_PUSHBUTTON_2_ID == id && PIN_PUSHBUTTON_2_MASK == mask) { ProcessButtonEvt(1); }
    194c:	280b      	cmp	r0, #11
    194e:	d107      	bne.n	1960 <Button2_Handler+0x14>
    1950:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1954:	d104      	bne.n	1960 <Button2_Handler+0x14>
 *  \brief Handler for Button 2 falling edge interrupt.
 *
 */
// [main_button2_handler] 
static void Button2_Handler(uint32_t id, uint32_t mask)
{
    1956:	b508      	push	{r3, lr}
  if (PIN_PUSHBUTTON_2_ID == id && PIN_PUSHBUTTON_2_MASK == mask) { ProcessButtonEvt(1); }
    1958:	2001      	movs	r0, #1
    195a:	f7ff ffcd 	bl	18f8 <ProcessButtonEvt>
    195e:	bd08      	pop	{r3, pc}
    1960:	4770      	bx	lr
    1962:	bf00      	nop

00001964 <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) { ProcessButtonEvt(0); }
    1964:	280b      	cmp	r0, #11
    1966:	d107      	bne.n	1978 <Button1_Handler+0x14>
    1968:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
    196c:	d104      	bne.n	1978 <Button1_Handler+0x14>
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
    196e:	b508      	push	{r3, lr}
  if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) { ProcessButtonEvt(0); }
    1970:	2000      	movs	r0, #0
    1972:	f7ff ffc1 	bl	18f8 <ProcessButtonEvt>
    1976:	bd08      	pop	{r3, pc}
    1978:	4770      	bx	lr
    197a:	bf00      	nop

0000197c <Touch_Init_w_SPI>:
	// Board specific chip select configuration
	.id = SPI_TOUCH_NPCS
};

static void Touch_Init_w_SPI()
{
    197c:	b510      	push	{r4, lr}
    197e:	b082      	sub	sp, #8
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
    1980:	4c06      	ldr	r4, [pc, #24]	; (199c <Touch_Init_w_SPI+0x20>)
    1982:	2302      	movs	r3, #2
    1984:	6023      	str	r3, [r4, #0]
  spi_disable(BOARD_ILI9341_SPI);
  spi_master_setup_device(BOARD_ILI9341_SPI, &TOUCH_SPI_DEVICE, SPI_MODE_0, TOUCH_SPI_BAUDRATE, 0);
    1986:	2200      	movs	r2, #0
    1988:	9200      	str	r2, [sp, #0]
    198a:	4b05      	ldr	r3, [pc, #20]	; (19a0 <Touch_Init_w_SPI+0x24>)
    198c:	4905      	ldr	r1, [pc, #20]	; (19a4 <Touch_Init_w_SPI+0x28>)
    198e:	4620      	mov	r0, r4
    1990:	f7ff fe0c 	bl	15ac <spi_master_setup_device>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
    1994:	2301      	movs	r3, #1
    1996:	6023      	str	r3, [r4, #0]

  /* Enable the SPI peripheral */
  spi_enable(BOARD_ILI9341_SPI);
}
    1998:	b002      	add	sp, #8
    199a:	bd10      	pop	{r4, pc}
    199c:	40008000 	.word	0x40008000
    19a0:	000c3500 	.word	0x000c3500
    19a4:	20000180 	.word	0x20000180

000019a8 <configure_console>:
/**
 *  Configure UART console.
 */
// [main_console_configure]
static void configure_console(void)
{
    19a8:	b510      	push	{r4, lr}
    19aa:	b088      	sub	sp, #32
	const usart_serial_options_t uart_serial_options = {
    19ac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    19b0:	9304      	str	r3, [sp, #16]
    19b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    19b6:	9306      	str	r3, [sp, #24]
    19b8:	2008      	movs	r0, #8
    19ba:	f7ff faff 	bl	fbc <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    19be:	4c11      	ldr	r4, [pc, #68]	; (1a04 <configure_console+0x5c>)
    19c0:	4b11      	ldr	r3, [pc, #68]	; (1a08 <configure_console+0x60>)
    19c2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    19c4:	4a11      	ldr	r2, [pc, #68]	; (1a0c <configure_console+0x64>)
    19c6:	4b12      	ldr	r3, [pc, #72]	; (1a10 <configure_console+0x68>)
    19c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    19ca:	4a12      	ldr	r2, [pc, #72]	; (1a14 <configure_console+0x6c>)
    19cc:	4b12      	ldr	r3, [pc, #72]	; (1a18 <configure_console+0x70>)
    19ce:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
    19d0:	4b12      	ldr	r3, [pc, #72]	; (1a1c <configure_console+0x74>)
    19d2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
    19d4:	9b04      	ldr	r3, [sp, #16]
    19d6:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
    19d8:	9b06      	ldr	r3, [sp, #24]
    19da:	9303      	str	r3, [sp, #12]
    19dc:	2008      	movs	r0, #8
    19de:	f7ff faed 	bl	fbc <pmc_enable_periph_clk>
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
    19e2:	a901      	add	r1, sp, #4
    19e4:	4620      	mov	r0, r4
    19e6:	f7fe fbdd 	bl	1a4 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    19ea:	4c0d      	ldr	r4, [pc, #52]	; (1a20 <configure_console+0x78>)
    19ec:	6823      	ldr	r3, [r4, #0]
    19ee:	2100      	movs	r1, #0
    19f0:	6898      	ldr	r0, [r3, #8]
    19f2:	f000 fb75 	bl	20e0 <setbuf>
	setbuf(stdin, NULL);
    19f6:	6823      	ldr	r3, [r4, #0]
    19f8:	2100      	movs	r1, #0
    19fa:	6858      	ldr	r0, [r3, #4]
    19fc:	f000 fb70 	bl	20e0 <setbuf>
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
    1a00:	b008      	add	sp, #32
    1a02:	bd10      	pop	{r4, pc}
    1a04:	400e0600 	.word	0x400e0600
    1a08:	20000488 	.word	0x20000488
    1a0c:	00001725 	.word	0x00001725
    1a10:	20000484 	.word	0x20000484
    1a14:	000016b1 	.word	0x000016b1
    1a18:	20000480 	.word	0x20000480
    1a1c:	005b8d80 	.word	0x005b8d80
    1a20:	200001e4 	.word	0x200001e4

00001a24 <TC0_Handler>:
 *  Interrupt handler for TC0 interrupt. Toggles the state of LED\#2.
 */
// [main_tc0_handler]
#ifndef BOARD_NO_LED_1
void TC0_Handler(void)
{
    1a24:	b500      	push	{lr}
    1a26:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
    1a28:	2100      	movs	r1, #0
    1a2a:	480b      	ldr	r0, [pc, #44]	; (1a58 <TC0_Handler+0x34>)
    1a2c:	f7fe fc06 	bl	23c <tc_get_status>
    1a30:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
    1a32:	9b01      	ldr	r3, [sp, #4]
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
    1a34:	4b09      	ldr	r3, [pc, #36]	; (1a5c <TC0_Handler+0x38>)
    1a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1a38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    1a3c:	d004      	beq.n	1a48 <TC0_Handler+0x24>
		port->PIO_CODR = mask;
    1a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1a42:	4b06      	ldr	r3, [pc, #24]	; (1a5c <TC0_Handler+0x38>)
    1a44:	635a      	str	r2, [r3, #52]	; 0x34
    1a46:	e003      	b.n	1a50 <TC0_Handler+0x2c>
	} else {
		port->PIO_SODR = mask;
    1a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1a4c:	4b03      	ldr	r3, [pc, #12]	; (1a5c <TC0_Handler+0x38>)
    1a4e:	631a      	str	r2, [r3, #48]	; 0x30
	/** Toggle LED state. */
	ioport_toggle_pin_level(LED_YELLOW_GPIO);
#endif

//	printf("2 ");
}
    1a50:	b003      	add	sp, #12
    1a52:	f85d fb04 	ldr.w	pc, [sp], #4
    1a56:	bf00      	nop
    1a58:	40010000 	.word	0x40010000
    1a5c:	400e0e00 	.word	0x400e0e00

00001a60 <SD_IO_WriteCmd>:
  * @param  Crc: The CRC.
  * @param  Response: Expected response from the SD card
  * @retval  HAL_StatusTypeDef HAL Status
  */
void SD_IO_WriteCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Response)
{
    1a60:	b510      	push	{r4, lr}
    1a62:	b08c      	sub	sp, #48	; 0x30
  uint16_t rdata;
  uint8_t rdnpcs;
  uint8_t draw_buffer[30];

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40); /* Construct byte 1 */
    1a64:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1a68:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
    1a6c:	0e0b      	lsrs	r3, r1, #24
    1a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
    1a72:	f3c1 4307 	ubfx	r3, r1, #16, #8
    1a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  frame[3] = (uint8_t)(Arg >> 8); /* Construct byte 4 */
    1a7a:	f3c1 2307 	ubfx	r3, r1, #8, #8
    1a7e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  frame[4] = (uint8_t)(Arg); /* Construct byte 5 */
    1a82:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  frame[5] = (Crc); /* Construct CRC: byte 6 */
    1a86:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d

  /* Send Frame */
  for (counter = 0; counter < 6; counter++)
    1a8a:	2400      	movs	r4, #0
    1a8c:	e009      	b.n	1aa2 <SD_IO_WriteCmd+0x42>
  {
    spi_write(BOARD_ILI9341_SPI, frame[counter], BOARD_SD_MMC_SPI_NPCS, 0);
    1a8e:	ab0c      	add	r3, sp, #48	; 0x30
    1a90:	1919      	adds	r1, r3, r4
    1a92:	2300      	movs	r3, #0
    1a94:	461a      	mov	r2, r3
    1a96:	f811 1c08 	ldrb.w	r1, [r1, #-8]
    1a9a:	480f      	ldr	r0, [pc, #60]	; (1ad8 <SD_IO_WriteCmd+0x78>)
    1a9c:	f7fe fc3e 	bl	31c <spi_write>
  frame[3] = (uint8_t)(Arg >> 8); /* Construct byte 4 */
  frame[4] = (uint8_t)(Arg); /* Construct byte 5 */
  frame[5] = (Crc); /* Construct CRC: byte 6 */

  /* Send Frame */
  for (counter = 0; counter < 6; counter++)
    1aa0:	3401      	adds	r4, #1
    1aa2:	2c05      	cmp	r4, #5
    1aa4:	d9f3      	bls.n	1a8e <SD_IO_WriteCmd+0x2e>
  {
    spi_write(BOARD_ILI9341_SPI, frame[counter], BOARD_SD_MMC_SPI_NPCS, 0);
//    SD_IO_WriteByte(frame[counter]); /* Send the Cmd bytes */
  }
  mdelay(10);
    1aa6:	200a      	movs	r0, #10
    1aa8:	f000 fa36 	bl	1f18 <mdelay>

  spi_read(BOARD_ILI9341_SPI, &rdata, &rdnpcs);
    1aac:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    1ab0:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    1ab4:	4808      	ldr	r0, [pc, #32]	; (1ad8 <SD_IO_WriteCmd+0x78>)
    1ab6:	f7fe fc15 	bl	2e4 <spi_read>

//  spi_write(BOARD_ILI9341_SPI, 0xFF, BOARD_SD_MMC_SPI_NPCS, 0);

  sprintf(draw_buffer, "DT=%x, NPCS=%x", rdata, rdnpcs);
    1aba:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    1abe:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    1ac2:	4906      	ldr	r1, [pc, #24]	; (1adc <SD_IO_WriteCmd+0x7c>)
    1ac4:	a801      	add	r0, sp, #4
    1ac6:	f000 fb9b 	bl	2200 <siprintf>
  ili93xx_draw_string(5, 50, draw_buffer);
    1aca:	aa01      	add	r2, sp, #4
    1acc:	2132      	movs	r1, #50	; 0x32
    1ace:	2005      	movs	r0, #5
    1ad0:	f7ff fa02 	bl	ed8 <ili93xx_draw_string>
/*  if(Response != SD_NO_RESPONSE_EXPECTED)
  {
    return SD_IO_WaitResponse(Response);
  }*/

}
    1ad4:	b00c      	add	sp, #48	; 0x30
    1ad6:	bd10      	pop	{r4, pc}
    1ad8:	40008000 	.word	0x40008000
    1adc:	00003a9c 	.word	0x00003a9c

00001ae0 <SD_Card_Init_w_SPI>:
  /* Enable the SPI peripheral */
  spi_enable(BOARD_ILI9341_SPI);
}

static void SD_Card_Init_w_SPI()
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	b082      	sub	sp, #8

//  spi_disable(BOARD_ILI9341_SPI);
  spi_master_setup_device(BOARD_ILI9341_SPI, &SD_CARD_SPI_DEVICE, SPI_MODE_0, SD_CARD_INITIALIZATION_BAUDRATE, 0);
    1ae4:	4e1b      	ldr	r6, [pc, #108]	; (1b54 <SD_Card_Init_w_SPI+0x74>)
    1ae6:	4d1c      	ldr	r5, [pc, #112]	; (1b58 <SD_Card_Init_w_SPI+0x78>)
    1ae8:	2400      	movs	r4, #0
    1aea:	9400      	str	r4, [sp, #0]
    1aec:	4b1b      	ldr	r3, [pc, #108]	; (1b5c <SD_Card_Init_w_SPI+0x7c>)
    1aee:	4622      	mov	r2, r4
    1af0:	4631      	mov	r1, r6
    1af2:	4628      	mov	r0, r5
    1af4:	f7ff fd5a 	bl	15ac <spi_master_setup_device>
   * 100 kHz and 400 kHz. Set DI and CS high and apply 74 or more clock pulses to SCLK. The card will enter its native
   * operating mode and go ready to accept native command.
   */

  /* for safety */
  mdelay(1);
    1af8:	2001      	movs	r0, #1
    1afa:	f000 fa0d 	bl	1f18 <mdelay>
  /*
   * Inhibit (set to HIGH) the NPCS line to initialize.
   */
  gpio_configure_pin(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_GPIO_INHIBIT_FLAGS);
    1afe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
    1b02:	200b      	movs	r0, #11
    1b04:	f7ff fbc4 	bl	1290 <pio_configure_pin>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
    1b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1b0c:	4b14      	ldr	r3, [pc, #80]	; (1b60 <SD_Card_Init_w_SPI+0x80>)
    1b0e:	631a      	str	r2, [r3, #48]	; 0x30
  ioport_set_pin_level(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_NO_SELECT_LEVEL);

  spi_select_device(BOARD_ILI9341_SPI, &SD_CARD_SPI_DEVICE);
    1b10:	4631      	mov	r1, r6
    1b12:	4628      	mov	r0, r5
    1b14:	f7ff fd78 	bl	1608 <spi_select_device>
  for (int i = 0; i < 10; i++)
    1b18:	e006      	b.n	1b28 <SD_Card_Init_w_SPI+0x48>
    {
      spi_write(BOARD_ILI9341_SPI, SD_CARD_INIT_DATA, BOARD_ILI9341_SPI_NPCS, 0);
    1b1a:	2300      	movs	r3, #0
    1b1c:	2201      	movs	r2, #1
    1b1e:	21ff      	movs	r1, #255	; 0xff
    1b20:	480d      	ldr	r0, [pc, #52]	; (1b58 <SD_Card_Init_w_SPI+0x78>)
    1b22:	f7fe fbfb 	bl	31c <spi_write>
   */
  gpio_configure_pin(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_GPIO_INHIBIT_FLAGS);
  ioport_set_pin_level(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_NO_SELECT_LEVEL);

  spi_select_device(BOARD_ILI9341_SPI, &SD_CARD_SPI_DEVICE);
  for (int i = 0; i < 10; i++)
    1b26:	3401      	adds	r4, #1
    1b28:	2c09      	cmp	r4, #9
    1b2a:	ddf6      	ble.n	1b1a <SD_Card_Init_w_SPI+0x3a>
      spi_write(BOARD_ILI9341_SPI, SD_CARD_INIT_DATA, BOARD_ILI9341_SPI_NPCS, 0);
    }
  /*
   * return the IOPort SPI configure..
   */
  gpio_configure_pin(SD_MMC_SPI_NPCS_GPIO, SD_MMC_SPI_NPCS_GPIO_FLAGS);
    1b2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1b30:	200b      	movs	r0, #11
    1b32:	f7ff fbad 	bl	1290 <pio_configure_pin>

  mdelay(1);
    1b36:	2001      	movs	r0, #1
    1b38:	f000 f9ee 	bl	1f18 <mdelay>
  spi_select_device(BOARD_ILI9341_SPI, &SD_CARD_SPI_DEVICE);
    1b3c:	4905      	ldr	r1, [pc, #20]	; (1b54 <SD_Card_Init_w_SPI+0x74>)
    1b3e:	4806      	ldr	r0, [pc, #24]	; (1b58 <SD_Card_Init_w_SPI+0x78>)
    1b40:	f7ff fd62 	bl	1608 <spi_select_device>
  SD_IO_WriteCmd(0, 0, 0x95, 0);
    1b44:	2300      	movs	r3, #0
    1b46:	2295      	movs	r2, #149	; 0x95
    1b48:	4619      	mov	r1, r3
    1b4a:	4618      	mov	r0, r3
    1b4c:	f7ff ff88 	bl	1a60 <SD_IO_WriteCmd>

//  spi_disable(BOARD_ILI9341_SPI);
};
    1b50:	b002      	add	sp, #8
    1b52:	bd70      	pop	{r4, r5, r6, pc}
    1b54:	20000468 	.word	0x20000468
    1b58:	40008000 	.word	0x40008000
    1b5c:	00030d40 	.word	0x00030d40
    1b60:	400e0e00 	.word	0x400e0e00

00001b64 <GetTouchData>:
/*
 * void GetTouchData();
 *
 */
void GetTouchData()
{
    1b64:	b530      	push	{r4, r5, lr}
    1b66:	b083      	sub	sp, #12
  uint16_t RD;
  uint8_t p_pcs;
  uint16_t z;
  uint16_t DT[6];

  spi_select_device(BOARD_ILI9341_SPI, &TOUCH_SPI_DEVICE);
    1b68:	4d64      	ldr	r5, [pc, #400]	; (1cfc <GetTouchData+0x198>)
    1b6a:	4965      	ldr	r1, [pc, #404]	; (1d00 <GetTouchData+0x19c>)
    1b6c:	4628      	mov	r0, r5
    1b6e:	f7ff fd4b 	bl	1608 <spi_select_device>
  spi_write(BOARD_ILI9341_SPI, 0xB1, SPI_TOUCH_NPCS, 0);
    1b72:	2300      	movs	r3, #0
    1b74:	2202      	movs	r2, #2
    1b76:	21b1      	movs	r1, #177	; 0xb1
    1b78:	4628      	mov	r0, r5
    1b7a:	f7fe fbcf 	bl	31c <spi_write>
  spi_write(BOARD_ILI9341_SPI, 0xC1, SPI_TOUCH_NPCS, 0);
    1b7e:	2300      	movs	r3, #0
    1b80:	2202      	movs	r2, #2
    1b82:	21c1      	movs	r1, #193	; 0xc1
    1b84:	4628      	mov	r0, r5
    1b86:	f7fe fbc9 	bl	31c <spi_write>
  spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1b8a:	2300      	movs	r3, #0
    1b8c:	2202      	movs	r2, #2
    1b8e:	21ff      	movs	r1, #255	; 0xff
    1b90:	4628      	mov	r0, r5
    1b92:	f7fe fbc3 	bl	31c <spi_write>
  spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1b96:	f10d 0205 	add.w	r2, sp, #5
    1b9a:	f10d 0106 	add.w	r1, sp, #6
    1b9e:	4628      	mov	r0, r5
    1ba0:	f7fe fba0 	bl	2e4 <spi_read>
//  SD_IO_ReadData((uint8_t*)&RD, 2);
  RD = RD >> 3;
    1ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1ba8:	08db      	lsrs	r3, r3, #3
    1baa:	f8ad 3006 	strh.w	r3, [sp, #6]
  z = RD + 4095;
    1bae:	f603 74ff 	addw	r4, r3, #4095	; 0xfff
  spi_write(BOARD_ILI9341_SPI, 0x91, SPI_TOUCH_NPCS, 0);
    1bb2:	2300      	movs	r3, #0
    1bb4:	2202      	movs	r2, #2
    1bb6:	2191      	movs	r1, #145	; 0x91
    1bb8:	4628      	mov	r0, r5
    1bba:	f7fe fbaf 	bl	31c <spi_write>
//  SD_IO_WriteByte(0x91);
  spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1bbe:	2300      	movs	r3, #0
    1bc0:	2202      	movs	r2, #2
    1bc2:	21ff      	movs	r1, #255	; 0xff
    1bc4:	4628      	mov	r0, r5
    1bc6:	f7fe fba9 	bl	31c <spi_write>
  spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1bca:	f10d 0205 	add.w	r2, sp, #5
    1bce:	f10d 0106 	add.w	r1, sp, #6
    1bd2:	4628      	mov	r0, r5
    1bd4:	f7fe fb86 	bl	2e4 <spi_read>
//  SD_IO_ReadData((uint8_t*)&RD, 2);
  RD = RD >> 3;
    1bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1bdc:	08db      	lsrs	r3, r3, #3
    1bde:	f8ad 3006 	strh.w	r3, [sp, #6]
  z -= RD;
    1be2:	1ae3      	subs	r3, r4, r3
    1be4:	b29b      	uxth	r3, r3
  if (z >= Z_THRESHOLD)
    1be6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    1bea:	d35e      	bcc.n	1caa <GetTouchData+0x146>
    {
      spi_write(BOARD_ILI9341_SPI, 0x91, SPI_TOUCH_NPCS, 0);
    1bec:	2300      	movs	r3, #0
    1bee:	2202      	movs	r2, #2
    1bf0:	2191      	movs	r1, #145	; 0x91
    1bf2:	4628      	mov	r0, r5
    1bf4:	f7fe fb92 	bl	31c <spi_write>
//      SD_IO_WriteByte(0x91);
      spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1bf8:	2300      	movs	r3, #0
    1bfa:	2202      	movs	r2, #2
    1bfc:	21ff      	movs	r1, #255	; 0xff
    1bfe:	4628      	mov	r0, r5
    1c00:	f7fe fb8c 	bl	31c <spi_write>
      spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1c04:	f10d 0205 	add.w	r2, sp, #5
    1c08:	f10d 0106 	add.w	r1, sp, #6
    1c0c:	4628      	mov	r0, r5
    1c0e:	f7fe fb69 	bl	2e4 <spi_read>
//      SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
      //      SD_IO_WriteByte(0xD1);
      spi_write(BOARD_ILI9341_SPI, 0xD1, SPI_TOUCH_NPCS, 0);
    1c12:	2300      	movs	r3, #0
    1c14:	2202      	movs	r2, #2
    1c16:	21d1      	movs	r1, #209	; 0xd1
    1c18:	4628      	mov	r0, r5
    1c1a:	f7fe fb7f 	bl	31c <spi_write>
      //      SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
      spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1c1e:	2300      	movs	r3, #0
    1c20:	2202      	movs	r2, #2
    1c22:	21ff      	movs	r1, #255	; 0xff
    1c24:	4628      	mov	r0, r5
    1c26:	f7fe fb79 	bl	31c <spi_write>
      spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1c2a:	f10d 0205 	add.w	r2, sp, #5
    1c2e:	f10d 0106 	add.w	r1, sp, #6
    1c32:	4628      	mov	r0, r5
    1c34:	f7fe fb56 	bl	2e4 <spi_read>
      DT[0] = RD >> 3;
//      SD_IO_WriteByte(0x91);
      spi_write(BOARD_ILI9341_SPI, 0x91, SPI_TOUCH_NPCS, 0);
    1c38:	2300      	movs	r3, #0
    1c3a:	2202      	movs	r2, #2
    1c3c:	2191      	movs	r1, #145	; 0x91
    1c3e:	4628      	mov	r0, r5
    1c40:	f7fe fb6c 	bl	31c <spi_write>
//      SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
      spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1c44:	2300      	movs	r3, #0
    1c46:	2202      	movs	r2, #2
    1c48:	21ff      	movs	r1, #255	; 0xff
    1c4a:	4628      	mov	r0, r5
    1c4c:	f7fe fb66 	bl	31c <spi_write>
      spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1c50:	f10d 0205 	add.w	r2, sp, #5
    1c54:	f10d 0106 	add.w	r1, sp, #6
    1c58:	4628      	mov	r0, r5
    1c5a:	f7fe fb43 	bl	2e4 <spi_read>
      DT[1] = RD >> 3;
//      SD_IO_WriteByte(0xD1);
      spi_write(BOARD_ILI9341_SPI, 0xD1, SPI_TOUCH_NPCS, 0);
    1c5e:	2300      	movs	r3, #0
    1c60:	2202      	movs	r2, #2
    1c62:	21d1      	movs	r1, #209	; 0xd1
    1c64:	4628      	mov	r0, r5
    1c66:	f7fe fb59 	bl	31c <spi_write>
//      SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
      spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1c6a:	2300      	movs	r3, #0
    1c6c:	2202      	movs	r2, #2
    1c6e:	21ff      	movs	r1, #255	; 0xff
    1c70:	4628      	mov	r0, r5
    1c72:	f7fe fb53 	bl	31c <spi_write>
      spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1c76:	f10d 0205 	add.w	r2, sp, #5
    1c7a:	f10d 0106 	add.w	r1, sp, #6
    1c7e:	4628      	mov	r0, r5
    1c80:	f7fe fb30 	bl	2e4 <spi_read>
      DT[2] = RD >> 3;
//      SD_IO_WriteByte(0x91);
      spi_write(BOARD_ILI9341_SPI, 0x91, SPI_TOUCH_NPCS, 0);
    1c84:	2300      	movs	r3, #0
    1c86:	2202      	movs	r2, #2
    1c88:	2191      	movs	r1, #145	; 0x91
    1c8a:	4628      	mov	r0, r5
    1c8c:	f7fe fb46 	bl	31c <spi_write>
//      SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
      spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1c90:	2300      	movs	r3, #0
    1c92:	2202      	movs	r2, #2
    1c94:	21ff      	movs	r1, #255	; 0xff
    1c96:	4628      	mov	r0, r5
    1c98:	f7fe fb40 	bl	31c <spi_write>
      spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1c9c:	f10d 0205 	add.w	r2, sp, #5
    1ca0:	f10d 0106 	add.w	r1, sp, #6
    1ca4:	4628      	mov	r0, r5
    1ca6:	f7fe fb1d 	bl	2e4 <spi_read>
      DT[3] = RD >> 3;
    }
  else { DT[0] = DT[1] = DT[2] = DT[3] = 0;};	// Compiler warns these values may be used unset on early exit.
//    SD_IO_WriteByte(0x91);
    spi_write(BOARD_ILI9341_SPI, 0x91, SPI_TOUCH_NPCS, 0);
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <GetTouchData+0x198>)
    1cac:	2300      	movs	r3, #0
    1cae:	2202      	movs	r2, #2
    1cb0:	2191      	movs	r1, #145	; 0x91
    1cb2:	4620      	mov	r0, r4
    1cb4:	f7fe fb32 	bl	31c <spi_write>
//    SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
    spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1cb8:	2300      	movs	r3, #0
    1cba:	2202      	movs	r2, #2
    1cbc:	21ff      	movs	r1, #255	; 0xff
    1cbe:	4620      	mov	r0, r4
    1cc0:	f7fe fb2c 	bl	31c <spi_write>
    spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1cc4:	f10d 0205 	add.w	r2, sp, #5
    1cc8:	f10d 0106 	add.w	r1, sp, #6
    1ccc:	4620      	mov	r0, r4
    1cce:	f7fe fb09 	bl	2e4 <spi_read>
    DT[4] = RD >> 3;
//    SD_IO_WriteByte(0x00);
    spi_write(BOARD_ILI9341_SPI, 0x00, SPI_TOUCH_NPCS, 0);
    1cd2:	2300      	movs	r3, #0
    1cd4:	2202      	movs	r2, #2
    1cd6:	4619      	mov	r1, r3
    1cd8:	4620      	mov	r0, r4
    1cda:	f7fe fb1f 	bl	31c <spi_write>
//    SD_IO_ReadData((uint8_t*)&RD, 2);	// dummy X measure, 1st is always noisy
    spi_write(BOARD_ILI9341_SPI, 0xFF, SPI_TOUCH_NPCS, 0);
    1cde:	2300      	movs	r3, #0
    1ce0:	2202      	movs	r2, #2
    1ce2:	21ff      	movs	r1, #255	; 0xff
    1ce4:	4620      	mov	r0, r4
    1ce6:	f7fe fb19 	bl	31c <spi_write>
    spi_read(BOARD_ILI9341_SPI, &RD, &p_pcs);
    1cea:	f10d 0205 	add.w	r2, sp, #5
    1cee:	f10d 0106 	add.w	r1, sp, #6
    1cf2:	4620      	mov	r0, r4
    1cf4:	f7fe faf6 	bl	2e4 <spi_read>
    DT[5] = RD >> 3;
    z = 0;

}
    1cf8:	b003      	add	sp, #12
    1cfa:	bd30      	pop	{r4, r5, pc}
    1cfc:	40008000 	.word	0x40008000
    1d00:	20000180 	.word	0x20000180

00001d04 <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
    1d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d08:	b088      	sub	sp, #32
//! [main_step_sys_init]
	/* Initialize the SAM system */
  char draw_buffer[32];
  uint32_t gpmvm_status; uint32_t dw_reset_type;

	sysclk_init();
    1d0a:	f7ff fcb1 	bl	1670 <sysclk_init>
	board_init();
    1d0e:	f7fe fbbb 	bl	488 <board_init>
//! [main_step_sys_init]

	/* Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
    1d12:	4d65      	ldr	r5, [pc, #404]	; (1ea8 <main+0x1a4>)
    1d14:	26f0      	movs	r6, #240	; 0xf0
    1d16:	602e      	str	r6, [r5, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
    1d18:	f44f 77a0 	mov.w	r7, #320	; 0x140
    1d1c:	606f      	str	r7, [r5, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLUE;
    1d1e:	f04f 091f 	mov.w	r9, #31
    1d22:	f8c5 9008 	str.w	r9, [r5, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
    1d26:	f64f 78ff 	movw	r8, #65535	; 0xffff
    1d2a:	f8c5 800c 	str.w	r8, [r5, #12]
	ioport_set_pin_sense_mode(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_SENSE);
#endif
#endif
//! [main_step_console_init]
	/* Initialize the console uart */
	configure_console();
    1d2e:	f7ff fe3b 	bl	19a8 <configure_console>
//! [main_step_console_init]

	/* Output example information */
	puts(STRING_HEADER);
    1d32:	485e      	ldr	r0, [pc, #376]	; (1eac <main+0x1a8>)
    1d34:	f000 f9cc 	bl	20d0 <puts>

	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
    1d38:	485d      	ldr	r0, [pc, #372]	; (1eb0 <main+0x1ac>)
    1d3a:	f000 f9c9 	bl	20d0 <puts>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1d3e:	4b5d      	ldr	r3, [pc, #372]	; (1eb4 <main+0x1b0>)
    1d40:	f241 726f 	movw	r2, #5999	; 0x176f
    1d44:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1d46:	4a5c      	ldr	r2, [pc, #368]	; (1eb8 <main+0x1b4>)
    1d48:	f882 6023 	strb.w	r6, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1d4c:	2400      	movs	r4, #0
    1d4e:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1d50:	2207      	movs	r2, #7
    1d52:	601a      	str	r2, [r3, #0]
		while (1);
	}
//! [main_step_systick_init]

#ifndef BOARD_NO_LED_1
	puts("Configure TC.\r");
    1d54:	4859      	ldr	r0, [pc, #356]	; (1ebc <main+0x1b8>)
    1d56:	f000 f9bb 	bl	20d0 <puts>
//! [main_step_tc_init]
	configure_tc();
    1d5a:	f7ff fd1d 	bl	1798 <configure_tc>
//! [main_step_tc_init]

#endif

	puts("Configure buttons with debouncing.\r");
    1d5e:	4858      	ldr	r0, [pc, #352]	; (1ec0 <main+0x1bc>)
    1d60:	f000 f9b6 	bl	20d0 <puts>
//! [main_step_btn_init]
	configure_buttons();
    1d64:	f7ff fd52 	bl	180c <configure_buttons>
//! [main_step_btn_init]
	configure_SD_CD_input();
    1d68:	f7ff fd9a 	bl	18a0 <configure_SD_CD_input>

	puts("Configure spi master initialization().\r");
    1d6c:	4855      	ldr	r0, [pc, #340]	; (1ec4 <main+0x1c0>)
    1d6e:	f000 f9af 	bl	20d0 <puts>

	printf("Press %s to Start/Stop the %s blinking.\r\n",
    1d72:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 1f14 <main+0x210>
    1d76:	4a54      	ldr	r2, [pc, #336]	; (1ec8 <main+0x1c4>)
    1d78:	4954      	ldr	r1, [pc, #336]	; (1ecc <main+0x1c8>)
    1d7a:	4650      	mov	r0, sl
    1d7c:	f000 f918 	bl	1fb0 <iprintf>
			PUSHBUTTON_1_NAME, LED_GREEN_NAME);

#ifndef BOARD_NO_PUSHBUTTON_2
	printf("Press %s to Start/Stop the %s blinking.\r\n",
    1d80:	4a53      	ldr	r2, [pc, #332]	; (1ed0 <main+0x1cc>)
    1d82:	4954      	ldr	r1, [pc, #336]	; (1ed4 <main+0x1d0>)
    1d84:	4650      	mov	r0, sl
    1d86:	f000 f913 	bl	1fb0 <iprintf>
			PUSHBUTTON_2_NAME, LED_YELLOW_NAME);
#endif

  ili93xx_init_w_spi(&g_ili93xx_display_opt);
    1d8a:	4628      	mov	r0, r5
    1d8c:	f7fe feb4 	bl	af8 <ili93xx_init_w_spi>

  ili93xx_display_on();
    1d90:	f7fe fe42 	bl	a18 <ili93xx_display_on>
  ili93xx_set_foreground_color(COLOR_GREEN);
  ili93xx_draw_circle(120, 160, 40);
  ili93xx_set_foreground_color(COLOR_BLUE);
  ili93xx_draw_circle(180, 160, 40);*/

  ili93xx_display_on();
    1d94:	f7fe fe40 	bl	a18 <ili93xx_display_on>

  ili93xx_set_foreground_color(COLOR_BLUE);
    1d98:	4648      	mov	r0, r9
    1d9a:	f7fe fe51 	bl	a40 <ili93xx_set_foreground_color>
  ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH, ILI93XX_LCD_HEIGHT);
    1d9e:	463b      	mov	r3, r7
    1da0:	4632      	mov	r2, r6
    1da2:	4621      	mov	r1, r4
    1da4:	4620      	mov	r0, r4
    1da6:	f7ff f819 	bl	ddc <ili93xx_draw_filled_rectangle>

  ili93xx_set_foreground_color(COLOR_RED);
    1daa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
    1dae:	f7fe fe47 	bl	a40 <ili93xx_set_foreground_color>
  ili93xx_draw_rectangle(0, 0, ILI93XX_LCD_WIDTH, ILI93XX_LCD_HEIGHT);
    1db2:	463b      	mov	r3, r7
    1db4:	4632      	mov	r2, r6
    1db6:	4621      	mov	r1, r4
    1db8:	4620      	mov	r0, r4
    1dba:	f7ff f863 	bl	e84 <ili93xx_draw_rectangle>

  ili93xx_set_foreground_color(COLOR_WHITE);
    1dbe:	4640      	mov	r0, r8
    1dc0:	f7fe fe3e 	bl	a40 <ili93xx_set_foreground_color>
  ili93xx_draw_string(5, 10, "bekeband.hu");
    1dc4:	4a44      	ldr	r2, [pc, #272]	; (1ed8 <main+0x1d4>)
    1dc6:	210a      	movs	r1, #10
    1dc8:	2005      	movs	r0, #5
    1dca:	f7ff f885 	bl	ed8 <ili93xx_draw_string>

  sprintf(draw_buffer, "SD Card :");
    1dce:	4a43      	ldr	r2, [pc, #268]	; (1edc <main+0x1d8>)
    1dd0:	466b      	mov	r3, sp
    1dd2:	ca07      	ldmia	r2, {r0, r1, r2}
    1dd4:	c303      	stmia	r3!, {r0, r1}
    1dd6:	801a      	strh	r2, [r3, #0]
  ili93xx_draw_string(5, 30, draw_buffer);
    1dd8:	466a      	mov	r2, sp
    1dda:	211e      	movs	r1, #30
    1ddc:	2005      	movs	r0, #5
    1dde:	f7ff f87b 	bl	ed8 <ili93xx_draw_string>

  Touch_Init_w_SPI();
    1de2:	f7ff fdcb 	bl	197c <Touch_Init_w_SPI>
  uint32_t ul_rc;

//! [main_step_loop]
	while (1) {

	    GetTouchData();
    1de6:	f7ff febd 	bl	1b64 <GetTouchData>

	      if (card_detect)
    1dea:	4b3d      	ldr	r3, [pc, #244]	; (1ee0 <main+0x1dc>)
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	b1b3      	cbz	r3, 1e1e <main+0x11a>
		{
		  spi_select_device(BOARD_ILI9341_SPI, &ILI9341_SPI_DEVICE);
    1df0:	493c      	ldr	r1, [pc, #240]	; (1ee4 <main+0x1e0>)
    1df2:	483d      	ldr	r0, [pc, #244]	; (1ee8 <main+0x1e4>)
    1df4:	f7ff fc08 	bl	1608 <spi_select_device>
		  sprintf(draw_buffer, "SD Card : Detected");
    1df8:	466c      	mov	r4, sp
    1dfa:	4d3c      	ldr	r5, [pc, #240]	; (1eec <main+0x1e8>)
    1dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e00:	682b      	ldr	r3, [r5, #0]
    1e02:	f824 3b02 	strh.w	r3, [r4], #2
    1e06:	0c1b      	lsrs	r3, r3, #16
    1e08:	7023      	strb	r3, [r4, #0]
		  ili93xx_draw_string(5, 30, draw_buffer);
    1e0a:	466a      	mov	r2, sp
    1e0c:	211e      	movs	r1, #30
    1e0e:	2005      	movs	r0, #5
    1e10:	f7ff f862 	bl	ed8 <ili93xx_draw_string>

		  SD_Card_Init_w_SPI();
    1e14:	f7ff fe64 	bl	1ae0 <SD_Card_Init_w_SPI>

		  card_detect = 0;
    1e18:	2200      	movs	r2, #0
    1e1a:	4b31      	ldr	r3, [pc, #196]	; (1ee0 <main+0x1dc>)
    1e1c:	701a      	strb	r2, [r3, #0]
	    mdelay(200);
	    ili93xx_set_foreground_color(COLOR_GREEN);
	    ili93xx_draw_line(30, 10, 10, 50);
	    ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH, ILI93XX_LCD_HEIGHT);*/

	    if (reset_program_and_load_SAM_BA)
    1e1e:	4b34      	ldr	r3, [pc, #208]	; (1ef0 <main+0x1ec>)
    1e20:	881b      	ldrh	r3, [r3, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d038      	beq.n	1e98 <main+0x194>
	      {
//		__disable_irq();

		/* Check the flash init function */
		flash_init(FLASH_ACCESS_MODE_128, 6);
    1e26:	2106      	movs	r1, #6
    1e28:	2000      	movs	r0, #0
    1e2a:	f7fe fc89 	bl	740 <flash_init>


	      /* Get the reset type of this time. */
	      dw_reset_type = rstc_get_reset_cause(RSTC);
    1e2e:	4831      	ldr	r0, [pc, #196]	; (1ef4 <main+0x1f0>)
    1e30:	f7fe fcdc 	bl	7ec <rstc_get_reset_cause>
	      printf("rstc_get_reset_cause(RSTC); = %x \n\r", dw_reset_type);
    1e34:	4601      	mov	r1, r0
    1e36:	4830      	ldr	r0, [pc, #192]	; (1ef8 <main+0x1f4>)
    1e38:	f000 f8ba 	bl	1fb0 <iprintf>

	      printf("Clear gpnvm(1) bit boot from ROM! Asta la vista! \n\r");
    1e3c:	482f      	ldr	r0, [pc, #188]	; (1efc <main+0x1f8>)
    1e3e:	f000 f8b7 	bl	1fb0 <iprintf>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
    1e42:	4b2f      	ldr	r3, [pc, #188]	; (1f00 <main+0x1fc>)
    1e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e46:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    1e4a:	d004      	beq.n	1e56 <main+0x152>
		port->PIO_CODR = mask;
    1e4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e50:	4b2b      	ldr	r3, [pc, #172]	; (1f00 <main+0x1fc>)
    1e52:	635a      	str	r2, [r3, #52]	; 0x34
    1e54:	e003      	b.n	1e5e <main+0x15a>
	} else {
		port->PIO_SODR = mask;
    1e56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e5a:	4b29      	ldr	r3, [pc, #164]	; (1f00 <main+0x1fc>)
    1e5c:	631a      	str	r2, [r3, #48]	; 0x30
	      ioport_toggle_pin_level(LED_GREEN_GPIO);

	      /* Get the default gpnvm 1 status */
	      ul_rc = flash_is_gpnvm_set(1);
    1e5e:	2001      	movs	r0, #1
    1e60:	f7fe fc78 	bl	754 <flash_is_gpnvm_set>

	      /* Reverse the test, clear/set  the gpnvm */
	      if (ul_rc == FLASH_RC_YES)
    1e64:	2801      	cmp	r0, #1
    1e66:	d109      	bne.n	1e7c <main+0x178>
		{  /* default gpnvm 1 is set */
		  /* Clear the gpnvm 1 */
		  flash_clear_gpnvm(1);
    1e68:	f7fe fca8 	bl	7bc <flash_clear_gpnvm>

		  /* Get the gpnvm 1 status */
		  ul_rc = flash_is_gpnvm_set(1);
    1e6c:	2001      	movs	r0, #1
    1e6e:	f7fe fc71 	bl	754 <flash_is_gpnvm_set>

		  /* Validate the gpnvm clear interface */
		  if (ul_rc) printf("Test flash GPNVM: flash GPNVM clear error!\r\n");
    1e72:	b168      	cbz	r0, 1e90 <main+0x18c>
    1e74:	4823      	ldr	r0, [pc, #140]	; (1f04 <main+0x200>)
    1e76:	f000 f89b 	bl	1fb0 <iprintf>
    1e7a:	e009      	b.n	1e90 <main+0x18c>

		} else
		{
		    /* Set the gpnvm 1 */
		    flash_set_gpnvm(1);
    1e7c:	2001      	movs	r0, #1
    1e7e:	f7fe fc83 	bl	788 <flash_set_gpnvm>

		    ul_rc = flash_is_gpnvm_set(1);
    1e82:	2001      	movs	r0, #1
    1e84:	f7fe fc66 	bl	754 <flash_is_gpnvm_set>

		    /* Validate the gpnvm set interface */
		    if (!ul_rc) printf("Test flash GPNVM: flash GPNVM set error!\r\n");
    1e88:	b910      	cbnz	r0, 1e90 <main+0x18c>
    1e8a:	481f      	ldr	r0, [pc, #124]	; (1f08 <main+0x204>)
    1e8c:	f000 f890 	bl	1fb0 <iprintf>
		}
	      printf("__enable_irq();\r\n");
    1e90:	481e      	ldr	r0, [pc, #120]	; (1f0c <main+0x208>)
    1e92:	f000 f88d 	bl	1fb0 <iprintf>
    1e96:	b662      	cpsie	i
//	      flash_clear_gpnvm(1);
//	      reset_program_and_load_SAM_BA = 0;
	      };

		/* Wait for LED to be active */
		while (!g_b_led0_active);
    1e98:	4b1d      	ldr	r3, [pc, #116]	; (1f10 <main+0x20c>)
    1e9a:	781b      	ldrb	r3, [r3, #0]
    1e9c:	f013 0fff 	tst.w	r3, #255	; 0xff
    1ea0:	d0fa      	beq.n	1e98 <main+0x194>



		/* Toggle LED state if active */
		if (g_b_led0_active) {
    1ea2:	4b1b      	ldr	r3, [pc, #108]	; (1f10 <main+0x20c>)
    1ea4:	781b      	ldrb	r3, [r3, #0]

		}

		/* Wait for 500ms */

	}
    1ea6:	e79e      	b.n	1de6 <main+0xe2>
    1ea8:	2000048c 	.word	0x2000048c
    1eac:	00003aac 	.word	0x00003aac
    1eb0:	00003b08 	.word	0x00003b08
    1eb4:	e000e010 	.word	0xe000e010
    1eb8:	e000ed00 	.word	0xe000ed00
    1ebc:	00003b38 	.word	0x00003b38
    1ec0:	00003b48 	.word	0x00003b48
    1ec4:	00003b6c 	.word	0x00003b6c
    1ec8:	00003b94 	.word	0x00003b94
    1ecc:	00003ba4 	.word	0x00003ba4
    1ed0:	00003bd8 	.word	0x00003bd8
    1ed4:	00003be8 	.word	0x00003be8
    1ed8:	00003bf0 	.word	0x00003bf0
    1edc:	00003bfc 	.word	0x00003bfc
    1ee0:	20000464 	.word	0x20000464
    1ee4:	20000170 	.word	0x20000170
    1ee8:	40008000 	.word	0x40008000
    1eec:	00003c08 	.word	0x00003c08
    1ef0:	2000046c 	.word	0x2000046c
    1ef4:	400e1400 	.word	0x400e1400
    1ef8:	00003c1c 	.word	0x00003c1c
    1efc:	00003c40 	.word	0x00003c40
    1f00:	400e0e00 	.word	0x400e0e00
    1f04:	00003c74 	.word	0x00003c74
    1f08:	00003ca4 	.word	0x00003ca4
    1f0c:	00003cd0 	.word	0x00003cd0
    1f10:	2000017d 	.word	0x2000017d
    1f14:	00003bac 	.word	0x00003bac

00001f18 <mdelay>:
// [main_ms_delay]
void mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
    1f18:	4b03      	ldr	r3, [pc, #12]	; (1f28 <mdelay+0x10>)
    1f1a:	681a      	ldr	r2, [r3, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
    1f1c:	4b02      	ldr	r3, [pc, #8]	; (1f28 <mdelay+0x10>)
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	1a9b      	subs	r3, r3, r2
    1f22:	4283      	cmp	r3, r0
    1f24:	d3fa      	bcc.n	1f1c <mdelay+0x4>
}
    1f26:	4770      	bx	lr
    1f28:	20000470 	.word	0x20000470

00001f2c <SysTick_Handler>:
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
    1f2c:	4a02      	ldr	r2, [pc, #8]	; (1f38 <SysTick_Handler+0xc>)
    1f2e:	6813      	ldr	r3, [r2, #0]
    1f30:	3301      	adds	r3, #1
    1f32:	6013      	str	r3, [r2, #0]
    1f34:	4770      	bx	lr
    1f36:	bf00      	nop
    1f38:	20000470 	.word	0x20000470

00001f3c <__libc_init_array>:
    1f3c:	4b0e      	ldr	r3, [pc, #56]	; (1f78 <__libc_init_array+0x3c>)
    1f3e:	b570      	push	{r4, r5, r6, lr}
    1f40:	461e      	mov	r6, r3
    1f42:	4c0e      	ldr	r4, [pc, #56]	; (1f7c <__libc_init_array+0x40>)
    1f44:	2500      	movs	r5, #0
    1f46:	1ae4      	subs	r4, r4, r3
    1f48:	10a4      	asrs	r4, r4, #2
    1f4a:	42a5      	cmp	r5, r4
    1f4c:	d004      	beq.n	1f58 <__libc_init_array+0x1c>
    1f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1f52:	4798      	blx	r3
    1f54:	3501      	adds	r5, #1
    1f56:	e7f8      	b.n	1f4a <__libc_init_array+0xe>
    1f58:	f001 ff12 	bl	3d80 <_init>
    1f5c:	4b08      	ldr	r3, [pc, #32]	; (1f80 <__libc_init_array+0x44>)
    1f5e:	4c09      	ldr	r4, [pc, #36]	; (1f84 <__libc_init_array+0x48>)
    1f60:	461e      	mov	r6, r3
    1f62:	1ae4      	subs	r4, r4, r3
    1f64:	10a4      	asrs	r4, r4, #2
    1f66:	2500      	movs	r5, #0
    1f68:	42a5      	cmp	r5, r4
    1f6a:	d004      	beq.n	1f76 <__libc_init_array+0x3a>
    1f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1f70:	4798      	blx	r3
    1f72:	3501      	adds	r5, #1
    1f74:	e7f8      	b.n	1f68 <__libc_init_array+0x2c>
    1f76:	bd70      	pop	{r4, r5, r6, pc}
    1f78:	00003d8c 	.word	0x00003d8c
    1f7c:	00003d8c 	.word	0x00003d8c
    1f80:	00003d8c 	.word	0x00003d8c
    1f84:	00003d90 	.word	0x00003d90

00001f88 <memcpy>:
    1f88:	b510      	push	{r4, lr}
    1f8a:	1e43      	subs	r3, r0, #1
    1f8c:	440a      	add	r2, r1
    1f8e:	4291      	cmp	r1, r2
    1f90:	d004      	beq.n	1f9c <memcpy+0x14>
    1f92:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f96:	f803 4f01 	strb.w	r4, [r3, #1]!
    1f9a:	e7f8      	b.n	1f8e <memcpy+0x6>
    1f9c:	bd10      	pop	{r4, pc}

00001f9e <memset>:
    1f9e:	4603      	mov	r3, r0
    1fa0:	4402      	add	r2, r0
    1fa2:	4293      	cmp	r3, r2
    1fa4:	d002      	beq.n	1fac <memset+0xe>
    1fa6:	f803 1b01 	strb.w	r1, [r3], #1
    1faa:	e7fa      	b.n	1fa2 <memset+0x4>
    1fac:	4770      	bx	lr
	...

00001fb0 <iprintf>:
    1fb0:	b40f      	push	{r0, r1, r2, r3}
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <iprintf+0x2c>)
    1fb4:	b513      	push	{r0, r1, r4, lr}
    1fb6:	681c      	ldr	r4, [r3, #0]
    1fb8:	b124      	cbz	r4, 1fc4 <iprintf+0x14>
    1fba:	69a3      	ldr	r3, [r4, #24]
    1fbc:	b913      	cbnz	r3, 1fc4 <iprintf+0x14>
    1fbe:	4620      	mov	r0, r4
    1fc0:	f000 faf2 	bl	25a8 <__sinit>
    1fc4:	ab05      	add	r3, sp, #20
    1fc6:	9a04      	ldr	r2, [sp, #16]
    1fc8:	68a1      	ldr	r1, [r4, #8]
    1fca:	4620      	mov	r0, r4
    1fcc:	9301      	str	r3, [sp, #4]
    1fce:	f000 fdd7 	bl	2b80 <_vfiprintf_r>
    1fd2:	b002      	add	sp, #8
    1fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fd8:	b004      	add	sp, #16
    1fda:	4770      	bx	lr
    1fdc:	200001e4 	.word	0x200001e4

00001fe0 <_puts_r>:
    1fe0:	b570      	push	{r4, r5, r6, lr}
    1fe2:	460e      	mov	r6, r1
    1fe4:	4605      	mov	r5, r0
    1fe6:	b118      	cbz	r0, 1ff0 <_puts_r+0x10>
    1fe8:	6983      	ldr	r3, [r0, #24]
    1fea:	b90b      	cbnz	r3, 1ff0 <_puts_r+0x10>
    1fec:	f000 fadc 	bl	25a8 <__sinit>
    1ff0:	69ab      	ldr	r3, [r5, #24]
    1ff2:	68ac      	ldr	r4, [r5, #8]
    1ff4:	b913      	cbnz	r3, 1ffc <_puts_r+0x1c>
    1ff6:	4628      	mov	r0, r5
    1ff8:	f000 fad6 	bl	25a8 <__sinit>
    1ffc:	4b31      	ldr	r3, [pc, #196]	; (20c4 <__stack_size__+0xc4>)
    1ffe:	429c      	cmp	r4, r3
    2000:	d101      	bne.n	2006 <__stack_size__+0x6>
    2002:	686c      	ldr	r4, [r5, #4]
    2004:	e008      	b.n	2018 <__stack_size__+0x18>
    2006:	4b30      	ldr	r3, [pc, #192]	; (20c8 <__stack_size__+0xc8>)
    2008:	429c      	cmp	r4, r3
    200a:	d101      	bne.n	2010 <__stack_size__+0x10>
    200c:	68ac      	ldr	r4, [r5, #8]
    200e:	e003      	b.n	2018 <__stack_size__+0x18>
    2010:	4b2e      	ldr	r3, [pc, #184]	; (20cc <__stack_size__+0xcc>)
    2012:	429c      	cmp	r4, r3
    2014:	bf08      	it	eq
    2016:	68ec      	ldreq	r4, [r5, #12]
    2018:	89a3      	ldrh	r3, [r4, #12]
    201a:	0719      	lsls	r1, r3, #28
    201c:	d501      	bpl.n	2022 <__stack_size__+0x22>
    201e:	6923      	ldr	r3, [r4, #16]
    2020:	b983      	cbnz	r3, 2044 <__stack_size__+0x44>
    2022:	4621      	mov	r1, r4
    2024:	4628      	mov	r0, r5
    2026:	f000 f963 	bl	22f0 <__swsetup_r>
    202a:	b158      	cbz	r0, 2044 <__stack_size__+0x44>
    202c:	f04f 30ff 	mov.w	r0, #4294967295
    2030:	bd70      	pop	{r4, r5, r6, pc}
    2032:	2b00      	cmp	r3, #0
    2034:	db0e      	blt.n	2054 <__stack_size__+0x54>
    2036:	6823      	ldr	r3, [r4, #0]
    2038:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    203c:	701a      	strb	r2, [r3, #0]
    203e:	6823      	ldr	r3, [r4, #0]
    2040:	3301      	adds	r3, #1
    2042:	6023      	str	r3, [r4, #0]
    2044:	68a3      	ldr	r3, [r4, #8]
    2046:	f816 2b01 	ldrb.w	r2, [r6], #1
    204a:	3b01      	subs	r3, #1
    204c:	60a3      	str	r3, [r4, #8]
    204e:	2a00      	cmp	r2, #0
    2050:	d1ef      	bne.n	2032 <__stack_size__+0x32>
    2052:	e016      	b.n	2082 <__stack_size__+0x82>
    2054:	69a2      	ldr	r2, [r4, #24]
    2056:	4293      	cmp	r3, r2
    2058:	db09      	blt.n	206e <__stack_size__+0x6e>
    205a:	6823      	ldr	r3, [r4, #0]
    205c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    2060:	701a      	strb	r2, [r3, #0]
    2062:	6823      	ldr	r3, [r4, #0]
    2064:	7819      	ldrb	r1, [r3, #0]
    2066:	290a      	cmp	r1, #10
    2068:	d1ea      	bne.n	2040 <__stack_size__+0x40>
    206a:	4622      	mov	r2, r4
    206c:	e002      	b.n	2074 <__stack_size__+0x74>
    206e:	4622      	mov	r2, r4
    2070:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    2074:	4628      	mov	r0, r5
    2076:	f000 f8e7 	bl	2248 <__swbuf_r>
    207a:	1c42      	adds	r2, r0, #1
    207c:	4250      	negs	r0, r2
    207e:	4150      	adcs	r0, r2
    2080:	e7d3      	b.n	202a <__stack_size__+0x2a>
    2082:	2b00      	cmp	r3, #0
    2084:	da15      	bge.n	20b2 <__stack_size__+0xb2>
    2086:	69a2      	ldr	r2, [r4, #24]
    2088:	4293      	cmp	r3, r2
    208a:	db08      	blt.n	209e <__stack_size__+0x9e>
    208c:	6823      	ldr	r3, [r4, #0]
    208e:	220a      	movs	r2, #10
    2090:	701a      	strb	r2, [r3, #0]
    2092:	6823      	ldr	r3, [r4, #0]
    2094:	7819      	ldrb	r1, [r3, #0]
    2096:	4291      	cmp	r1, r2
    2098:	d10f      	bne.n	20ba <__stack_size__+0xba>
    209a:	4622      	mov	r2, r4
    209c:	e001      	b.n	20a2 <__stack_size__+0xa2>
    209e:	4622      	mov	r2, r4
    20a0:	210a      	movs	r1, #10
    20a2:	4628      	mov	r0, r5
    20a4:	f000 f8d0 	bl	2248 <__swbuf_r>
    20a8:	1c43      	adds	r3, r0, #1
    20aa:	4258      	negs	r0, r3
    20ac:	4158      	adcs	r0, r3
    20ae:	b130      	cbz	r0, 20be <__stack_size__+0xbe>
    20b0:	e7bc      	b.n	202c <__stack_size__+0x2c>
    20b2:	6823      	ldr	r3, [r4, #0]
    20b4:	220a      	movs	r2, #10
    20b6:	701a      	strb	r2, [r3, #0]
    20b8:	6823      	ldr	r3, [r4, #0]
    20ba:	3301      	adds	r3, #1
    20bc:	6023      	str	r3, [r4, #0]
    20be:	200a      	movs	r0, #10
    20c0:	bd70      	pop	{r4, r5, r6, pc}
    20c2:	bf00      	nop
    20c4:	00003cec 	.word	0x00003cec
    20c8:	00003d0c 	.word	0x00003d0c
    20cc:	00003d2c 	.word	0x00003d2c

000020d0 <puts>:
    20d0:	4b02      	ldr	r3, [pc, #8]	; (20dc <puts+0xc>)
    20d2:	4601      	mov	r1, r0
    20d4:	6818      	ldr	r0, [r3, #0]
    20d6:	f7ff bf83 	b.w	1fe0 <_puts_r>
    20da:	bf00      	nop
    20dc:	200001e4 	.word	0x200001e4

000020e0 <setbuf>:
    20e0:	2900      	cmp	r1, #0
    20e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20e6:	bf0c      	ite	eq
    20e8:	2202      	moveq	r2, #2
    20ea:	2200      	movne	r2, #0
    20ec:	f000 b800 	b.w	20f0 <setvbuf>

000020f0 <setvbuf>:
    20f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f4:	461d      	mov	r5, r3
    20f6:	4b3d      	ldr	r3, [pc, #244]	; (21ec <setvbuf+0xfc>)
    20f8:	4604      	mov	r4, r0
    20fa:	681e      	ldr	r6, [r3, #0]
    20fc:	460f      	mov	r7, r1
    20fe:	4690      	mov	r8, r2
    2100:	b126      	cbz	r6, 210c <setvbuf+0x1c>
    2102:	69b3      	ldr	r3, [r6, #24]
    2104:	b913      	cbnz	r3, 210c <setvbuf+0x1c>
    2106:	4630      	mov	r0, r6
    2108:	f000 fa4e 	bl	25a8 <__sinit>
    210c:	4b38      	ldr	r3, [pc, #224]	; (21f0 <setvbuf+0x100>)
    210e:	429c      	cmp	r4, r3
    2110:	d101      	bne.n	2116 <setvbuf+0x26>
    2112:	6874      	ldr	r4, [r6, #4]
    2114:	e008      	b.n	2128 <setvbuf+0x38>
    2116:	4b37      	ldr	r3, [pc, #220]	; (21f4 <setvbuf+0x104>)
    2118:	429c      	cmp	r4, r3
    211a:	d101      	bne.n	2120 <setvbuf+0x30>
    211c:	68b4      	ldr	r4, [r6, #8]
    211e:	e003      	b.n	2128 <setvbuf+0x38>
    2120:	4b35      	ldr	r3, [pc, #212]	; (21f8 <setvbuf+0x108>)
    2122:	429c      	cmp	r4, r3
    2124:	bf08      	it	eq
    2126:	68f4      	ldreq	r4, [r6, #12]
    2128:	f1b8 0f02 	cmp.w	r8, #2
    212c:	d859      	bhi.n	21e2 <setvbuf+0xf2>
    212e:	2d00      	cmp	r5, #0
    2130:	db57      	blt.n	21e2 <setvbuf+0xf2>
    2132:	4621      	mov	r1, r4
    2134:	4630      	mov	r0, r6
    2136:	f000 f9cd 	bl	24d4 <_fflush_r>
    213a:	2300      	movs	r3, #0
    213c:	6063      	str	r3, [r4, #4]
    213e:	61a3      	str	r3, [r4, #24]
    2140:	89a3      	ldrh	r3, [r4, #12]
    2142:	061b      	lsls	r3, r3, #24
    2144:	d503      	bpl.n	214e <setvbuf+0x5e>
    2146:	6921      	ldr	r1, [r4, #16]
    2148:	4630      	mov	r0, r6
    214a:	f000 fb0b 	bl	2764 <_free_r>
    214e:	89a3      	ldrh	r3, [r4, #12]
    2150:	f1b8 0f02 	cmp.w	r8, #2
    2154:	f023 0383 	bic.w	r3, r3, #131	; 0x83
    2158:	81a3      	strh	r3, [r4, #12]
    215a:	d012      	beq.n	2182 <setvbuf+0x92>
    215c:	bb37      	cbnz	r7, 21ac <setvbuf+0xbc>
    215e:	2d00      	cmp	r5, #0
    2160:	bf08      	it	eq
    2162:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    2166:	4628      	mov	r0, r5
    2168:	f000 faf4 	bl	2754 <malloc>
    216c:	4607      	mov	r7, r0
    216e:	b9c8      	cbnz	r0, 21a4 <setvbuf+0xb4>
    2170:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2174:	f000 faee 	bl	2754 <malloc>
    2178:	4607      	mov	r7, r0
    217a:	b988      	cbnz	r0, 21a0 <setvbuf+0xb0>
    217c:	f04f 30ff 	mov.w	r0, #4294967295
    2180:	e000      	b.n	2184 <setvbuf+0x94>
    2182:	2000      	movs	r0, #0
    2184:	89a3      	ldrh	r3, [r4, #12]
    2186:	f043 0302 	orr.w	r3, r3, #2
    218a:	81a3      	strh	r3, [r4, #12]
    218c:	2300      	movs	r3, #0
    218e:	60a3      	str	r3, [r4, #8]
    2190:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2194:	6023      	str	r3, [r4, #0]
    2196:	6123      	str	r3, [r4, #16]
    2198:	2301      	movs	r3, #1
    219a:	6163      	str	r3, [r4, #20]
    219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a0:	f44f 6580 	mov.w	r5, #1024	; 0x400
    21a4:	89a3      	ldrh	r3, [r4, #12]
    21a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    21aa:	81a3      	strh	r3, [r4, #12]
    21ac:	f1b8 0f01 	cmp.w	r8, #1
    21b0:	d105      	bne.n	21be <setvbuf+0xce>
    21b2:	89a3      	ldrh	r3, [r4, #12]
    21b4:	f043 0301 	orr.w	r3, r3, #1
    21b8:	81a3      	strh	r3, [r4, #12]
    21ba:	426b      	negs	r3, r5
    21bc:	61a3      	str	r3, [r4, #24]
    21be:	4b0f      	ldr	r3, [pc, #60]	; (21fc <setvbuf+0x10c>)
    21c0:	62b3      	str	r3, [r6, #40]	; 0x28
    21c2:	89a3      	ldrh	r3, [r4, #12]
    21c4:	6027      	str	r7, [r4, #0]
    21c6:	f003 0008 	and.w	r0, r3, #8
    21ca:	b280      	uxth	r0, r0
    21cc:	6127      	str	r7, [r4, #16]
    21ce:	6165      	str	r5, [r4, #20]
    21d0:	b148      	cbz	r0, 21e6 <setvbuf+0xf6>
    21d2:	f013 0f03 	tst.w	r3, #3
    21d6:	bf18      	it	ne
    21d8:	2500      	movne	r5, #0
    21da:	60a5      	str	r5, [r4, #8]
    21dc:	2000      	movs	r0, #0
    21de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21e2:	f04f 30ff 	mov.w	r0, #4294967295
    21e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21ea:	bf00      	nop
    21ec:	200001e4 	.word	0x200001e4
    21f0:	00003cec 	.word	0x00003cec
    21f4:	00003d0c 	.word	0x00003d0c
    21f8:	00003d2c 	.word	0x00003d2c
    21fc:	00002529 	.word	0x00002529

00002200 <siprintf>:
    2200:	b40e      	push	{r1, r2, r3}
    2202:	b500      	push	{lr}
    2204:	f44f 7102 	mov.w	r1, #520	; 0x208
    2208:	b09c      	sub	sp, #112	; 0x70
    220a:	f8ad 1014 	strh.w	r1, [sp, #20]
    220e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2212:	9104      	str	r1, [sp, #16]
    2214:	9107      	str	r1, [sp, #28]
    2216:	f64f 71ff 	movw	r1, #65535	; 0xffff
    221a:	ab1d      	add	r3, sp, #116	; 0x74
    221c:	9002      	str	r0, [sp, #8]
    221e:	9006      	str	r0, [sp, #24]
    2220:	4808      	ldr	r0, [pc, #32]	; (2244 <siprintf+0x44>)
    2222:	f853 2b04 	ldr.w	r2, [r3], #4
    2226:	f8ad 1016 	strh.w	r1, [sp, #22]
    222a:	6800      	ldr	r0, [r0, #0]
    222c:	a902      	add	r1, sp, #8
    222e:	9301      	str	r3, [sp, #4]
    2230:	f000 fb8a 	bl	2948 <_svfiprintf_r>
    2234:	9b02      	ldr	r3, [sp, #8]
    2236:	2200      	movs	r2, #0
    2238:	701a      	strb	r2, [r3, #0]
    223a:	b01c      	add	sp, #112	; 0x70
    223c:	f85d eb04 	ldr.w	lr, [sp], #4
    2240:	b003      	add	sp, #12
    2242:	4770      	bx	lr
    2244:	200001e4 	.word	0x200001e4

00002248 <__swbuf_r>:
    2248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    224a:	460f      	mov	r7, r1
    224c:	4614      	mov	r4, r2
    224e:	4606      	mov	r6, r0
    2250:	b118      	cbz	r0, 225a <__swbuf_r+0x12>
    2252:	6983      	ldr	r3, [r0, #24]
    2254:	b90b      	cbnz	r3, 225a <__swbuf_r+0x12>
    2256:	f000 f9a7 	bl	25a8 <__sinit>
    225a:	4b22      	ldr	r3, [pc, #136]	; (22e4 <__swbuf_r+0x9c>)
    225c:	429c      	cmp	r4, r3
    225e:	d101      	bne.n	2264 <__swbuf_r+0x1c>
    2260:	6874      	ldr	r4, [r6, #4]
    2262:	e008      	b.n	2276 <__swbuf_r+0x2e>
    2264:	4b20      	ldr	r3, [pc, #128]	; (22e8 <__swbuf_r+0xa0>)
    2266:	429c      	cmp	r4, r3
    2268:	d101      	bne.n	226e <__swbuf_r+0x26>
    226a:	68b4      	ldr	r4, [r6, #8]
    226c:	e003      	b.n	2276 <__swbuf_r+0x2e>
    226e:	4b1f      	ldr	r3, [pc, #124]	; (22ec <__swbuf_r+0xa4>)
    2270:	429c      	cmp	r4, r3
    2272:	bf08      	it	eq
    2274:	68f4      	ldreq	r4, [r6, #12]
    2276:	69a3      	ldr	r3, [r4, #24]
    2278:	60a3      	str	r3, [r4, #8]
    227a:	89a3      	ldrh	r3, [r4, #12]
    227c:	071a      	lsls	r2, r3, #28
    227e:	d509      	bpl.n	2294 <__swbuf_r+0x4c>
    2280:	6923      	ldr	r3, [r4, #16]
    2282:	b13b      	cbz	r3, 2294 <__swbuf_r+0x4c>
    2284:	6823      	ldr	r3, [r4, #0]
    2286:	6920      	ldr	r0, [r4, #16]
    2288:	b2fd      	uxtb	r5, r7
    228a:	1a18      	subs	r0, r3, r0
    228c:	6963      	ldr	r3, [r4, #20]
    228e:	4298      	cmp	r0, r3
    2290:	db0f      	blt.n	22b2 <__swbuf_r+0x6a>
    2292:	e008      	b.n	22a6 <__swbuf_r+0x5e>
    2294:	4621      	mov	r1, r4
    2296:	4630      	mov	r0, r6
    2298:	f000 f82a 	bl	22f0 <__swsetup_r>
    229c:	2800      	cmp	r0, #0
    229e:	d0f1      	beq.n	2284 <__swbuf_r+0x3c>
    22a0:	f04f 30ff 	mov.w	r0, #4294967295
    22a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22a6:	4621      	mov	r1, r4
    22a8:	4630      	mov	r0, r6
    22aa:	f000 f913 	bl	24d4 <_fflush_r>
    22ae:	2800      	cmp	r0, #0
    22b0:	d1f6      	bne.n	22a0 <__swbuf_r+0x58>
    22b2:	68a3      	ldr	r3, [r4, #8]
    22b4:	3b01      	subs	r3, #1
    22b6:	60a3      	str	r3, [r4, #8]
    22b8:	6823      	ldr	r3, [r4, #0]
    22ba:	1c5a      	adds	r2, r3, #1
    22bc:	6022      	str	r2, [r4, #0]
    22be:	701f      	strb	r7, [r3, #0]
    22c0:	6962      	ldr	r2, [r4, #20]
    22c2:	1c43      	adds	r3, r0, #1
    22c4:	4293      	cmp	r3, r2
    22c6:	d004      	beq.n	22d2 <__swbuf_r+0x8a>
    22c8:	89a3      	ldrh	r3, [r4, #12]
    22ca:	07db      	lsls	r3, r3, #31
    22cc:	d507      	bpl.n	22de <__swbuf_r+0x96>
    22ce:	2d0a      	cmp	r5, #10
    22d0:	d105      	bne.n	22de <__swbuf_r+0x96>
    22d2:	4621      	mov	r1, r4
    22d4:	4630      	mov	r0, r6
    22d6:	f000 f8fd 	bl	24d4 <_fflush_r>
    22da:	2800      	cmp	r0, #0
    22dc:	d1e0      	bne.n	22a0 <__swbuf_r+0x58>
    22de:	4628      	mov	r0, r5
    22e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e2:	bf00      	nop
    22e4:	00003cec 	.word	0x00003cec
    22e8:	00003d0c 	.word	0x00003d0c
    22ec:	00003d2c 	.word	0x00003d2c

000022f0 <__swsetup_r>:
    22f0:	4b31      	ldr	r3, [pc, #196]	; (23b8 <__swsetup_r+0xc8>)
    22f2:	b570      	push	{r4, r5, r6, lr}
    22f4:	681d      	ldr	r5, [r3, #0]
    22f6:	4606      	mov	r6, r0
    22f8:	460c      	mov	r4, r1
    22fa:	b125      	cbz	r5, 2306 <__swsetup_r+0x16>
    22fc:	69ab      	ldr	r3, [r5, #24]
    22fe:	b913      	cbnz	r3, 2306 <__swsetup_r+0x16>
    2300:	4628      	mov	r0, r5
    2302:	f000 f951 	bl	25a8 <__sinit>
    2306:	4b2d      	ldr	r3, [pc, #180]	; (23bc <__swsetup_r+0xcc>)
    2308:	429c      	cmp	r4, r3
    230a:	d101      	bne.n	2310 <__swsetup_r+0x20>
    230c:	686c      	ldr	r4, [r5, #4]
    230e:	e008      	b.n	2322 <__swsetup_r+0x32>
    2310:	4b2b      	ldr	r3, [pc, #172]	; (23c0 <__swsetup_r+0xd0>)
    2312:	429c      	cmp	r4, r3
    2314:	d101      	bne.n	231a <__swsetup_r+0x2a>
    2316:	68ac      	ldr	r4, [r5, #8]
    2318:	e003      	b.n	2322 <__swsetup_r+0x32>
    231a:	4b2a      	ldr	r3, [pc, #168]	; (23c4 <__swsetup_r+0xd4>)
    231c:	429c      	cmp	r4, r3
    231e:	bf08      	it	eq
    2320:	68ec      	ldreq	r4, [r5, #12]
    2322:	89a3      	ldrh	r3, [r4, #12]
    2324:	b29a      	uxth	r2, r3
    2326:	0711      	lsls	r1, r2, #28
    2328:	d41d      	bmi.n	2366 <__swsetup_r+0x76>
    232a:	06d5      	lsls	r5, r2, #27
    232c:	d402      	bmi.n	2334 <__swsetup_r+0x44>
    232e:	2209      	movs	r2, #9
    2330:	6032      	str	r2, [r6, #0]
    2332:	e038      	b.n	23a6 <__swsetup_r+0xb6>
    2334:	0750      	lsls	r0, r2, #29
    2336:	d512      	bpl.n	235e <__swsetup_r+0x6e>
    2338:	6b61      	ldr	r1, [r4, #52]	; 0x34
    233a:	b141      	cbz	r1, 234e <__swsetup_r+0x5e>
    233c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2340:	4299      	cmp	r1, r3
    2342:	d002      	beq.n	234a <__swsetup_r+0x5a>
    2344:	4630      	mov	r0, r6
    2346:	f000 fa0d 	bl	2764 <_free_r>
    234a:	2300      	movs	r3, #0
    234c:	6363      	str	r3, [r4, #52]	; 0x34
    234e:	89a3      	ldrh	r3, [r4, #12]
    2350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    2354:	81a3      	strh	r3, [r4, #12]
    2356:	2300      	movs	r3, #0
    2358:	6063      	str	r3, [r4, #4]
    235a:	6923      	ldr	r3, [r4, #16]
    235c:	6023      	str	r3, [r4, #0]
    235e:	89a3      	ldrh	r3, [r4, #12]
    2360:	f043 0308 	orr.w	r3, r3, #8
    2364:	81a3      	strh	r3, [r4, #12]
    2366:	6923      	ldr	r3, [r4, #16]
    2368:	b94b      	cbnz	r3, 237e <__swsetup_r+0x8e>
    236a:	89a3      	ldrh	r3, [r4, #12]
    236c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    2370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2374:	d003      	beq.n	237e <__swsetup_r+0x8e>
    2376:	4621      	mov	r1, r4
    2378:	4630      	mov	r0, r6
    237a:	f000 f99f 	bl	26bc <__smakebuf_r>
    237e:	89a3      	ldrh	r3, [r4, #12]
    2380:	f013 0201 	ands.w	r2, r3, #1
    2384:	d005      	beq.n	2392 <__swsetup_r+0xa2>
    2386:	2200      	movs	r2, #0
    2388:	60a2      	str	r2, [r4, #8]
    238a:	6962      	ldr	r2, [r4, #20]
    238c:	4252      	negs	r2, r2
    238e:	61a2      	str	r2, [r4, #24]
    2390:	e003      	b.n	239a <__swsetup_r+0xaa>
    2392:	0799      	lsls	r1, r3, #30
    2394:	bf58      	it	pl
    2396:	6962      	ldrpl	r2, [r4, #20]
    2398:	60a2      	str	r2, [r4, #8]
    239a:	6922      	ldr	r2, [r4, #16]
    239c:	b94a      	cbnz	r2, 23b2 <__swsetup_r+0xc2>
    239e:	f003 0080 	and.w	r0, r3, #128	; 0x80
    23a2:	b280      	uxth	r0, r0
    23a4:	b130      	cbz	r0, 23b4 <__swsetup_r+0xc4>
    23a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23aa:	81a3      	strh	r3, [r4, #12]
    23ac:	f04f 30ff 	mov.w	r0, #4294967295
    23b0:	bd70      	pop	{r4, r5, r6, pc}
    23b2:	2000      	movs	r0, #0
    23b4:	bd70      	pop	{r4, r5, r6, pc}
    23b6:	bf00      	nop
    23b8:	200001e4 	.word	0x200001e4
    23bc:	00003cec 	.word	0x00003cec
    23c0:	00003d0c 	.word	0x00003d0c
    23c4:	00003d2c 	.word	0x00003d2c

000023c8 <__sflush_r>:
    23c8:	898a      	ldrh	r2, [r1, #12]
    23ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23ce:	4605      	mov	r5, r0
    23d0:	0710      	lsls	r0, r2, #28
    23d2:	460c      	mov	r4, r1
    23d4:	d459      	bmi.n	248a <__sflush_r+0xc2>
    23d6:	684b      	ldr	r3, [r1, #4]
    23d8:	2b00      	cmp	r3, #0
    23da:	dc02      	bgt.n	23e2 <__sflush_r+0x1a>
    23dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    23de:	2b00      	cmp	r3, #0
    23e0:	dd17      	ble.n	2412 <__sflush_r+0x4a>
    23e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    23e4:	b1ae      	cbz	r6, 2412 <__sflush_r+0x4a>
    23e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    23ea:	2300      	movs	r3, #0
    23ec:	b292      	uxth	r2, r2
    23ee:	682f      	ldr	r7, [r5, #0]
    23f0:	602b      	str	r3, [r5, #0]
    23f2:	b10a      	cbz	r2, 23f8 <__sflush_r+0x30>
    23f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23f6:	e015      	b.n	2424 <__sflush_r+0x5c>
    23f8:	6a21      	ldr	r1, [r4, #32]
    23fa:	2301      	movs	r3, #1
    23fc:	4628      	mov	r0, r5
    23fe:	47b0      	blx	r6
    2400:	1c41      	adds	r1, r0, #1
    2402:	d10f      	bne.n	2424 <__sflush_r+0x5c>
    2404:	682b      	ldr	r3, [r5, #0]
    2406:	b16b      	cbz	r3, 2424 <__sflush_r+0x5c>
    2408:	2b1d      	cmp	r3, #29
    240a:	d001      	beq.n	2410 <__sflush_r+0x48>
    240c:	2b16      	cmp	r3, #22
    240e:	d103      	bne.n	2418 <__sflush_r+0x50>
    2410:	602f      	str	r7, [r5, #0]
    2412:	2000      	movs	r0, #0
    2414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2418:	89a3      	ldrh	r3, [r4, #12]
    241a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    241e:	81a3      	strh	r3, [r4, #12]
    2420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2424:	89a3      	ldrh	r3, [r4, #12]
    2426:	075a      	lsls	r2, r3, #29
    2428:	d505      	bpl.n	2436 <__sflush_r+0x6e>
    242a:	6863      	ldr	r3, [r4, #4]
    242c:	1ac0      	subs	r0, r0, r3
    242e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2430:	b10b      	cbz	r3, 2436 <__sflush_r+0x6e>
    2432:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2434:	1ac0      	subs	r0, r0, r3
    2436:	2300      	movs	r3, #0
    2438:	4602      	mov	r2, r0
    243a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    243c:	6a21      	ldr	r1, [r4, #32]
    243e:	4628      	mov	r0, r5
    2440:	47b0      	blx	r6
    2442:	1c43      	adds	r3, r0, #1
    2444:	89a3      	ldrh	r3, [r4, #12]
    2446:	d106      	bne.n	2456 <__sflush_r+0x8e>
    2448:	6829      	ldr	r1, [r5, #0]
    244a:	291d      	cmp	r1, #29
    244c:	d839      	bhi.n	24c2 <__sflush_r+0xfa>
    244e:	4a20      	ldr	r2, [pc, #128]	; (24d0 <__sflush_r+0x108>)
    2450:	40ca      	lsrs	r2, r1
    2452:	07d6      	lsls	r6, r2, #31
    2454:	d535      	bpl.n	24c2 <__sflush_r+0xfa>
    2456:	2200      	movs	r2, #0
    2458:	6062      	str	r2, [r4, #4]
    245a:	6922      	ldr	r2, [r4, #16]
    245c:	04d9      	lsls	r1, r3, #19
    245e:	6022      	str	r2, [r4, #0]
    2460:	d504      	bpl.n	246c <__sflush_r+0xa4>
    2462:	1c42      	adds	r2, r0, #1
    2464:	d101      	bne.n	246a <__sflush_r+0xa2>
    2466:	682b      	ldr	r3, [r5, #0]
    2468:	b903      	cbnz	r3, 246c <__sflush_r+0xa4>
    246a:	6560      	str	r0, [r4, #84]	; 0x54
    246c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    246e:	602f      	str	r7, [r5, #0]
    2470:	2900      	cmp	r1, #0
    2472:	d0ce      	beq.n	2412 <__sflush_r+0x4a>
    2474:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2478:	4299      	cmp	r1, r3
    247a:	d002      	beq.n	2482 <__sflush_r+0xba>
    247c:	4628      	mov	r0, r5
    247e:	f000 f971 	bl	2764 <_free_r>
    2482:	2000      	movs	r0, #0
    2484:	6360      	str	r0, [r4, #52]	; 0x34
    2486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    248a:	690f      	ldr	r7, [r1, #16]
    248c:	2f00      	cmp	r7, #0
    248e:	d0c0      	beq.n	2412 <__sflush_r+0x4a>
    2490:	0793      	lsls	r3, r2, #30
    2492:	680e      	ldr	r6, [r1, #0]
    2494:	bf0c      	ite	eq
    2496:	694b      	ldreq	r3, [r1, #20]
    2498:	2300      	movne	r3, #0
    249a:	ebc7 0806 	rsb	r8, r7, r6
    249e:	600f      	str	r7, [r1, #0]
    24a0:	608b      	str	r3, [r1, #8]
    24a2:	e002      	b.n	24aa <__sflush_r+0xe2>
    24a4:	4407      	add	r7, r0
    24a6:	ebc0 0808 	rsb	r8, r0, r8
    24aa:	f1b8 0f00 	cmp.w	r8, #0
    24ae:	ddb0      	ble.n	2412 <__sflush_r+0x4a>
    24b0:	4643      	mov	r3, r8
    24b2:	463a      	mov	r2, r7
    24b4:	6a21      	ldr	r1, [r4, #32]
    24b6:	4628      	mov	r0, r5
    24b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    24ba:	47b0      	blx	r6
    24bc:	2800      	cmp	r0, #0
    24be:	dcf1      	bgt.n	24a4 <__sflush_r+0xdc>
    24c0:	89a3      	ldrh	r3, [r4, #12]
    24c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24c6:	81a3      	strh	r3, [r4, #12]
    24c8:	f04f 30ff 	mov.w	r0, #4294967295
    24cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24d0:	20400001 	.word	0x20400001

000024d4 <_fflush_r>:
    24d4:	b538      	push	{r3, r4, r5, lr}
    24d6:	690b      	ldr	r3, [r1, #16]
    24d8:	4605      	mov	r5, r0
    24da:	460c      	mov	r4, r1
    24dc:	b1db      	cbz	r3, 2516 <_fflush_r+0x42>
    24de:	b118      	cbz	r0, 24e8 <_fflush_r+0x14>
    24e0:	6983      	ldr	r3, [r0, #24]
    24e2:	b90b      	cbnz	r3, 24e8 <_fflush_r+0x14>
    24e4:	f000 f860 	bl	25a8 <__sinit>
    24e8:	4b0c      	ldr	r3, [pc, #48]	; (251c <_fflush_r+0x48>)
    24ea:	429c      	cmp	r4, r3
    24ec:	d101      	bne.n	24f2 <_fflush_r+0x1e>
    24ee:	686c      	ldr	r4, [r5, #4]
    24f0:	e008      	b.n	2504 <_fflush_r+0x30>
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <_fflush_r+0x4c>)
    24f4:	429c      	cmp	r4, r3
    24f6:	d101      	bne.n	24fc <_fflush_r+0x28>
    24f8:	68ac      	ldr	r4, [r5, #8]
    24fa:	e003      	b.n	2504 <_fflush_r+0x30>
    24fc:	4b09      	ldr	r3, [pc, #36]	; (2524 <_fflush_r+0x50>)
    24fe:	429c      	cmp	r4, r3
    2500:	bf08      	it	eq
    2502:	68ec      	ldreq	r4, [r5, #12]
    2504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2508:	b12b      	cbz	r3, 2516 <_fflush_r+0x42>
    250a:	4621      	mov	r1, r4
    250c:	4628      	mov	r0, r5
    250e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2512:	f7ff bf59 	b.w	23c8 <__sflush_r>
    2516:	2000      	movs	r0, #0
    2518:	bd38      	pop	{r3, r4, r5, pc}
    251a:	bf00      	nop
    251c:	00003cec 	.word	0x00003cec
    2520:	00003d0c 	.word	0x00003d0c
    2524:	00003d2c 	.word	0x00003d2c

00002528 <_cleanup_r>:
    2528:	4901      	ldr	r1, [pc, #4]	; (2530 <_cleanup_r+0x8>)
    252a:	f000 b8a9 	b.w	2680 <_fwalk_reent>
    252e:	bf00      	nop
    2530:	000024d5 	.word	0x000024d5

00002534 <std.isra.0>:
    2534:	b510      	push	{r4, lr}
    2536:	4604      	mov	r4, r0
    2538:	2300      	movs	r3, #0
    253a:	6003      	str	r3, [r0, #0]
    253c:	6043      	str	r3, [r0, #4]
    253e:	6083      	str	r3, [r0, #8]
    2540:	8181      	strh	r1, [r0, #12]
    2542:	6643      	str	r3, [r0, #100]	; 0x64
    2544:	81c2      	strh	r2, [r0, #14]
    2546:	6103      	str	r3, [r0, #16]
    2548:	6143      	str	r3, [r0, #20]
    254a:	6183      	str	r3, [r0, #24]
    254c:	4619      	mov	r1, r3
    254e:	2208      	movs	r2, #8
    2550:	305c      	adds	r0, #92	; 0x5c
    2552:	f7ff fd24 	bl	1f9e <memset>
    2556:	4b05      	ldr	r3, [pc, #20]	; (256c <std.isra.0+0x38>)
    2558:	6224      	str	r4, [r4, #32]
    255a:	6263      	str	r3, [r4, #36]	; 0x24
    255c:	4b04      	ldr	r3, [pc, #16]	; (2570 <std.isra.0+0x3c>)
    255e:	62a3      	str	r3, [r4, #40]	; 0x28
    2560:	4b04      	ldr	r3, [pc, #16]	; (2574 <std.isra.0+0x40>)
    2562:	62e3      	str	r3, [r4, #44]	; 0x2c
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <std.isra.0+0x44>)
    2566:	6323      	str	r3, [r4, #48]	; 0x30
    2568:	bd10      	pop	{r4, pc}
    256a:	bf00      	nop
    256c:	00003111 	.word	0x00003111
    2570:	00003133 	.word	0x00003133
    2574:	0000316b 	.word	0x0000316b
    2578:	0000318f 	.word	0x0000318f

0000257c <__sfmoreglue>:
    257c:	b570      	push	{r4, r5, r6, lr}
    257e:	2368      	movs	r3, #104	; 0x68
    2580:	1e4d      	subs	r5, r1, #1
    2582:	435d      	muls	r5, r3
    2584:	460e      	mov	r6, r1
    2586:	f105 0174 	add.w	r1, r5, #116	; 0x74
    258a:	f000 f92f 	bl	27ec <_malloc_r>
    258e:	4604      	mov	r4, r0
    2590:	b140      	cbz	r0, 25a4 <__sfmoreglue+0x28>
    2592:	2100      	movs	r1, #0
    2594:	e880 0042 	stmia.w	r0, {r1, r6}
    2598:	300c      	adds	r0, #12
    259a:	60a0      	str	r0, [r4, #8]
    259c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    25a0:	f7ff fcfd 	bl	1f9e <memset>
    25a4:	4620      	mov	r0, r4
    25a6:	bd70      	pop	{r4, r5, r6, pc}

000025a8 <__sinit>:
    25a8:	6983      	ldr	r3, [r0, #24]
    25aa:	b510      	push	{r4, lr}
    25ac:	4604      	mov	r4, r0
    25ae:	bb33      	cbnz	r3, 25fe <__sinit+0x56>
    25b0:	6483      	str	r3, [r0, #72]	; 0x48
    25b2:	64c3      	str	r3, [r0, #76]	; 0x4c
    25b4:	6503      	str	r3, [r0, #80]	; 0x50
    25b6:	4b12      	ldr	r3, [pc, #72]	; (2600 <__sinit+0x58>)
    25b8:	4a12      	ldr	r2, [pc, #72]	; (2604 <__sinit+0x5c>)
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	6282      	str	r2, [r0, #40]	; 0x28
    25be:	4298      	cmp	r0, r3
    25c0:	bf04      	itt	eq
    25c2:	2301      	moveq	r3, #1
    25c4:	6183      	streq	r3, [r0, #24]
    25c6:	f000 f81f 	bl	2608 <__sfp>
    25ca:	6060      	str	r0, [r4, #4]
    25cc:	4620      	mov	r0, r4
    25ce:	f000 f81b 	bl	2608 <__sfp>
    25d2:	60a0      	str	r0, [r4, #8]
    25d4:	4620      	mov	r0, r4
    25d6:	f000 f817 	bl	2608 <__sfp>
    25da:	2200      	movs	r2, #0
    25dc:	60e0      	str	r0, [r4, #12]
    25de:	2104      	movs	r1, #4
    25e0:	6860      	ldr	r0, [r4, #4]
    25e2:	f7ff ffa7 	bl	2534 <std.isra.0>
    25e6:	2201      	movs	r2, #1
    25e8:	2109      	movs	r1, #9
    25ea:	68a0      	ldr	r0, [r4, #8]
    25ec:	f7ff ffa2 	bl	2534 <std.isra.0>
    25f0:	2202      	movs	r2, #2
    25f2:	2112      	movs	r1, #18
    25f4:	68e0      	ldr	r0, [r4, #12]
    25f6:	f7ff ff9d 	bl	2534 <std.isra.0>
    25fa:	2301      	movs	r3, #1
    25fc:	61a3      	str	r3, [r4, #24]
    25fe:	bd10      	pop	{r4, pc}
    2600:	00003ce8 	.word	0x00003ce8
    2604:	00002529 	.word	0x00002529

00002608 <__sfp>:
    2608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    260a:	4b1c      	ldr	r3, [pc, #112]	; (267c <__sfp+0x74>)
    260c:	4607      	mov	r7, r0
    260e:	681e      	ldr	r6, [r3, #0]
    2610:	69b3      	ldr	r3, [r6, #24]
    2612:	b913      	cbnz	r3, 261a <__sfp+0x12>
    2614:	4630      	mov	r0, r6
    2616:	f7ff ffc7 	bl	25a8 <__sinit>
    261a:	3648      	adds	r6, #72	; 0x48
    261c:	68b4      	ldr	r4, [r6, #8]
    261e:	6873      	ldr	r3, [r6, #4]
    2620:	3b01      	subs	r3, #1
    2622:	d404      	bmi.n	262e <__sfp+0x26>
    2624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2628:	b17d      	cbz	r5, 264a <__sfp+0x42>
    262a:	3468      	adds	r4, #104	; 0x68
    262c:	e7f8      	b.n	2620 <__sfp+0x18>
    262e:	6833      	ldr	r3, [r6, #0]
    2630:	b10b      	cbz	r3, 2636 <__sfp+0x2e>
    2632:	6836      	ldr	r6, [r6, #0]
    2634:	e7f2      	b.n	261c <__sfp+0x14>
    2636:	2104      	movs	r1, #4
    2638:	4638      	mov	r0, r7
    263a:	f7ff ff9f 	bl	257c <__sfmoreglue>
    263e:	6030      	str	r0, [r6, #0]
    2640:	2800      	cmp	r0, #0
    2642:	d1f6      	bne.n	2632 <__sfp+0x2a>
    2644:	230c      	movs	r3, #12
    2646:	603b      	str	r3, [r7, #0]
    2648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    264e:	81e3      	strh	r3, [r4, #14]
    2650:	2301      	movs	r3, #1
    2652:	81a3      	strh	r3, [r4, #12]
    2654:	6665      	str	r5, [r4, #100]	; 0x64
    2656:	6025      	str	r5, [r4, #0]
    2658:	60a5      	str	r5, [r4, #8]
    265a:	6065      	str	r5, [r4, #4]
    265c:	6125      	str	r5, [r4, #16]
    265e:	6165      	str	r5, [r4, #20]
    2660:	61a5      	str	r5, [r4, #24]
    2662:	2208      	movs	r2, #8
    2664:	4629      	mov	r1, r5
    2666:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    266a:	f7ff fc98 	bl	1f9e <memset>
    266e:	6365      	str	r5, [r4, #52]	; 0x34
    2670:	63a5      	str	r5, [r4, #56]	; 0x38
    2672:	64a5      	str	r5, [r4, #72]	; 0x48
    2674:	64e5      	str	r5, [r4, #76]	; 0x4c
    2676:	4620      	mov	r0, r4
    2678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    267a:	bf00      	nop
    267c:	00003ce8 	.word	0x00003ce8

00002680 <_fwalk_reent>:
    2680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2684:	4680      	mov	r8, r0
    2686:	4689      	mov	r9, r1
    2688:	f100 0448 	add.w	r4, r0, #72	; 0x48
    268c:	2600      	movs	r6, #0
    268e:	b194      	cbz	r4, 26b6 <_fwalk_reent+0x36>
    2690:	68a5      	ldr	r5, [r4, #8]
    2692:	6867      	ldr	r7, [r4, #4]
    2694:	3f01      	subs	r7, #1
    2696:	d40c      	bmi.n	26b2 <_fwalk_reent+0x32>
    2698:	89ab      	ldrh	r3, [r5, #12]
    269a:	2b01      	cmp	r3, #1
    269c:	d907      	bls.n	26ae <_fwalk_reent+0x2e>
    269e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    26a2:	3301      	adds	r3, #1
    26a4:	d003      	beq.n	26ae <_fwalk_reent+0x2e>
    26a6:	4629      	mov	r1, r5
    26a8:	4640      	mov	r0, r8
    26aa:	47c8      	blx	r9
    26ac:	4306      	orrs	r6, r0
    26ae:	3568      	adds	r5, #104	; 0x68
    26b0:	e7f0      	b.n	2694 <_fwalk_reent+0x14>
    26b2:	6824      	ldr	r4, [r4, #0]
    26b4:	e7eb      	b.n	268e <_fwalk_reent+0xe>
    26b6:	4630      	mov	r0, r6
    26b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000026bc <__smakebuf_r>:
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26be:	898b      	ldrh	r3, [r1, #12]
    26c0:	b091      	sub	sp, #68	; 0x44
    26c2:	079d      	lsls	r5, r3, #30
    26c4:	4606      	mov	r6, r0
    26c6:	460c      	mov	r4, r1
    26c8:	d425      	bmi.n	2716 <__smakebuf_r+0x5a>
    26ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    26ce:	2900      	cmp	r1, #0
    26d0:	da08      	bge.n	26e4 <__smakebuf_r+0x28>
    26d2:	89a3      	ldrh	r3, [r4, #12]
    26d4:	2500      	movs	r5, #0
    26d6:	f013 0f80 	tst.w	r3, #128	; 0x80
    26da:	bf14      	ite	ne
    26dc:	2740      	movne	r7, #64	; 0x40
    26de:	f44f 6780 	moveq.w	r7, #1024	; 0x400
    26e2:	e00d      	b.n	2700 <__smakebuf_r+0x44>
    26e4:	aa01      	add	r2, sp, #4
    26e6:	f000 fd79 	bl	31dc <_fstat_r>
    26ea:	2800      	cmp	r0, #0
    26ec:	dbf1      	blt.n	26d2 <__smakebuf_r+0x16>
    26ee:	9d02      	ldr	r5, [sp, #8]
    26f0:	f44f 6780 	mov.w	r7, #1024	; 0x400
    26f4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    26f8:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
    26fc:	424d      	negs	r5, r1
    26fe:	414d      	adcs	r5, r1
    2700:	4639      	mov	r1, r7
    2702:	4630      	mov	r0, r6
    2704:	f000 f872 	bl	27ec <_malloc_r>
    2708:	b960      	cbnz	r0, 2724 <__smakebuf_r+0x68>
    270a:	89a3      	ldrh	r3, [r4, #12]
    270c:	059a      	lsls	r2, r3, #22
    270e:	d41d      	bmi.n	274c <__smakebuf_r+0x90>
    2710:	f043 0302 	orr.w	r3, r3, #2
    2714:	81a3      	strh	r3, [r4, #12]
    2716:	f104 0347 	add.w	r3, r4, #71	; 0x47
    271a:	6023      	str	r3, [r4, #0]
    271c:	6123      	str	r3, [r4, #16]
    271e:	2301      	movs	r3, #1
    2720:	6163      	str	r3, [r4, #20]
    2722:	e013      	b.n	274c <__smakebuf_r+0x90>
    2724:	4b0a      	ldr	r3, [pc, #40]	; (2750 <__smakebuf_r+0x94>)
    2726:	62b3      	str	r3, [r6, #40]	; 0x28
    2728:	89a3      	ldrh	r3, [r4, #12]
    272a:	6020      	str	r0, [r4, #0]
    272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2730:	81a3      	strh	r3, [r4, #12]
    2732:	6120      	str	r0, [r4, #16]
    2734:	6167      	str	r7, [r4, #20]
    2736:	b14d      	cbz	r5, 274c <__smakebuf_r+0x90>
    2738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    273c:	4630      	mov	r0, r6
    273e:	f000 fd5f 	bl	3200 <_isatty_r>
    2742:	b118      	cbz	r0, 274c <__smakebuf_r+0x90>
    2744:	89a3      	ldrh	r3, [r4, #12]
    2746:	f043 0301 	orr.w	r3, r3, #1
    274a:	81a3      	strh	r3, [r4, #12]
    274c:	b011      	add	sp, #68	; 0x44
    274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2750:	00002529 	.word	0x00002529

00002754 <malloc>:
    2754:	4b02      	ldr	r3, [pc, #8]	; (2760 <malloc+0xc>)
    2756:	4601      	mov	r1, r0
    2758:	6818      	ldr	r0, [r3, #0]
    275a:	f000 b847 	b.w	27ec <_malloc_r>
    275e:	bf00      	nop
    2760:	200001e4 	.word	0x200001e4

00002764 <_free_r>:
    2764:	b530      	push	{r4, r5, lr}
    2766:	2900      	cmp	r1, #0
    2768:	d03c      	beq.n	27e4 <_free_r+0x80>
    276a:	f851 2c04 	ldr.w	r2, [r1, #-4]
    276e:	1f0b      	subs	r3, r1, #4
    2770:	491d      	ldr	r1, [pc, #116]	; (27e8 <_free_r+0x84>)
    2772:	2a00      	cmp	r2, #0
    2774:	bfb8      	it	lt
    2776:	189b      	addlt	r3, r3, r2
    2778:	680a      	ldr	r2, [r1, #0]
    277a:	460c      	mov	r4, r1
    277c:	b912      	cbnz	r2, 2784 <_free_r+0x20>
    277e:	605a      	str	r2, [r3, #4]
    2780:	600b      	str	r3, [r1, #0]
    2782:	bd30      	pop	{r4, r5, pc}
    2784:	429a      	cmp	r2, r3
    2786:	d90d      	bls.n	27a4 <_free_r+0x40>
    2788:	6819      	ldr	r1, [r3, #0]
    278a:	1858      	adds	r0, r3, r1
    278c:	4282      	cmp	r2, r0
    278e:	bf01      	itttt	eq
    2790:	6810      	ldreq	r0, [r2, #0]
    2792:	6852      	ldreq	r2, [r2, #4]
    2794:	1809      	addeq	r1, r1, r0
    2796:	6019      	streq	r1, [r3, #0]
    2798:	605a      	str	r2, [r3, #4]
    279a:	6023      	str	r3, [r4, #0]
    279c:	bd30      	pop	{r4, r5, pc}
    279e:	4299      	cmp	r1, r3
    27a0:	d803      	bhi.n	27aa <_free_r+0x46>
    27a2:	460a      	mov	r2, r1
    27a4:	6851      	ldr	r1, [r2, #4]
    27a6:	2900      	cmp	r1, #0
    27a8:	d1f9      	bne.n	279e <_free_r+0x3a>
    27aa:	6814      	ldr	r4, [r2, #0]
    27ac:	1915      	adds	r5, r2, r4
    27ae:	429d      	cmp	r5, r3
    27b0:	d10a      	bne.n	27c8 <_free_r+0x64>
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	4423      	add	r3, r4
    27b6:	18d0      	adds	r0, r2, r3
    27b8:	4281      	cmp	r1, r0
    27ba:	6013      	str	r3, [r2, #0]
    27bc:	d112      	bne.n	27e4 <_free_r+0x80>
    27be:	6808      	ldr	r0, [r1, #0]
    27c0:	4403      	add	r3, r0
    27c2:	6013      	str	r3, [r2, #0]
    27c4:	684b      	ldr	r3, [r1, #4]
    27c6:	e00c      	b.n	27e2 <_free_r+0x7e>
    27c8:	d902      	bls.n	27d0 <_free_r+0x6c>
    27ca:	230c      	movs	r3, #12
    27cc:	6003      	str	r3, [r0, #0]
    27ce:	bd30      	pop	{r4, r5, pc}
    27d0:	6818      	ldr	r0, [r3, #0]
    27d2:	181c      	adds	r4, r3, r0
    27d4:	42a1      	cmp	r1, r4
    27d6:	bf01      	itttt	eq
    27d8:	680c      	ldreq	r4, [r1, #0]
    27da:	6849      	ldreq	r1, [r1, #4]
    27dc:	1900      	addeq	r0, r0, r4
    27de:	6018      	streq	r0, [r3, #0]
    27e0:	6059      	str	r1, [r3, #4]
    27e2:	6053      	str	r3, [r2, #4]
    27e4:	bd30      	pop	{r4, r5, pc}
    27e6:	bf00      	nop
    27e8:	20000478 	.word	0x20000478

000027ec <_malloc_r>:
    27ec:	b570      	push	{r4, r5, r6, lr}
    27ee:	1ccd      	adds	r5, r1, #3
    27f0:	f025 0503 	bic.w	r5, r5, #3
    27f4:	3508      	adds	r5, #8
    27f6:	2d0c      	cmp	r5, #12
    27f8:	bf38      	it	cc
    27fa:	250c      	movcc	r5, #12
    27fc:	2d00      	cmp	r5, #0
    27fe:	4606      	mov	r6, r0
    2800:	da03      	bge.n	280a <_malloc_r+0x1e>
    2802:	230c      	movs	r3, #12
    2804:	6033      	str	r3, [r6, #0]
    2806:	2000      	movs	r0, #0
    2808:	bd70      	pop	{r4, r5, r6, pc}
    280a:	42a9      	cmp	r1, r5
    280c:	d8f9      	bhi.n	2802 <_malloc_r+0x16>
    280e:	4b1f      	ldr	r3, [pc, #124]	; (288c <_malloc_r+0xa0>)
    2810:	681c      	ldr	r4, [r3, #0]
    2812:	461a      	mov	r2, r3
    2814:	4621      	mov	r1, r4
    2816:	b1a1      	cbz	r1, 2842 <_malloc_r+0x56>
    2818:	680b      	ldr	r3, [r1, #0]
    281a:	1b5b      	subs	r3, r3, r5
    281c:	d40e      	bmi.n	283c <_malloc_r+0x50>
    281e:	2b0b      	cmp	r3, #11
    2820:	d903      	bls.n	282a <_malloc_r+0x3e>
    2822:	600b      	str	r3, [r1, #0]
    2824:	18cc      	adds	r4, r1, r3
    2826:	50cd      	str	r5, [r1, r3]
    2828:	e01e      	b.n	2868 <_malloc_r+0x7c>
    282a:	428c      	cmp	r4, r1
    282c:	bf0b      	itete	eq
    282e:	6863      	ldreq	r3, [r4, #4]
    2830:	684b      	ldrne	r3, [r1, #4]
    2832:	6013      	streq	r3, [r2, #0]
    2834:	6063      	strne	r3, [r4, #4]
    2836:	bf18      	it	ne
    2838:	460c      	movne	r4, r1
    283a:	e015      	b.n	2868 <_malloc_r+0x7c>
    283c:	460c      	mov	r4, r1
    283e:	6849      	ldr	r1, [r1, #4]
    2840:	e7e9      	b.n	2816 <_malloc_r+0x2a>
    2842:	4c13      	ldr	r4, [pc, #76]	; (2890 <_malloc_r+0xa4>)
    2844:	6823      	ldr	r3, [r4, #0]
    2846:	b91b      	cbnz	r3, 2850 <_malloc_r+0x64>
    2848:	4630      	mov	r0, r6
    284a:	f000 fc51 	bl	30f0 <_sbrk_r>
    284e:	6020      	str	r0, [r4, #0]
    2850:	4629      	mov	r1, r5
    2852:	4630      	mov	r0, r6
    2854:	f000 fc4c 	bl	30f0 <_sbrk_r>
    2858:	1c43      	adds	r3, r0, #1
    285a:	d0d2      	beq.n	2802 <_malloc_r+0x16>
    285c:	1cc4      	adds	r4, r0, #3
    285e:	f024 0403 	bic.w	r4, r4, #3
    2862:	42a0      	cmp	r0, r4
    2864:	d10a      	bne.n	287c <_malloc_r+0x90>
    2866:	6025      	str	r5, [r4, #0]
    2868:	f104 000b 	add.w	r0, r4, #11
    286c:	1d23      	adds	r3, r4, #4
    286e:	f020 0007 	bic.w	r0, r0, #7
    2872:	1ac3      	subs	r3, r0, r3
    2874:	d009      	beq.n	288a <_malloc_r+0x9e>
    2876:	425a      	negs	r2, r3
    2878:	50e2      	str	r2, [r4, r3]
    287a:	bd70      	pop	{r4, r5, r6, pc}
    287c:	1a21      	subs	r1, r4, r0
    287e:	4630      	mov	r0, r6
    2880:	f000 fc36 	bl	30f0 <_sbrk_r>
    2884:	3001      	adds	r0, #1
    2886:	d1ee      	bne.n	2866 <_malloc_r+0x7a>
    2888:	e7bb      	b.n	2802 <_malloc_r+0x16>
    288a:	bd70      	pop	{r4, r5, r6, pc}
    288c:	20000478 	.word	0x20000478
    2890:	20000474 	.word	0x20000474

00002894 <__ssputs_r>:
    2894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2898:	688e      	ldr	r6, [r1, #8]
    289a:	4682      	mov	sl, r0
    289c:	429e      	cmp	r6, r3
    289e:	460c      	mov	r4, r1
    28a0:	4691      	mov	r9, r2
    28a2:	4698      	mov	r8, r3
    28a4:	d83e      	bhi.n	2924 <__ssputs_r+0x90>
    28a6:	898a      	ldrh	r2, [r1, #12]
    28a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    28ac:	d03a      	beq.n	2924 <__ssputs_r+0x90>
    28ae:	6825      	ldr	r5, [r4, #0]
    28b0:	6909      	ldr	r1, [r1, #16]
    28b2:	2302      	movs	r3, #2
    28b4:	1a6f      	subs	r7, r5, r1
    28b6:	6965      	ldr	r5, [r4, #20]
    28b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    28bc:	fb95 f5f3 	sdiv	r5, r5, r3
    28c0:	1c7b      	adds	r3, r7, #1
    28c2:	4443      	add	r3, r8
    28c4:	429d      	cmp	r5, r3
    28c6:	bf38      	it	cc
    28c8:	461d      	movcc	r5, r3
    28ca:	0553      	lsls	r3, r2, #21
    28cc:	d50f      	bpl.n	28ee <__ssputs_r+0x5a>
    28ce:	4629      	mov	r1, r5
    28d0:	f7ff ff8c 	bl	27ec <_malloc_r>
    28d4:	4606      	mov	r6, r0
    28d6:	b198      	cbz	r0, 2900 <__ssputs_r+0x6c>
    28d8:	463a      	mov	r2, r7
    28da:	6921      	ldr	r1, [r4, #16]
    28dc:	f7ff fb54 	bl	1f88 <memcpy>
    28e0:	89a3      	ldrh	r3, [r4, #12]
    28e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    28e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    28ea:	81a3      	strh	r3, [r4, #12]
    28ec:	e013      	b.n	2916 <__ssputs_r+0x82>
    28ee:	462a      	mov	r2, r5
    28f0:	f000 fcd1 	bl	3296 <_realloc_r>
    28f4:	4606      	mov	r6, r0
    28f6:	b970      	cbnz	r0, 2916 <__ssputs_r+0x82>
    28f8:	6921      	ldr	r1, [r4, #16]
    28fa:	4650      	mov	r0, sl
    28fc:	f7ff ff32 	bl	2764 <_free_r>
    2900:	230c      	movs	r3, #12
    2902:	f8ca 3000 	str.w	r3, [sl]
    2906:	89a3      	ldrh	r3, [r4, #12]
    2908:	f04f 30ff 	mov.w	r0, #4294967295
    290c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2910:	81a3      	strh	r3, [r4, #12]
    2912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2916:	6126      	str	r6, [r4, #16]
    2918:	443e      	add	r6, r7
    291a:	6026      	str	r6, [r4, #0]
    291c:	4646      	mov	r6, r8
    291e:	6165      	str	r5, [r4, #20]
    2920:	1bed      	subs	r5, r5, r7
    2922:	60a5      	str	r5, [r4, #8]
    2924:	4546      	cmp	r6, r8
    2926:	bf28      	it	cs
    2928:	4646      	movcs	r6, r8
    292a:	4649      	mov	r1, r9
    292c:	4632      	mov	r2, r6
    292e:	6820      	ldr	r0, [r4, #0]
    2930:	f000 fc96 	bl	3260 <memmove>
    2934:	68a3      	ldr	r3, [r4, #8]
    2936:	2000      	movs	r0, #0
    2938:	1b9b      	subs	r3, r3, r6
    293a:	60a3      	str	r3, [r4, #8]
    293c:	6823      	ldr	r3, [r4, #0]
    293e:	441e      	add	r6, r3
    2940:	6026      	str	r6, [r4, #0]
    2942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002948 <_svfiprintf_r>:
    2948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    294c:	b09d      	sub	sp, #116	; 0x74
    294e:	9303      	str	r3, [sp, #12]
    2950:	898b      	ldrh	r3, [r1, #12]
    2952:	4680      	mov	r8, r0
    2954:	061c      	lsls	r4, r3, #24
    2956:	460d      	mov	r5, r1
    2958:	4616      	mov	r6, r2
    295a:	d50d      	bpl.n	2978 <_svfiprintf_r+0x30>
    295c:	690b      	ldr	r3, [r1, #16]
    295e:	b95b      	cbnz	r3, 2978 <_svfiprintf_r+0x30>
    2960:	2140      	movs	r1, #64	; 0x40
    2962:	f7ff ff43 	bl	27ec <_malloc_r>
    2966:	6028      	str	r0, [r5, #0]
    2968:	6128      	str	r0, [r5, #16]
    296a:	b918      	cbnz	r0, 2974 <_svfiprintf_r+0x2c>
    296c:	230c      	movs	r3, #12
    296e:	f8c8 3000 	str.w	r3, [r8]
    2972:	e0cd      	b.n	2b10 <_svfiprintf_r+0x1c8>
    2974:	2340      	movs	r3, #64	; 0x40
    2976:	616b      	str	r3, [r5, #20]
    2978:	2300      	movs	r3, #0
    297a:	9309      	str	r3, [sp, #36]	; 0x24
    297c:	2320      	movs	r3, #32
    297e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2982:	f8df b19c 	ldr.w	fp, [pc, #412]	; 2b20 <_svfiprintf_r+0x1d8>
    2986:	2330      	movs	r3, #48	; 0x30
    2988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    298c:	4637      	mov	r7, r6
    298e:	463c      	mov	r4, r7
    2990:	f814 3b01 	ldrb.w	r3, [r4], #1
    2994:	b91b      	cbnz	r3, 299e <_svfiprintf_r+0x56>
    2996:	ebb7 0906 	subs.w	r9, r7, r6
    299a:	d010      	beq.n	29be <_svfiprintf_r+0x76>
    299c:	e003      	b.n	29a6 <_svfiprintf_r+0x5e>
    299e:	2b25      	cmp	r3, #37	; 0x25
    29a0:	d0f9      	beq.n	2996 <_svfiprintf_r+0x4e>
    29a2:	4627      	mov	r7, r4
    29a4:	e7f3      	b.n	298e <_svfiprintf_r+0x46>
    29a6:	464b      	mov	r3, r9
    29a8:	4632      	mov	r2, r6
    29aa:	4629      	mov	r1, r5
    29ac:	4640      	mov	r0, r8
    29ae:	f7ff ff71 	bl	2894 <__ssputs_r>
    29b2:	3001      	adds	r0, #1
    29b4:	f000 80a7 	beq.w	2b06 <_svfiprintf_r+0x1be>
    29b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29ba:	444b      	add	r3, r9
    29bc:	9309      	str	r3, [sp, #36]	; 0x24
    29be:	783b      	ldrb	r3, [r7, #0]
    29c0:	2b00      	cmp	r3, #0
    29c2:	f000 80a0 	beq.w	2b06 <_svfiprintf_r+0x1be>
    29c6:	2300      	movs	r3, #0
    29c8:	f04f 32ff 	mov.w	r2, #4294967295
    29cc:	9304      	str	r3, [sp, #16]
    29ce:	9307      	str	r3, [sp, #28]
    29d0:	9205      	str	r2, [sp, #20]
    29d2:	9306      	str	r3, [sp, #24]
    29d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    29d8:	931a      	str	r3, [sp, #104]	; 0x68
    29da:	2601      	movs	r6, #1
    29dc:	2205      	movs	r2, #5
    29de:	7821      	ldrb	r1, [r4, #0]
    29e0:	484e      	ldr	r0, [pc, #312]	; (2b1c <_svfiprintf_r+0x1d4>)
    29e2:	f000 fc2f 	bl	3244 <memchr>
    29e6:	1c67      	adds	r7, r4, #1
    29e8:	9b04      	ldr	r3, [sp, #16]
    29ea:	b138      	cbz	r0, 29fc <_svfiprintf_r+0xb4>
    29ec:	4a4b      	ldr	r2, [pc, #300]	; (2b1c <_svfiprintf_r+0x1d4>)
    29ee:	463c      	mov	r4, r7
    29f0:	1a80      	subs	r0, r0, r2
    29f2:	fa06 f000 	lsl.w	r0, r6, r0
    29f6:	4318      	orrs	r0, r3
    29f8:	9004      	str	r0, [sp, #16]
    29fa:	e7ef      	b.n	29dc <_svfiprintf_r+0x94>
    29fc:	06d9      	lsls	r1, r3, #27
    29fe:	bf44      	itt	mi
    2a00:	2220      	movmi	r2, #32
    2a02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2a06:	071a      	lsls	r2, r3, #28
    2a08:	bf44      	itt	mi
    2a0a:	222b      	movmi	r2, #43	; 0x2b
    2a0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2a10:	7822      	ldrb	r2, [r4, #0]
    2a12:	2a2a      	cmp	r2, #42	; 0x2a
    2a14:	d003      	beq.n	2a1e <_svfiprintf_r+0xd6>
    2a16:	9a07      	ldr	r2, [sp, #28]
    2a18:	2100      	movs	r1, #0
    2a1a:	200a      	movs	r0, #10
    2a1c:	e00b      	b.n	2a36 <_svfiprintf_r+0xee>
    2a1e:	9a03      	ldr	r2, [sp, #12]
    2a20:	1d11      	adds	r1, r2, #4
    2a22:	6812      	ldr	r2, [r2, #0]
    2a24:	9103      	str	r1, [sp, #12]
    2a26:	2a00      	cmp	r2, #0
    2a28:	da10      	bge.n	2a4c <_svfiprintf_r+0x104>
    2a2a:	4252      	negs	r2, r2
    2a2c:	f043 0002 	orr.w	r0, r3, #2
    2a30:	9207      	str	r2, [sp, #28]
    2a32:	9004      	str	r0, [sp, #16]
    2a34:	e00b      	b.n	2a4e <_svfiprintf_r+0x106>
    2a36:	4627      	mov	r7, r4
    2a38:	783b      	ldrb	r3, [r7, #0]
    2a3a:	3401      	adds	r4, #1
    2a3c:	3b30      	subs	r3, #48	; 0x30
    2a3e:	2b09      	cmp	r3, #9
    2a40:	d803      	bhi.n	2a4a <_svfiprintf_r+0x102>
    2a42:	fb00 3202 	mla	r2, r0, r2, r3
    2a46:	2101      	movs	r1, #1
    2a48:	e7f5      	b.n	2a36 <_svfiprintf_r+0xee>
    2a4a:	b101      	cbz	r1, 2a4e <_svfiprintf_r+0x106>
    2a4c:	9207      	str	r2, [sp, #28]
    2a4e:	783b      	ldrb	r3, [r7, #0]
    2a50:	2b2e      	cmp	r3, #46	; 0x2e
    2a52:	d11e      	bne.n	2a92 <_svfiprintf_r+0x14a>
    2a54:	787b      	ldrb	r3, [r7, #1]
    2a56:	2b2a      	cmp	r3, #42	; 0x2a
    2a58:	d10a      	bne.n	2a70 <_svfiprintf_r+0x128>
    2a5a:	9b03      	ldr	r3, [sp, #12]
    2a5c:	3702      	adds	r7, #2
    2a5e:	1d1a      	adds	r2, r3, #4
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	9203      	str	r2, [sp, #12]
    2a64:	2b00      	cmp	r3, #0
    2a66:	bfb8      	it	lt
    2a68:	f04f 33ff 	movlt.w	r3, #4294967295
    2a6c:	9305      	str	r3, [sp, #20]
    2a6e:	e010      	b.n	2a92 <_svfiprintf_r+0x14a>
    2a70:	2300      	movs	r3, #0
    2a72:	4619      	mov	r1, r3
    2a74:	9305      	str	r3, [sp, #20]
    2a76:	1c78      	adds	r0, r7, #1
    2a78:	240a      	movs	r4, #10
    2a7a:	4607      	mov	r7, r0
    2a7c:	783a      	ldrb	r2, [r7, #0]
    2a7e:	3001      	adds	r0, #1
    2a80:	3a30      	subs	r2, #48	; 0x30
    2a82:	2a09      	cmp	r2, #9
    2a84:	d803      	bhi.n	2a8e <_svfiprintf_r+0x146>
    2a86:	fb04 2101 	mla	r1, r4, r1, r2
    2a8a:	2301      	movs	r3, #1
    2a8c:	e7f5      	b.n	2a7a <_svfiprintf_r+0x132>
    2a8e:	b103      	cbz	r3, 2a92 <_svfiprintf_r+0x14a>
    2a90:	9105      	str	r1, [sp, #20]
    2a92:	2203      	movs	r2, #3
    2a94:	7839      	ldrb	r1, [r7, #0]
    2a96:	4822      	ldr	r0, [pc, #136]	; (2b20 <_svfiprintf_r+0x1d8>)
    2a98:	f000 fbd4 	bl	3244 <memchr>
    2a9c:	b140      	cbz	r0, 2ab0 <_svfiprintf_r+0x168>
    2a9e:	2340      	movs	r3, #64	; 0x40
    2aa0:	ebcb 0000 	rsb	r0, fp, r0
    2aa4:	fa03 f000 	lsl.w	r0, r3, r0
    2aa8:	9b04      	ldr	r3, [sp, #16]
    2aaa:	3701      	adds	r7, #1
    2aac:	4318      	orrs	r0, r3
    2aae:	9004      	str	r0, [sp, #16]
    2ab0:	7839      	ldrb	r1, [r7, #0]
    2ab2:	2206      	movs	r2, #6
    2ab4:	481b      	ldr	r0, [pc, #108]	; (2b24 <_svfiprintf_r+0x1dc>)
    2ab6:	1c7e      	adds	r6, r7, #1
    2ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2abc:	f000 fbc2 	bl	3244 <memchr>
    2ac0:	b188      	cbz	r0, 2ae6 <_svfiprintf_r+0x19e>
    2ac2:	4b19      	ldr	r3, [pc, #100]	; (2b28 <_svfiprintf_r+0x1e0>)
    2ac4:	b933      	cbnz	r3, 2ad4 <_svfiprintf_r+0x18c>
    2ac6:	9b03      	ldr	r3, [sp, #12]
    2ac8:	3307      	adds	r3, #7
    2aca:	f023 0307 	bic.w	r3, r3, #7
    2ace:	3308      	adds	r3, #8
    2ad0:	9303      	str	r3, [sp, #12]
    2ad2:	e014      	b.n	2afe <_svfiprintf_r+0x1b6>
    2ad4:	ab03      	add	r3, sp, #12
    2ad6:	9300      	str	r3, [sp, #0]
    2ad8:	462a      	mov	r2, r5
    2ada:	4b14      	ldr	r3, [pc, #80]	; (2b2c <_svfiprintf_r+0x1e4>)
    2adc:	a904      	add	r1, sp, #16
    2ade:	4640      	mov	r0, r8
    2ae0:	f3af 8000 	nop.w
    2ae4:	e007      	b.n	2af6 <_svfiprintf_r+0x1ae>
    2ae6:	ab03      	add	r3, sp, #12
    2ae8:	9300      	str	r3, [sp, #0]
    2aea:	462a      	mov	r2, r5
    2aec:	4b0f      	ldr	r3, [pc, #60]	; (2b2c <_svfiprintf_r+0x1e4>)
    2aee:	a904      	add	r1, sp, #16
    2af0:	4640      	mov	r0, r8
    2af2:	f000 f9d7 	bl	2ea4 <_printf_i>
    2af6:	f1b0 3fff 	cmp.w	r0, #4294967295
    2afa:	4682      	mov	sl, r0
    2afc:	d003      	beq.n	2b06 <_svfiprintf_r+0x1be>
    2afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b00:	4453      	add	r3, sl
    2b02:	9309      	str	r3, [sp, #36]	; 0x24
    2b04:	e742      	b.n	298c <_svfiprintf_r+0x44>
    2b06:	89ab      	ldrh	r3, [r5, #12]
    2b08:	065b      	lsls	r3, r3, #25
    2b0a:	d401      	bmi.n	2b10 <_svfiprintf_r+0x1c8>
    2b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b0e:	e001      	b.n	2b14 <_svfiprintf_r+0x1cc>
    2b10:	f04f 30ff 	mov.w	r0, #4294967295
    2b14:	b01d      	add	sp, #116	; 0x74
    2b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b1a:	bf00      	nop
    2b1c:	00003d4c 	.word	0x00003d4c
    2b20:	00003d52 	.word	0x00003d52
    2b24:	00003d56 	.word	0x00003d56
    2b28:	00000000 	.word	0x00000000
    2b2c:	00002895 	.word	0x00002895

00002b30 <__sfputc_r>:
    2b30:	6893      	ldr	r3, [r2, #8]
    2b32:	b410      	push	{r4}
    2b34:	3b01      	subs	r3, #1
    2b36:	2b00      	cmp	r3, #0
    2b38:	6093      	str	r3, [r2, #8]
    2b3a:	da08      	bge.n	2b4e <__sfputc_r+0x1e>
    2b3c:	6994      	ldr	r4, [r2, #24]
    2b3e:	42a3      	cmp	r3, r4
    2b40:	db02      	blt.n	2b48 <__sfputc_r+0x18>
    2b42:	b2cb      	uxtb	r3, r1
    2b44:	2b0a      	cmp	r3, #10
    2b46:	d102      	bne.n	2b4e <__sfputc_r+0x1e>
    2b48:	bc10      	pop	{r4}
    2b4a:	f7ff bb7d 	b.w	2248 <__swbuf_r>
    2b4e:	6813      	ldr	r3, [r2, #0]
    2b50:	1c58      	adds	r0, r3, #1
    2b52:	6010      	str	r0, [r2, #0]
    2b54:	7019      	strb	r1, [r3, #0]
    2b56:	b2c8      	uxtb	r0, r1
    2b58:	bc10      	pop	{r4}
    2b5a:	4770      	bx	lr

00002b5c <__sfputs_r>:
    2b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5e:	4606      	mov	r6, r0
    2b60:	460f      	mov	r7, r1
    2b62:	4614      	mov	r4, r2
    2b64:	18d5      	adds	r5, r2, r3
    2b66:	42ac      	cmp	r4, r5
    2b68:	d008      	beq.n	2b7c <__sfputs_r+0x20>
    2b6a:	463a      	mov	r2, r7
    2b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
    2b70:	4630      	mov	r0, r6
    2b72:	f7ff ffdd 	bl	2b30 <__sfputc_r>
    2b76:	1c43      	adds	r3, r0, #1
    2b78:	d1f5      	bne.n	2b66 <__sfputs_r+0xa>
    2b7a:	e000      	b.n	2b7e <__sfputs_r+0x22>
    2b7c:	2000      	movs	r0, #0
    2b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002b80 <_vfiprintf_r>:
    2b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b84:	b09d      	sub	sp, #116	; 0x74
    2b86:	460c      	mov	r4, r1
    2b88:	4617      	mov	r7, r2
    2b8a:	9303      	str	r3, [sp, #12]
    2b8c:	4606      	mov	r6, r0
    2b8e:	b118      	cbz	r0, 2b98 <_vfiprintf_r+0x18>
    2b90:	6983      	ldr	r3, [r0, #24]
    2b92:	b90b      	cbnz	r3, 2b98 <_vfiprintf_r+0x18>
    2b94:	f7ff fd08 	bl	25a8 <__sinit>
    2b98:	4b7f      	ldr	r3, [pc, #508]	; (2d98 <_vfiprintf_r+0x218>)
    2b9a:	429c      	cmp	r4, r3
    2b9c:	d101      	bne.n	2ba2 <_vfiprintf_r+0x22>
    2b9e:	6874      	ldr	r4, [r6, #4]
    2ba0:	e008      	b.n	2bb4 <_vfiprintf_r+0x34>
    2ba2:	4b7e      	ldr	r3, [pc, #504]	; (2d9c <_vfiprintf_r+0x21c>)
    2ba4:	429c      	cmp	r4, r3
    2ba6:	d101      	bne.n	2bac <_vfiprintf_r+0x2c>
    2ba8:	68b4      	ldr	r4, [r6, #8]
    2baa:	e003      	b.n	2bb4 <_vfiprintf_r+0x34>
    2bac:	4b7c      	ldr	r3, [pc, #496]	; (2da0 <_vfiprintf_r+0x220>)
    2bae:	429c      	cmp	r4, r3
    2bb0:	bf08      	it	eq
    2bb2:	68f4      	ldreq	r4, [r6, #12]
    2bb4:	89a3      	ldrh	r3, [r4, #12]
    2bb6:	0718      	lsls	r0, r3, #28
    2bb8:	d50c      	bpl.n	2bd4 <_vfiprintf_r+0x54>
    2bba:	6923      	ldr	r3, [r4, #16]
    2bbc:	b153      	cbz	r3, 2bd4 <_vfiprintf_r+0x54>
    2bbe:	2300      	movs	r3, #0
    2bc0:	9309      	str	r3, [sp, #36]	; 0x24
    2bc2:	2320      	movs	r3, #32
    2bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2bc8:	2330      	movs	r3, #48	; 0x30
    2bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2bce:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 2da4 <_vfiprintf_r+0x224>
    2bd2:	e044      	b.n	2c5e <_vfiprintf_r+0xde>
    2bd4:	4621      	mov	r1, r4
    2bd6:	4630      	mov	r0, r6
    2bd8:	f7ff fb8a 	bl	22f0 <__swsetup_r>
    2bdc:	2800      	cmp	r0, #0
    2bde:	d0ee      	beq.n	2bbe <_vfiprintf_r+0x3e>
    2be0:	f04f 30ff 	mov.w	r0, #4294967295
    2be4:	e0d5      	b.n	2d92 <_vfiprintf_r+0x212>
    2be6:	9a03      	ldr	r2, [sp, #12]
    2be8:	1d11      	adds	r1, r2, #4
    2bea:	6812      	ldr	r2, [r2, #0]
    2bec:	9103      	str	r1, [sp, #12]
    2bee:	2a00      	cmp	r2, #0
    2bf0:	f280 808c 	bge.w	2d0c <_vfiprintf_r+0x18c>
    2bf4:	4252      	negs	r2, r2
    2bf6:	f043 0002 	orr.w	r0, r3, #2
    2bfa:	9207      	str	r2, [sp, #28]
    2bfc:	9004      	str	r0, [sp, #16]
    2bfe:	f898 3000 	ldrb.w	r3, [r8]
    2c02:	2b2e      	cmp	r3, #46	; 0x2e
    2c04:	f000 8084 	beq.w	2d10 <_vfiprintf_r+0x190>
    2c08:	2203      	movs	r2, #3
    2c0a:	f898 1000 	ldrb.w	r1, [r8]
    2c0e:	4865      	ldr	r0, [pc, #404]	; (2da4 <_vfiprintf_r+0x224>)
    2c10:	f000 fb18 	bl	3244 <memchr>
    2c14:	b148      	cbz	r0, 2c2a <_vfiprintf_r+0xaa>
    2c16:	2340      	movs	r3, #64	; 0x40
    2c18:	ebcb 0000 	rsb	r0, fp, r0
    2c1c:	fa03 f000 	lsl.w	r0, r3, r0
    2c20:	9b04      	ldr	r3, [sp, #16]
    2c22:	f108 0801 	add.w	r8, r8, #1
    2c26:	4318      	orrs	r0, r3
    2c28:	9004      	str	r0, [sp, #16]
    2c2a:	f898 1000 	ldrb.w	r1, [r8]
    2c2e:	2206      	movs	r2, #6
    2c30:	485d      	ldr	r0, [pc, #372]	; (2da8 <_vfiprintf_r+0x228>)
    2c32:	f108 0701 	add.w	r7, r8, #1
    2c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2c3a:	f000 fb03 	bl	3244 <memchr>
    2c3e:	2800      	cmp	r0, #0
    2c40:	f000 8095 	beq.w	2d6e <_vfiprintf_r+0x1ee>
    2c44:	4b59      	ldr	r3, [pc, #356]	; (2dac <_vfiprintf_r+0x22c>)
    2c46:	2b00      	cmp	r3, #0
    2c48:	f040 8088 	bne.w	2d5c <_vfiprintf_r+0x1dc>
    2c4c:	9b03      	ldr	r3, [sp, #12]
    2c4e:	3307      	adds	r3, #7
    2c50:	f023 0307 	bic.w	r3, r3, #7
    2c54:	3308      	adds	r3, #8
    2c56:	9303      	str	r3, [sp, #12]
    2c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c5a:	4453      	add	r3, sl
    2c5c:	9309      	str	r3, [sp, #36]	; 0x24
    2c5e:	46b8      	mov	r8, r7
    2c60:	4645      	mov	r5, r8
    2c62:	f815 3b01 	ldrb.w	r3, [r5], #1
    2c66:	b91b      	cbnz	r3, 2c70 <_vfiprintf_r+0xf0>
    2c68:	ebb8 0907 	subs.w	r9, r8, r7
    2c6c:	d00f      	beq.n	2c8e <_vfiprintf_r+0x10e>
    2c6e:	e003      	b.n	2c78 <_vfiprintf_r+0xf8>
    2c70:	2b25      	cmp	r3, #37	; 0x25
    2c72:	d0f9      	beq.n	2c68 <_vfiprintf_r+0xe8>
    2c74:	46a8      	mov	r8, r5
    2c76:	e7f3      	b.n	2c60 <_vfiprintf_r+0xe0>
    2c78:	464b      	mov	r3, r9
    2c7a:	463a      	mov	r2, r7
    2c7c:	4621      	mov	r1, r4
    2c7e:	4630      	mov	r0, r6
    2c80:	f7ff ff6c 	bl	2b5c <__sfputs_r>
    2c84:	3001      	adds	r0, #1
    2c86:	d07f      	beq.n	2d88 <_vfiprintf_r+0x208>
    2c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c8a:	444b      	add	r3, r9
    2c8c:	9309      	str	r3, [sp, #36]	; 0x24
    2c8e:	f898 3000 	ldrb.w	r3, [r8]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d078      	beq.n	2d88 <_vfiprintf_r+0x208>
    2c96:	2300      	movs	r3, #0
    2c98:	f04f 32ff 	mov.w	r2, #4294967295
    2c9c:	9304      	str	r3, [sp, #16]
    2c9e:	9307      	str	r3, [sp, #28]
    2ca0:	9205      	str	r2, [sp, #20]
    2ca2:	9306      	str	r3, [sp, #24]
    2ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2ca8:	931a      	str	r3, [sp, #104]	; 0x68
    2caa:	2701      	movs	r7, #1
    2cac:	2205      	movs	r2, #5
    2cae:	7829      	ldrb	r1, [r5, #0]
    2cb0:	483f      	ldr	r0, [pc, #252]	; (2db0 <_vfiprintf_r+0x230>)
    2cb2:	f000 fac7 	bl	3244 <memchr>
    2cb6:	f105 0801 	add.w	r8, r5, #1
    2cba:	9b04      	ldr	r3, [sp, #16]
    2cbc:	b138      	cbz	r0, 2cce <_vfiprintf_r+0x14e>
    2cbe:	4a3c      	ldr	r2, [pc, #240]	; (2db0 <_vfiprintf_r+0x230>)
    2cc0:	4645      	mov	r5, r8
    2cc2:	1a80      	subs	r0, r0, r2
    2cc4:	fa07 f000 	lsl.w	r0, r7, r0
    2cc8:	4318      	orrs	r0, r3
    2cca:	9004      	str	r0, [sp, #16]
    2ccc:	e7ee      	b.n	2cac <_vfiprintf_r+0x12c>
    2cce:	06d9      	lsls	r1, r3, #27
    2cd0:	bf44      	itt	mi
    2cd2:	2220      	movmi	r2, #32
    2cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2cd8:	071a      	lsls	r2, r3, #28
    2cda:	bf44      	itt	mi
    2cdc:	222b      	movmi	r2, #43	; 0x2b
    2cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2ce2:	782a      	ldrb	r2, [r5, #0]
    2ce4:	2a2a      	cmp	r2, #42	; 0x2a
    2ce6:	f43f af7e 	beq.w	2be6 <_vfiprintf_r+0x66>
    2cea:	9a07      	ldr	r2, [sp, #28]
    2cec:	2100      	movs	r1, #0
    2cee:	200a      	movs	r0, #10
    2cf0:	46a8      	mov	r8, r5
    2cf2:	f898 3000 	ldrb.w	r3, [r8]
    2cf6:	3501      	adds	r5, #1
    2cf8:	3b30      	subs	r3, #48	; 0x30
    2cfa:	2b09      	cmp	r3, #9
    2cfc:	d803      	bhi.n	2d06 <_vfiprintf_r+0x186>
    2cfe:	fb00 3202 	mla	r2, r0, r2, r3
    2d02:	2101      	movs	r1, #1
    2d04:	e7f4      	b.n	2cf0 <_vfiprintf_r+0x170>
    2d06:	2900      	cmp	r1, #0
    2d08:	f43f af79 	beq.w	2bfe <_vfiprintf_r+0x7e>
    2d0c:	9207      	str	r2, [sp, #28]
    2d0e:	e776      	b.n	2bfe <_vfiprintf_r+0x7e>
    2d10:	f898 3001 	ldrb.w	r3, [r8, #1]
    2d14:	2b2a      	cmp	r3, #42	; 0x2a
    2d16:	d10b      	bne.n	2d30 <_vfiprintf_r+0x1b0>
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	f108 0802 	add.w	r8, r8, #2
    2d1e:	1d1a      	adds	r2, r3, #4
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	9203      	str	r2, [sp, #12]
    2d24:	2b00      	cmp	r3, #0
    2d26:	bfb8      	it	lt
    2d28:	f04f 33ff 	movlt.w	r3, #4294967295
    2d2c:	9305      	str	r3, [sp, #20]
    2d2e:	e76b      	b.n	2c08 <_vfiprintf_r+0x88>
    2d30:	2300      	movs	r3, #0
    2d32:	4619      	mov	r1, r3
    2d34:	9305      	str	r3, [sp, #20]
    2d36:	f108 0001 	add.w	r0, r8, #1
    2d3a:	250a      	movs	r5, #10
    2d3c:	4680      	mov	r8, r0
    2d3e:	f898 2000 	ldrb.w	r2, [r8]
    2d42:	3001      	adds	r0, #1
    2d44:	3a30      	subs	r2, #48	; 0x30
    2d46:	2a09      	cmp	r2, #9
    2d48:	d803      	bhi.n	2d52 <_vfiprintf_r+0x1d2>
    2d4a:	fb05 2101 	mla	r1, r5, r1, r2
    2d4e:	2301      	movs	r3, #1
    2d50:	e7f4      	b.n	2d3c <_vfiprintf_r+0x1bc>
    2d52:	2b00      	cmp	r3, #0
    2d54:	f43f af58 	beq.w	2c08 <_vfiprintf_r+0x88>
    2d58:	9105      	str	r1, [sp, #20]
    2d5a:	e755      	b.n	2c08 <_vfiprintf_r+0x88>
    2d5c:	ab03      	add	r3, sp, #12
    2d5e:	9300      	str	r3, [sp, #0]
    2d60:	4622      	mov	r2, r4
    2d62:	4b14      	ldr	r3, [pc, #80]	; (2db4 <_vfiprintf_r+0x234>)
    2d64:	a904      	add	r1, sp, #16
    2d66:	4630      	mov	r0, r6
    2d68:	f3af 8000 	nop.w
    2d6c:	e007      	b.n	2d7e <_vfiprintf_r+0x1fe>
    2d6e:	ab03      	add	r3, sp, #12
    2d70:	9300      	str	r3, [sp, #0]
    2d72:	4622      	mov	r2, r4
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <_vfiprintf_r+0x234>)
    2d76:	a904      	add	r1, sp, #16
    2d78:	4630      	mov	r0, r6
    2d7a:	f000 f893 	bl	2ea4 <_printf_i>
    2d7e:	f1b0 3fff 	cmp.w	r0, #4294967295
    2d82:	4682      	mov	sl, r0
    2d84:	f47f af68 	bne.w	2c58 <_vfiprintf_r+0xd8>
    2d88:	89a3      	ldrh	r3, [r4, #12]
    2d8a:	065b      	lsls	r3, r3, #25
    2d8c:	f53f af28 	bmi.w	2be0 <_vfiprintf_r+0x60>
    2d90:	9809      	ldr	r0, [sp, #36]	; 0x24
    2d92:	b01d      	add	sp, #116	; 0x74
    2d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d98:	00003cec 	.word	0x00003cec
    2d9c:	00003d0c 	.word	0x00003d0c
    2da0:	00003d2c 	.word	0x00003d2c
    2da4:	00003d52 	.word	0x00003d52
    2da8:	00003d56 	.word	0x00003d56
    2dac:	00000000 	.word	0x00000000
    2db0:	00003d4c 	.word	0x00003d4c
    2db4:	00002b5d 	.word	0x00002b5d

00002db8 <_printf_common>:
    2db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dbc:	4691      	mov	r9, r2
    2dbe:	461f      	mov	r7, r3
    2dc0:	690a      	ldr	r2, [r1, #16]
    2dc2:	688b      	ldr	r3, [r1, #8]
    2dc4:	4606      	mov	r6, r0
    2dc6:	4293      	cmp	r3, r2
    2dc8:	bfb8      	it	lt
    2dca:	4613      	movlt	r3, r2
    2dcc:	f8c9 3000 	str.w	r3, [r9]
    2dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2dd4:	460c      	mov	r4, r1
    2dd6:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2dda:	b112      	cbz	r2, 2de2 <_printf_common+0x2a>
    2ddc:	3301      	adds	r3, #1
    2dde:	f8c9 3000 	str.w	r3, [r9]
    2de2:	6823      	ldr	r3, [r4, #0]
    2de4:	0699      	lsls	r1, r3, #26
    2de6:	bf42      	ittt	mi
    2de8:	f8d9 3000 	ldrmi.w	r3, [r9]
    2dec:	3302      	addmi	r3, #2
    2dee:	f8c9 3000 	strmi.w	r3, [r9]
    2df2:	6825      	ldr	r5, [r4, #0]
    2df4:	f015 0506 	ands.w	r5, r5, #6
    2df8:	d110      	bne.n	2e1c <_printf_common+0x64>
    2dfa:	f104 0a19 	add.w	sl, r4, #25
    2dfe:	e007      	b.n	2e10 <_printf_common+0x58>
    2e00:	2301      	movs	r3, #1
    2e02:	4652      	mov	r2, sl
    2e04:	4639      	mov	r1, r7
    2e06:	4630      	mov	r0, r6
    2e08:	47c0      	blx	r8
    2e0a:	3001      	adds	r0, #1
    2e0c:	d01a      	beq.n	2e44 <_printf_common+0x8c>
    2e0e:	3501      	adds	r5, #1
    2e10:	68e3      	ldr	r3, [r4, #12]
    2e12:	f8d9 2000 	ldr.w	r2, [r9]
    2e16:	1a9b      	subs	r3, r3, r2
    2e18:	429d      	cmp	r5, r3
    2e1a:	dbf1      	blt.n	2e00 <_printf_common+0x48>
    2e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2e20:	6822      	ldr	r2, [r4, #0]
    2e22:	3300      	adds	r3, #0
    2e24:	bf18      	it	ne
    2e26:	2301      	movne	r3, #1
    2e28:	0692      	lsls	r2, r2, #26
    2e2a:	d50f      	bpl.n	2e4c <_printf_common+0x94>
    2e2c:	18e1      	adds	r1, r4, r3
    2e2e:	2030      	movs	r0, #48	; 0x30
    2e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2e34:	1c5a      	adds	r2, r3, #1
    2e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2e3a:	4422      	add	r2, r4
    2e3c:	3302      	adds	r3, #2
    2e3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2e42:	e003      	b.n	2e4c <_printf_common+0x94>
    2e44:	f04f 30ff 	mov.w	r0, #4294967295
    2e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2e50:	4639      	mov	r1, r7
    2e52:	4630      	mov	r0, r6
    2e54:	47c0      	blx	r8
    2e56:	3001      	adds	r0, #1
    2e58:	d0f4      	beq.n	2e44 <_printf_common+0x8c>
    2e5a:	6822      	ldr	r2, [r4, #0]
    2e5c:	f8d9 5000 	ldr.w	r5, [r9]
    2e60:	68e3      	ldr	r3, [r4, #12]
    2e62:	f002 0206 	and.w	r2, r2, #6
    2e66:	2a04      	cmp	r2, #4
    2e68:	bf08      	it	eq
    2e6a:	1b5d      	subeq	r5, r3, r5
    2e6c:	6922      	ldr	r2, [r4, #16]
    2e6e:	68a3      	ldr	r3, [r4, #8]
    2e70:	bf0c      	ite	eq
    2e72:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2e76:	2500      	movne	r5, #0
    2e78:	4293      	cmp	r3, r2
    2e7a:	bfc4      	itt	gt
    2e7c:	1a9b      	subgt	r3, r3, r2
    2e7e:	18ed      	addgt	r5, r5, r3
    2e80:	f04f 0900 	mov.w	r9, #0
    2e84:	341a      	adds	r4, #26
    2e86:	454d      	cmp	r5, r9
    2e88:	d009      	beq.n	2e9e <_printf_common+0xe6>
    2e8a:	2301      	movs	r3, #1
    2e8c:	4622      	mov	r2, r4
    2e8e:	4639      	mov	r1, r7
    2e90:	4630      	mov	r0, r6
    2e92:	47c0      	blx	r8
    2e94:	3001      	adds	r0, #1
    2e96:	d0d5      	beq.n	2e44 <_printf_common+0x8c>
    2e98:	f109 0901 	add.w	r9, r9, #1
    2e9c:	e7f3      	b.n	2e86 <_printf_common+0xce>
    2e9e:	2000      	movs	r0, #0
    2ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002ea4 <_printf_i>:
    2ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ea8:	4617      	mov	r7, r2
    2eaa:	7e0a      	ldrb	r2, [r1, #24]
    2eac:	b085      	sub	sp, #20
    2eae:	2a6e      	cmp	r2, #110	; 0x6e
    2eb0:	4698      	mov	r8, r3
    2eb2:	4606      	mov	r6, r0
    2eb4:	460c      	mov	r4, r1
    2eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2eb8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2ebc:	f000 80ae 	beq.w	301c <_printf_i+0x178>
    2ec0:	d811      	bhi.n	2ee6 <_printf_i+0x42>
    2ec2:	2a63      	cmp	r2, #99	; 0x63
    2ec4:	d022      	beq.n	2f0c <_printf_i+0x68>
    2ec6:	d809      	bhi.n	2edc <_printf_i+0x38>
    2ec8:	2a00      	cmp	r2, #0
    2eca:	f000 80bb 	beq.w	3044 <_printf_i+0x1a0>
    2ece:	2a58      	cmp	r2, #88	; 0x58
    2ed0:	f040 80ca 	bne.w	3068 <_printf_i+0x1c4>
    2ed4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    2ed8:	4983      	ldr	r1, [pc, #524]	; (30e8 <_printf_i+0x244>)
    2eda:	e055      	b.n	2f88 <_printf_i+0xe4>
    2edc:	2a64      	cmp	r2, #100	; 0x64
    2ede:	d01e      	beq.n	2f1e <_printf_i+0x7a>
    2ee0:	2a69      	cmp	r2, #105	; 0x69
    2ee2:	d01c      	beq.n	2f1e <_printf_i+0x7a>
    2ee4:	e0c0      	b.n	3068 <_printf_i+0x1c4>
    2ee6:	2a73      	cmp	r2, #115	; 0x73
    2ee8:	f000 80b0 	beq.w	304c <_printf_i+0x1a8>
    2eec:	d809      	bhi.n	2f02 <_printf_i+0x5e>
    2eee:	2a6f      	cmp	r2, #111	; 0x6f
    2ef0:	d02e      	beq.n	2f50 <_printf_i+0xac>
    2ef2:	2a70      	cmp	r2, #112	; 0x70
    2ef4:	f040 80b8 	bne.w	3068 <_printf_i+0x1c4>
    2ef8:	680a      	ldr	r2, [r1, #0]
    2efa:	f042 0220 	orr.w	r2, r2, #32
    2efe:	600a      	str	r2, [r1, #0]
    2f00:	e03e      	b.n	2f80 <_printf_i+0xdc>
    2f02:	2a75      	cmp	r2, #117	; 0x75
    2f04:	d024      	beq.n	2f50 <_printf_i+0xac>
    2f06:	2a78      	cmp	r2, #120	; 0x78
    2f08:	d03a      	beq.n	2f80 <_printf_i+0xdc>
    2f0a:	e0ad      	b.n	3068 <_printf_i+0x1c4>
    2f0c:	681a      	ldr	r2, [r3, #0]
    2f0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    2f12:	1d11      	adds	r1, r2, #4
    2f14:	6019      	str	r1, [r3, #0]
    2f16:	6813      	ldr	r3, [r2, #0]
    2f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2f1c:	e0a8      	b.n	3070 <_printf_i+0x1cc>
    2f1e:	6821      	ldr	r1, [r4, #0]
    2f20:	681a      	ldr	r2, [r3, #0]
    2f22:	f011 0f80 	tst.w	r1, #128	; 0x80
    2f26:	d002      	beq.n	2f2e <_printf_i+0x8a>
    2f28:	1d11      	adds	r1, r2, #4
    2f2a:	6019      	str	r1, [r3, #0]
    2f2c:	e008      	b.n	2f40 <_printf_i+0x9c>
    2f2e:	f011 0f40 	tst.w	r1, #64	; 0x40
    2f32:	f102 0104 	add.w	r1, r2, #4
    2f36:	6019      	str	r1, [r3, #0]
    2f38:	d002      	beq.n	2f40 <_printf_i+0x9c>
    2f3a:	f9b2 3000 	ldrsh.w	r3, [r2]
    2f3e:	e000      	b.n	2f42 <_printf_i+0x9e>
    2f40:	6813      	ldr	r3, [r2, #0]
    2f42:	2b00      	cmp	r3, #0
    2f44:	da3c      	bge.n	2fc0 <_printf_i+0x11c>
    2f46:	222d      	movs	r2, #45	; 0x2d
    2f48:	425b      	negs	r3, r3
    2f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2f4e:	e037      	b.n	2fc0 <_printf_i+0x11c>
    2f50:	6821      	ldr	r1, [r4, #0]
    2f52:	681a      	ldr	r2, [r3, #0]
    2f54:	f011 0f80 	tst.w	r1, #128	; 0x80
    2f58:	d002      	beq.n	2f60 <_printf_i+0xbc>
    2f5a:	1d11      	adds	r1, r2, #4
    2f5c:	6019      	str	r1, [r3, #0]
    2f5e:	e007      	b.n	2f70 <_printf_i+0xcc>
    2f60:	f011 0f40 	tst.w	r1, #64	; 0x40
    2f64:	f102 0104 	add.w	r1, r2, #4
    2f68:	6019      	str	r1, [r3, #0]
    2f6a:	d001      	beq.n	2f70 <_printf_i+0xcc>
    2f6c:	8813      	ldrh	r3, [r2, #0]
    2f6e:	e000      	b.n	2f72 <_printf_i+0xce>
    2f70:	6813      	ldr	r3, [r2, #0]
    2f72:	7e22      	ldrb	r2, [r4, #24]
    2f74:	495c      	ldr	r1, [pc, #368]	; (30e8 <_printf_i+0x244>)
    2f76:	2a6f      	cmp	r2, #111	; 0x6f
    2f78:	bf14      	ite	ne
    2f7a:	220a      	movne	r2, #10
    2f7c:	2208      	moveq	r2, #8
    2f7e:	e01b      	b.n	2fb8 <_printf_i+0x114>
    2f80:	2278      	movs	r2, #120	; 0x78
    2f82:	495a      	ldr	r1, [pc, #360]	; (30ec <_printf_i+0x248>)
    2f84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2f88:	6822      	ldr	r2, [r4, #0]
    2f8a:	6818      	ldr	r0, [r3, #0]
    2f8c:	f012 0f80 	tst.w	r2, #128	; 0x80
    2f90:	f100 0504 	add.w	r5, r0, #4
    2f94:	601d      	str	r5, [r3, #0]
    2f96:	d103      	bne.n	2fa0 <_printf_i+0xfc>
    2f98:	0655      	lsls	r5, r2, #25
    2f9a:	d501      	bpl.n	2fa0 <_printf_i+0xfc>
    2f9c:	8803      	ldrh	r3, [r0, #0]
    2f9e:	e000      	b.n	2fa2 <_printf_i+0xfe>
    2fa0:	6803      	ldr	r3, [r0, #0]
    2fa2:	07d0      	lsls	r0, r2, #31
    2fa4:	bf44      	itt	mi
    2fa6:	f042 0220 	orrmi.w	r2, r2, #32
    2faa:	6022      	strmi	r2, [r4, #0]
    2fac:	b91b      	cbnz	r3, 2fb6 <_printf_i+0x112>
    2fae:	6822      	ldr	r2, [r4, #0]
    2fb0:	f022 0220 	bic.w	r2, r2, #32
    2fb4:	6022      	str	r2, [r4, #0]
    2fb6:	2210      	movs	r2, #16
    2fb8:	2000      	movs	r0, #0
    2fba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    2fbe:	e001      	b.n	2fc4 <_printf_i+0x120>
    2fc0:	4949      	ldr	r1, [pc, #292]	; (30e8 <_printf_i+0x244>)
    2fc2:	220a      	movs	r2, #10
    2fc4:	6865      	ldr	r5, [r4, #4]
    2fc6:	2d00      	cmp	r5, #0
    2fc8:	60a5      	str	r5, [r4, #8]
    2fca:	db08      	blt.n	2fde <_printf_i+0x13a>
    2fcc:	6820      	ldr	r0, [r4, #0]
    2fce:	f020 0004 	bic.w	r0, r0, #4
    2fd2:	6020      	str	r0, [r4, #0]
    2fd4:	b92b      	cbnz	r3, 2fe2 <_printf_i+0x13e>
    2fd6:	2d00      	cmp	r5, #0
    2fd8:	d17d      	bne.n	30d6 <_printf_i+0x232>
    2fda:	4675      	mov	r5, lr
    2fdc:	e00c      	b.n	2ff8 <_printf_i+0x154>
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d079      	beq.n	30d6 <_printf_i+0x232>
    2fe2:	4675      	mov	r5, lr
    2fe4:	fbb3 f0f2 	udiv	r0, r3, r2
    2fe8:	fb02 3310 	mls	r3, r2, r0, r3
    2fec:	5ccb      	ldrb	r3, [r1, r3]
    2fee:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2ff2:	4603      	mov	r3, r0
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d1f5      	bne.n	2fe4 <_printf_i+0x140>
    2ff8:	2a08      	cmp	r2, #8
    2ffa:	d10b      	bne.n	3014 <_printf_i+0x170>
    2ffc:	6823      	ldr	r3, [r4, #0]
    2ffe:	07da      	lsls	r2, r3, #31
    3000:	d508      	bpl.n	3014 <_printf_i+0x170>
    3002:	6923      	ldr	r3, [r4, #16]
    3004:	6862      	ldr	r2, [r4, #4]
    3006:	429a      	cmp	r2, r3
    3008:	bfde      	ittt	le
    300a:	2330      	movle	r3, #48	; 0x30
    300c:	f805 3c01 	strble.w	r3, [r5, #-1]
    3010:	f105 35ff 	addle.w	r5, r5, #4294967295
    3014:	ebc5 030e 	rsb	r3, r5, lr
    3018:	6123      	str	r3, [r4, #16]
    301a:	e02e      	b.n	307a <_printf_i+0x1d6>
    301c:	6808      	ldr	r0, [r1, #0]
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	f010 0f80 	tst.w	r0, #128	; 0x80
    3024:	6949      	ldr	r1, [r1, #20]
    3026:	d003      	beq.n	3030 <_printf_i+0x18c>
    3028:	1d10      	adds	r0, r2, #4
    302a:	6018      	str	r0, [r3, #0]
    302c:	6813      	ldr	r3, [r2, #0]
    302e:	e008      	b.n	3042 <_printf_i+0x19e>
    3030:	f010 0f40 	tst.w	r0, #64	; 0x40
    3034:	f102 0004 	add.w	r0, r2, #4
    3038:	6018      	str	r0, [r3, #0]
    303a:	6813      	ldr	r3, [r2, #0]
    303c:	d001      	beq.n	3042 <_printf_i+0x19e>
    303e:	8019      	strh	r1, [r3, #0]
    3040:	e000      	b.n	3044 <_printf_i+0x1a0>
    3042:	6019      	str	r1, [r3, #0]
    3044:	2300      	movs	r3, #0
    3046:	6123      	str	r3, [r4, #16]
    3048:	4675      	mov	r5, lr
    304a:	e016      	b.n	307a <_printf_i+0x1d6>
    304c:	681a      	ldr	r2, [r3, #0]
    304e:	1d11      	adds	r1, r2, #4
    3050:	6019      	str	r1, [r3, #0]
    3052:	6815      	ldr	r5, [r2, #0]
    3054:	2100      	movs	r1, #0
    3056:	6862      	ldr	r2, [r4, #4]
    3058:	4628      	mov	r0, r5
    305a:	f000 f8f3 	bl	3244 <memchr>
    305e:	b108      	cbz	r0, 3064 <_printf_i+0x1c0>
    3060:	1b40      	subs	r0, r0, r5
    3062:	6060      	str	r0, [r4, #4]
    3064:	6863      	ldr	r3, [r4, #4]
    3066:	e004      	b.n	3072 <_printf_i+0x1ce>
    3068:	f104 0542 	add.w	r5, r4, #66	; 0x42
    306c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3070:	2301      	movs	r3, #1
    3072:	6123      	str	r3, [r4, #16]
    3074:	2300      	movs	r3, #0
    3076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    307a:	f8cd 8000 	str.w	r8, [sp]
    307e:	463b      	mov	r3, r7
    3080:	aa03      	add	r2, sp, #12
    3082:	4621      	mov	r1, r4
    3084:	4630      	mov	r0, r6
    3086:	f7ff fe97 	bl	2db8 <_printf_common>
    308a:	3001      	adds	r0, #1
    308c:	d102      	bne.n	3094 <_printf_i+0x1f0>
    308e:	f04f 30ff 	mov.w	r0, #4294967295
    3092:	e026      	b.n	30e2 <_printf_i+0x23e>
    3094:	6923      	ldr	r3, [r4, #16]
    3096:	462a      	mov	r2, r5
    3098:	4639      	mov	r1, r7
    309a:	4630      	mov	r0, r6
    309c:	47c0      	blx	r8
    309e:	3001      	adds	r0, #1
    30a0:	d0f5      	beq.n	308e <_printf_i+0x1ea>
    30a2:	6823      	ldr	r3, [r4, #0]
    30a4:	079b      	lsls	r3, r3, #30
    30a6:	d510      	bpl.n	30ca <_printf_i+0x226>
    30a8:	2500      	movs	r5, #0
    30aa:	f104 0919 	add.w	r9, r4, #25
    30ae:	e007      	b.n	30c0 <_printf_i+0x21c>
    30b0:	2301      	movs	r3, #1
    30b2:	464a      	mov	r2, r9
    30b4:	4639      	mov	r1, r7
    30b6:	4630      	mov	r0, r6
    30b8:	47c0      	blx	r8
    30ba:	3001      	adds	r0, #1
    30bc:	d0e7      	beq.n	308e <_printf_i+0x1ea>
    30be:	3501      	adds	r5, #1
    30c0:	68e3      	ldr	r3, [r4, #12]
    30c2:	9a03      	ldr	r2, [sp, #12]
    30c4:	1a9b      	subs	r3, r3, r2
    30c6:	429d      	cmp	r5, r3
    30c8:	dbf2      	blt.n	30b0 <_printf_i+0x20c>
    30ca:	68e0      	ldr	r0, [r4, #12]
    30cc:	9b03      	ldr	r3, [sp, #12]
    30ce:	4298      	cmp	r0, r3
    30d0:	bfb8      	it	lt
    30d2:	4618      	movlt	r0, r3
    30d4:	e005      	b.n	30e2 <_printf_i+0x23e>
    30d6:	780b      	ldrb	r3, [r1, #0]
    30d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    30dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    30e0:	e78a      	b.n	2ff8 <_printf_i+0x154>
    30e2:	b005      	add	sp, #20
    30e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30e8:	00003d5d 	.word	0x00003d5d
    30ec:	00003d6e 	.word	0x00003d6e

000030f0 <_sbrk_r>:
    30f0:	b538      	push	{r3, r4, r5, lr}
    30f2:	4c06      	ldr	r4, [pc, #24]	; (310c <_sbrk_r+0x1c>)
    30f4:	2300      	movs	r3, #0
    30f6:	4605      	mov	r5, r0
    30f8:	4608      	mov	r0, r1
    30fa:	6023      	str	r3, [r4, #0]
    30fc:	f7fd faf8 	bl	6f0 <_sbrk>
    3100:	1c43      	adds	r3, r0, #1
    3102:	d102      	bne.n	310a <_sbrk_r+0x1a>
    3104:	6823      	ldr	r3, [r4, #0]
    3106:	b103      	cbz	r3, 310a <_sbrk_r+0x1a>
    3108:	602b      	str	r3, [r5, #0]
    310a:	bd38      	pop	{r3, r4, r5, pc}
    310c:	2000049c 	.word	0x2000049c

00003110 <__sread>:
    3110:	b510      	push	{r4, lr}
    3112:	460c      	mov	r4, r1
    3114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3118:	f000 f8e4 	bl	32e4 <_read_r>
    311c:	2800      	cmp	r0, #0
    311e:	bfab      	itete	ge
    3120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3122:	89a3      	ldrhlt	r3, [r4, #12]
    3124:	181b      	addge	r3, r3, r0
    3126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    312a:	bfac      	ite	ge
    312c:	6563      	strge	r3, [r4, #84]	; 0x54
    312e:	81a3      	strhlt	r3, [r4, #12]
    3130:	bd10      	pop	{r4, pc}

00003132 <__swrite>:
    3132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3136:	461f      	mov	r7, r3
    3138:	898b      	ldrh	r3, [r1, #12]
    313a:	4605      	mov	r5, r0
    313c:	05db      	lsls	r3, r3, #23
    313e:	460c      	mov	r4, r1
    3140:	4616      	mov	r6, r2
    3142:	d505      	bpl.n	3150 <__swrite+0x1e>
    3144:	2302      	movs	r3, #2
    3146:	2200      	movs	r2, #0
    3148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    314c:	f000 f868 	bl	3220 <_lseek_r>
    3150:	89a3      	ldrh	r3, [r4, #12]
    3152:	4632      	mov	r2, r6
    3154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3158:	81a3      	strh	r3, [r4, #12]
    315a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    315e:	463b      	mov	r3, r7
    3160:	4628      	mov	r0, r5
    3162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3166:	f000 b817 	b.w	3198 <_write_r>

0000316a <__sseek>:
    316a:	b510      	push	{r4, lr}
    316c:	460c      	mov	r4, r1
    316e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3172:	f000 f855 	bl	3220 <_lseek_r>
    3176:	1c43      	adds	r3, r0, #1
    3178:	89a3      	ldrh	r3, [r4, #12]
    317a:	bf15      	itete	ne
    317c:	6560      	strne	r0, [r4, #84]	; 0x54
    317e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3186:	81a3      	strheq	r3, [r4, #12]
    3188:	bf18      	it	ne
    318a:	81a3      	strhne	r3, [r4, #12]
    318c:	bd10      	pop	{r4, pc}

0000318e <__sclose>:
    318e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3192:	f000 b813 	b.w	31bc <_close_r>
	...

00003198 <_write_r>:
    3198:	b538      	push	{r3, r4, r5, lr}
    319a:	4c07      	ldr	r4, [pc, #28]	; (31b8 <_write_r+0x20>)
    319c:	4605      	mov	r5, r0
    319e:	4608      	mov	r0, r1
    31a0:	4611      	mov	r1, r2
    31a2:	2200      	movs	r2, #0
    31a4:	6022      	str	r2, [r4, #0]
    31a6:	461a      	mov	r2, r3
    31a8:	f7fe f9ba 	bl	1520 <_write>
    31ac:	1c43      	adds	r3, r0, #1
    31ae:	d102      	bne.n	31b6 <_write_r+0x1e>
    31b0:	6823      	ldr	r3, [r4, #0]
    31b2:	b103      	cbz	r3, 31b6 <_write_r+0x1e>
    31b4:	602b      	str	r3, [r5, #0]
    31b6:	bd38      	pop	{r3, r4, r5, pc}
    31b8:	2000049c 	.word	0x2000049c

000031bc <_close_r>:
    31bc:	b538      	push	{r3, r4, r5, lr}
    31be:	4c06      	ldr	r4, [pc, #24]	; (31d8 <_close_r+0x1c>)
    31c0:	2300      	movs	r3, #0
    31c2:	4605      	mov	r5, r0
    31c4:	4608      	mov	r0, r1
    31c6:	6023      	str	r3, [r4, #0]
    31c8:	f7fd faac 	bl	724 <_close>
    31cc:	1c43      	adds	r3, r0, #1
    31ce:	d102      	bne.n	31d6 <_close_r+0x1a>
    31d0:	6823      	ldr	r3, [r4, #0]
    31d2:	b103      	cbz	r3, 31d6 <_close_r+0x1a>
    31d4:	602b      	str	r3, [r5, #0]
    31d6:	bd38      	pop	{r3, r4, r5, pc}
    31d8:	2000049c 	.word	0x2000049c

000031dc <_fstat_r>:
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	4c07      	ldr	r4, [pc, #28]	; (31fc <_fstat_r+0x20>)
    31e0:	2300      	movs	r3, #0
    31e2:	4605      	mov	r5, r0
    31e4:	4608      	mov	r0, r1
    31e6:	4611      	mov	r1, r2
    31e8:	6023      	str	r3, [r4, #0]
    31ea:	f7fd fa9f 	bl	72c <_fstat>
    31ee:	1c43      	adds	r3, r0, #1
    31f0:	d102      	bne.n	31f8 <_fstat_r+0x1c>
    31f2:	6823      	ldr	r3, [r4, #0]
    31f4:	b103      	cbz	r3, 31f8 <_fstat_r+0x1c>
    31f6:	602b      	str	r3, [r5, #0]
    31f8:	bd38      	pop	{r3, r4, r5, pc}
    31fa:	bf00      	nop
    31fc:	2000049c 	.word	0x2000049c

00003200 <_isatty_r>:
    3200:	b538      	push	{r3, r4, r5, lr}
    3202:	4c06      	ldr	r4, [pc, #24]	; (321c <_isatty_r+0x1c>)
    3204:	2300      	movs	r3, #0
    3206:	4605      	mov	r5, r0
    3208:	4608      	mov	r0, r1
    320a:	6023      	str	r3, [r4, #0]
    320c:	f7fd fa94 	bl	738 <_isatty>
    3210:	1c43      	adds	r3, r0, #1
    3212:	d102      	bne.n	321a <_isatty_r+0x1a>
    3214:	6823      	ldr	r3, [r4, #0]
    3216:	b103      	cbz	r3, 321a <_isatty_r+0x1a>
    3218:	602b      	str	r3, [r5, #0]
    321a:	bd38      	pop	{r3, r4, r5, pc}
    321c:	2000049c 	.word	0x2000049c

00003220 <_lseek_r>:
    3220:	b538      	push	{r3, r4, r5, lr}
    3222:	4c07      	ldr	r4, [pc, #28]	; (3240 <_lseek_r+0x20>)
    3224:	4605      	mov	r5, r0
    3226:	4608      	mov	r0, r1
    3228:	4611      	mov	r1, r2
    322a:	2200      	movs	r2, #0
    322c:	6022      	str	r2, [r4, #0]
    322e:	461a      	mov	r2, r3
    3230:	f7fd fa84 	bl	73c <_lseek>
    3234:	1c43      	adds	r3, r0, #1
    3236:	d102      	bne.n	323e <_lseek_r+0x1e>
    3238:	6823      	ldr	r3, [r4, #0]
    323a:	b103      	cbz	r3, 323e <_lseek_r+0x1e>
    323c:	602b      	str	r3, [r5, #0]
    323e:	bd38      	pop	{r3, r4, r5, pc}
    3240:	2000049c 	.word	0x2000049c

00003244 <memchr>:
    3244:	b510      	push	{r4, lr}
    3246:	b2c9      	uxtb	r1, r1
    3248:	4402      	add	r2, r0
    324a:	4290      	cmp	r0, r2
    324c:	4603      	mov	r3, r0
    324e:	d005      	beq.n	325c <memchr+0x18>
    3250:	781c      	ldrb	r4, [r3, #0]
    3252:	3001      	adds	r0, #1
    3254:	428c      	cmp	r4, r1
    3256:	d1f8      	bne.n	324a <memchr+0x6>
    3258:	4618      	mov	r0, r3
    325a:	bd10      	pop	{r4, pc}
    325c:	2000      	movs	r0, #0
    325e:	bd10      	pop	{r4, pc}

00003260 <memmove>:
    3260:	4288      	cmp	r0, r1
    3262:	b510      	push	{r4, lr}
    3264:	eb01 0302 	add.w	r3, r1, r2
    3268:	d801      	bhi.n	326e <memmove+0xe>
    326a:	1e42      	subs	r2, r0, #1
    326c:	e00b      	b.n	3286 <memmove+0x26>
    326e:	4298      	cmp	r0, r3
    3270:	d2fb      	bcs.n	326a <memmove+0xa>
    3272:	1881      	adds	r1, r0, r2
    3274:	1ad2      	subs	r2, r2, r3
    3276:	42d3      	cmn	r3, r2
    3278:	d004      	beq.n	3284 <memmove+0x24>
    327a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    327e:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3282:	e7f8      	b.n	3276 <memmove+0x16>
    3284:	bd10      	pop	{r4, pc}
    3286:	4299      	cmp	r1, r3
    3288:	d004      	beq.n	3294 <memmove+0x34>
    328a:	f811 4b01 	ldrb.w	r4, [r1], #1
    328e:	f802 4f01 	strb.w	r4, [r2, #1]!
    3292:	e7f8      	b.n	3286 <memmove+0x26>
    3294:	bd10      	pop	{r4, pc}

00003296 <_realloc_r>:
    3296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3298:	4607      	mov	r7, r0
    329a:	4615      	mov	r5, r2
    329c:	460e      	mov	r6, r1
    329e:	b921      	cbnz	r1, 32aa <_realloc_r+0x14>
    32a0:	4611      	mov	r1, r2
    32a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    32a6:	f7ff baa1 	b.w	27ec <_malloc_r>
    32aa:	b91a      	cbnz	r2, 32b4 <_realloc_r+0x1e>
    32ac:	f7ff fa5a 	bl	2764 <_free_r>
    32b0:	4628      	mov	r0, r5
    32b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32b4:	f000 f828 	bl	3308 <_malloc_usable_size_r>
    32b8:	4285      	cmp	r5, r0
    32ba:	d90e      	bls.n	32da <_realloc_r+0x44>
    32bc:	4629      	mov	r1, r5
    32be:	4638      	mov	r0, r7
    32c0:	f7ff fa94 	bl	27ec <_malloc_r>
    32c4:	4604      	mov	r4, r0
    32c6:	b150      	cbz	r0, 32de <_realloc_r+0x48>
    32c8:	4631      	mov	r1, r6
    32ca:	462a      	mov	r2, r5
    32cc:	f7fe fe5c 	bl	1f88 <memcpy>
    32d0:	4631      	mov	r1, r6
    32d2:	4638      	mov	r0, r7
    32d4:	f7ff fa46 	bl	2764 <_free_r>
    32d8:	e001      	b.n	32de <_realloc_r+0x48>
    32da:	4630      	mov	r0, r6
    32dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32de:	4620      	mov	r0, r4
    32e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000032e4 <_read_r>:
    32e4:	b538      	push	{r3, r4, r5, lr}
    32e6:	4c07      	ldr	r4, [pc, #28]	; (3304 <_read_r+0x20>)
    32e8:	4605      	mov	r5, r0
    32ea:	4608      	mov	r0, r1
    32ec:	4611      	mov	r1, r2
    32ee:	2200      	movs	r2, #0
    32f0:	6022      	str	r2, [r4, #0]
    32f2:	461a      	mov	r2, r3
    32f4:	f7fe f8fa 	bl	14ec <_read>
    32f8:	1c43      	adds	r3, r0, #1
    32fa:	d102      	bne.n	3302 <_read_r+0x1e>
    32fc:	6823      	ldr	r3, [r4, #0]
    32fe:	b103      	cbz	r3, 3302 <_read_r+0x1e>
    3300:	602b      	str	r3, [r5, #0]
    3302:	bd38      	pop	{r3, r4, r5, pc}
    3304:	2000049c 	.word	0x2000049c

00003308 <_malloc_usable_size_r>:
    3308:	f851 0c04 	ldr.w	r0, [r1, #-4]
    330c:	2800      	cmp	r0, #0
    330e:	bfbe      	ittt	lt
    3310:	1809      	addlt	r1, r1, r0
    3312:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
    3316:	18c0      	addlt	r0, r0, r3
    3318:	3804      	subs	r0, #4
    331a:	4770      	bx	lr

0000331c <p_uc_charset10x14>:
	...
    3338:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
    3348:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
    3358:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
    3368:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
    3378:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
    3388:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
    3398:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
    33a8:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
    33c0:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
    33d0:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
    33e0:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
    33f0:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
    3400:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
    3410:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
    3420:	0003 0003 0003 0003 0003 0003 0003 0003     ................
    3430:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
    3448:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
    3458:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
    3468:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
    3478:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
    3488:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
    3498:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
    34a8:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
    34b8:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
    34c8:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
    34d8:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
    34e8:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
    34f8:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
    3508:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
    3518:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
    3528:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
    3538:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
    3548:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
    3558:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
    3568:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
    3578:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
    3588:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
    3598:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
    35a8:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
    35b8:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
    35c8:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
    35d8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
    35e8:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
    35f8:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
    3608:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
    3618:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
    3628:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
    3638:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
    3648:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
    3658:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
    3668:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
    3678:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
    3688:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
    3698:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
    36a8:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
    36b8:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
    36c8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
    36d8:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
    36e8:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
    36f8:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
    3708:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
    3718:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
    3728:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
    3738:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
    3748:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
    3758:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
    3768:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
    3778:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
    3788:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
    3798:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
    37a8:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
    37b8:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
    37c8:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
    37d8:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
    37e8:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
    37f8:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
    3808:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
    3818:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
    3828:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
    3838:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
    3848:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
    3858:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
    3868:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
    3878:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
    3888:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
    3898:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
    38a8:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
    38b8:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
    38c8:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
    38d8:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
    38e8:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
    38f8:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
    3908:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
    3918:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
    3928:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
    3938:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
    3948:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
    3958:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
    3968:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
    3978:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
    3988:	8003 0007 000e 000c 000c 000e 0007 0003     ................
    3998:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
    39a8:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
    39b8:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
    39c8:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
    39d8:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
    39e8:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
    39f8:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
    3a08:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
    3a18:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
    3a28:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
    3a38:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
    3a48:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
    3a58:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
    3a68:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
    3a78:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
    3a88:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
    3a98:	fcff fcff 5444 253d 2c78 4e20 4350 3d53     ....DT=%x, NPCS=
    3aa8:	7825 0000 2d2d 4720 7465 6974 676e 5320     %x..-- Getting S
    3ab8:	6174 7472 6465 4520 6178 706d 656c 2d20     tarted Example -
    3ac8:	0d2d 2d0a 202d 4153 334d 2d53 4c4f 4d49     -..-- SAM3S-OLIM
    3ad8:	5845 2d20 0d2d 2d0a 202d 6f43 706d 6c69     EX --..-- Compil
    3ae8:	6465 203a 6546 2062 3720 3220 3130 2037     ed: Feb  7 2017 
    3af8:	3531 303a 3a38 3130 2d20 0d2d 0000 0000     15:08:01 --.....
    3b08:	6f43 666e 6769 7275 2065 7973 7473 6d65     Configure system
    3b18:	7420 6369 206b 6f74 6720 7465 3120 736d      tick to get 1ms
    3b28:	7420 6369 206b 6570 6972 646f 0d2e 0000      tick period....
    3b38:	6f43 666e 6769 7275 2065 4354 0d2e 0000     Configure TC....
    3b48:	6f43 666e 6769 7275 2065 7562 7474 6e6f     Configure button
    3b58:	2073 6977 6874 6420 6265 756f 636e 6e69     s with debouncin
    3b68:	2e67 000d 6f43 666e 6769 7275 2065 7073     g...Configure sp
    3b78:	2069 616d 7473 7265 6920 696e 6974 6c61     i master initial
    3b88:	7a69 7461 6f69 286e 2e29 000d 7267 6565     ization()...gree
    3b98:	206e 454c 2044 454c 3144 0000 5355 5052     n LED LED1..USRP
    3ba8:	3142 0000 7250 7365 2073 7325 7420 206f     B1..Press %s to 
    3bb8:	7453 7261 2f74 7453 706f 7420 6568 2520     Start/Stop the %
    3bc8:	2073 6c62 6e69 696b 676e 0d2e 000a 0000     s blinking......
    3bd8:	6579 6c6c 776f 4c20 4445 4c20 4445 0032     yellow LED LED2.
    3be8:	5355 5052 3242 0000 6562 656b 6162 646e     USRPB2..bekeband
    3bf8:	682e 0075 4453 4320 7261 2064 003a 0000     .hu.SD Card :...
    3c08:	4453 4320 7261 2064 203a 6544 6574 7463     SD Card : Detect
    3c18:	6465 0000 7372 6374 675f 7465 725f 7365     ed..rstc_get_res
    3c28:	7465 635f 7561 6573 5228 5453 2943 203b     et_cause(RSTC); 
    3c38:	203d 7825 0a20 000d 6c43 6165 2072 7067     = %x ...Clear gp
    3c48:	766e 286d 2931 6220 7469 6220 6f6f 2074     nvm(1) bit boot 
    3c58:	7266 6d6f 5220 4d4f 2021 7341 6174 6c20     from ROM! Asta l
    3c68:	2061 6976 7473 2161 0a20 000d 6554 7473     a vista! ...Test
    3c78:	6620 616c 6873 4720 4e50 4d56 203a 6c66      flash GPNVM: fl
    3c88:	7361 2068 5047 564e 204d 6c63 6165 2072     ash GPNVM clear 
    3c98:	7265 6f72 2172 0a0d 0000 0000 6554 7473     error!......Test
    3ca8:	6620 616c 6873 4720 4e50 4d56 203a 6c66      flash GPNVM: fl
    3cb8:	7361 2068 5047 564e 204d 6573 2074 7265     ash GPNVM set er
    3cc8:	6f72 2172 0a0d 0000 5f5f 6e65 6261 656c     ror!....__enable
    3cd8:	695f 7172 2928 0d3b 000a 0000 0043 0000     _irq();.....C...

00003ce8 <_global_impure_ptr>:
    3ce8:	0184 2000                                   ... 

00003cec <__sf_fake_stdin>:
	...

00003d0c <__sf_fake_stdout>:
	...

00003d2c <__sf_fake_stderr>:
	...
    3d4c:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    3d5c:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    3d6c:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    3d7c:	6665 0000                                   ef..

00003d80 <_init>:
    3d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d82:	bf00      	nop
    3d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d86:	bc08      	pop	{r3}
    3d88:	469e      	mov	lr, r3
    3d8a:	4770      	bx	lr

00003d8c <__init_array_start>:
    3d8c:	0000013d 	.word	0x0000013d

00003d90 <_fini>:
    3d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d92:	bf00      	nop
    3d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d96:	bc08      	pop	{r3}
    3d98:	469e      	mov	lr, r3
    3d9a:	4770      	bx	lr
    3d9c:	0000      	movs	r0, r0
	...

00003da0 <__efc_write_fmr_veneer>:
    3da0:	b401      	push	{r0}
    3da2:	4802      	ldr	r0, [pc, #8]	; (3dac <__efc_write_fmr_veneer+0xc>)
    3da4:	4684      	mov	ip, r0
    3da6:	bc01      	pop	{r0}
    3da8:	4760      	bx	ip
    3daa:	bf00      	nop
    3dac:	2000014d 	.word	0x2000014d

00003db0 <__system_init_flash_veneer>:
    3db0:	b401      	push	{r0}
    3db2:	4802      	ldr	r0, [pc, #8]	; (3dbc <__system_init_flash_veneer+0xc>)
    3db4:	4684      	mov	ip, r0
    3db6:	bc01      	pop	{r0}
    3db8:	4760      	bx	ip
    3dba:	bf00      	nop
    3dbc:	200000a1 	.word	0x200000a1

00003dc0 <__efc_perform_fcr_veneer>:
    3dc0:	b401      	push	{r0}
    3dc2:	4802      	ldr	r0, [pc, #8]	; (3dcc <__efc_perform_fcr_veneer+0xc>)
    3dc4:	4684      	mov	ip, r0
    3dc6:	bc01      	pop	{r0}
    3dc8:	4760      	bx	ip
    3dca:	bf00      	nop
    3dcc:	20000151 	.word	0x20000151

00003dd0 <__fini_array_start>:
    3dd0:	00000115 	.word	0x00000115

Disassembly of section .relocate:

20000000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	4b1c      	ldr	r3, [pc, #112]	; (2000008c <SystemInit+0x8c>)
2000001c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fa      	beq.n	2000001a <SystemInit+0x1a>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	4b18      	ldr	r3, [pc, #96]	; (2000008c <SystemInit+0x8c>)
2000002c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fa      	beq.n	2000002a <SystemInit+0x2a>
	}
		PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4a15      	ldr	r2, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000038:	f023 0303 	bic.w	r3, r3, #3
2000003c:	f043 0301 	orr.w	r3, r3, #1
20000040:	6313      	str	r3, [r2, #48]	; 0x30
			                    PMC_MCKR_CSS_MAIN_CLK;
		while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	4b12      	ldr	r3, [pc, #72]	; (2000008c <SystemInit+0x8c>)
20000044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000046:	f013 0f08 	tst.w	r3, #8
2000004a:	d0fa      	beq.n	20000042 <SystemInit+0x42>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004c:	4a11      	ldr	r2, [pc, #68]	; (20000094 <SystemInit+0x94>)
2000004e:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
20000050:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000052:	4b0e      	ldr	r3, [pc, #56]	; (2000008c <SystemInit+0x8c>)
20000054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000056:	f013 0f02 	tst.w	r3, #2
2000005a:	d0fa      	beq.n	20000052 <SystemInit+0x52>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000005c:	2211      	movs	r2, #17
2000005e:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
20000060:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000062:	4b0a      	ldr	r3, [pc, #40]	; (2000008c <SystemInit+0x8c>)
20000064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000066:	f013 0f08 	tst.w	r3, #8
2000006a:	d0fa      	beq.n	20000062 <SystemInit+0x62>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006c:	2212      	movs	r2, #18
2000006e:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
20000070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000072:	4b06      	ldr	r3, [pc, #24]	; (2000008c <SystemInit+0x8c>)
20000074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000076:	f013 0f08 	tst.w	r3, #8
2000007a:	d0fa      	beq.n	20000072 <SystemInit+0x72>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007c:	4a06      	ldr	r2, [pc, #24]	; (20000098 <SystemInit+0x98>)
2000007e:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
20000080:	601a      	str	r2, [r3, #0]
20000082:	4770      	bx	lr
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	201f3f03 	.word	0x201f3f03
20000098:	03d09000 	.word	0x03d09000
2000009c:	2000016c 	.word	0x2000016c

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0d      	ldr	r3, [pc, #52]	; (200000d8 <system_init_flash+0x38>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d803      	bhi.n	200000ae <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000a6:	2200      	movs	r2, #0
200000a8:	4b0c      	ldr	r3, [pc, #48]	; (200000dc <system_init_flash+0x3c>)
200000aa:	601a      	str	r2, [r3, #0]
200000ac:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ae:	4b0c      	ldr	r3, [pc, #48]	; (200000e0 <system_init_flash+0x40>)
200000b0:	4298      	cmp	r0, r3
200000b2:	d804      	bhi.n	200000be <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000b4:	f44f 7280 	mov.w	r2, #256	; 0x100
200000b8:	4b08      	ldr	r3, [pc, #32]	; (200000dc <system_init_flash+0x3c>)
200000ba:	601a      	str	r2, [r3, #0]
200000bc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000be:	4b09      	ldr	r3, [pc, #36]	; (200000e4 <system_init_flash+0x44>)
200000c0:	4298      	cmp	r0, r3
200000c2:	d804      	bhi.n	200000ce <system_init_flash+0x2e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000c4:	f44f 7200 	mov.w	r2, #512	; 0x200
200000c8:	4b04      	ldr	r3, [pc, #16]	; (200000dc <system_init_flash+0x3c>)
200000ca:	601a      	str	r2, [r3, #0]
200000cc:	4770      	bx	lr
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000ce:	f44f 7240 	mov.w	r2, #768	; 0x300
200000d2:	4b02      	ldr	r3, [pc, #8]	; (200000dc <system_init_flash+0x3c>)
200000d4:	601a      	str	r2, [r3, #0]
200000d6:	4770      	bx	lr
200000d8:	0103663f 	.word	0x0103663f
200000dc:	400e0a00 	.word	0x400e0a00
200000e0:	01c9c37f 	.word	0x01c9c37f
200000e4:	0337f97f 	.word	0x0337f97f

200000e8 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
200000e8:	b470      	push	{r4, r5, r6}
200000ea:	b083      	sub	sp, #12
200000ec:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
200000ee:	b34b      	cbz	r3, 20000144 <efc_perform_read_sequence+0x5c>
200000f0:	4604      	mov	r4, r0
200000f2:	461e      	mov	r6, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
200000f4:	6803      	ldr	r3, [r0, #0]
200000f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200000fa:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
200000fc:	b2c9      	uxtb	r1, r1
200000fe:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000102:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000104:	68a3      	ldr	r3, [r4, #8]
20000106:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000108:	9b01      	ldr	r3, [sp, #4]
2000010a:	f013 0001 	ands.w	r0, r3, #1
2000010e:	d1f9      	bne.n	20000104 <efc_perform_read_sequence+0x1c>
20000110:	2300      	movs	r3, #0
20000112:	e006      	b.n	20000122 <efc_perform_read_sequence+0x3a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000114:	0099      	lsls	r1, r3, #2
20000116:	f501 0180 	add.w	r1, r1, #4194304	; 0x400000
2000011a:	6809      	ldr	r1, [r1, #0]
2000011c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000120:	3301      	adds	r3, #1
20000122:	42ab      	cmp	r3, r5
20000124:	d3f6      	bcc.n	20000114 <efc_perform_read_sequence+0x2c>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000126:	b2d2      	uxtb	r2, r2
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000128:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
2000012c:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000012e:	68a3      	ldr	r3, [r4, #8]
20000130:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000132:	9b01      	ldr	r3, [sp, #4]
20000134:	f013 0f01 	tst.w	r3, #1
20000138:	d0f9      	beq.n	2000012e <efc_perform_read_sequence+0x46>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000013a:	6823      	ldr	r3, [r4, #0]
2000013c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000140:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
20000142:	e000      	b.n	20000146 <efc_perform_read_sequence+0x5e>
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
20000144:	2002      	movs	r0, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
20000146:	b003      	add	sp, #12
20000148:	bc70      	pop	{r4, r5, r6}
2000014a:	4770      	bx	lr

2000014c <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
2000014c:	6001      	str	r1, [r0, #0]
2000014e:	4770      	bx	lr

20000150 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000150:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
20000152:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000154:	6883      	ldr	r3, [r0, #8]
20000156:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000158:	9b01      	ldr	r3, [sp, #4]
2000015a:	f013 0f01 	tst.w	r3, #1
2000015e:	d0f9      	beq.n	20000154 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000160:	9801      	ldr	r0, [sp, #4]
}
20000162:	f000 0006 	and.w	r0, r0, #6
20000166:	b002      	add	sp, #8
20000168:	4770      	bx	lr
2000016a:	bf00      	nop

2000016c <SystemCoreClock>:
2000016c:	0900 003d                                   ..=.

20000170 <ILI9341_SPI_DEVICE>:
20000170:	0001 0000                                   ....

20000174 <g_ul_lcd_x_length>:
20000174:	00f0 0000                                   ....

20000178 <g_ul_lcd_y_length>:
20000178:	0140 0000                                   @...

2000017c <g_interrupt_enabled>:
2000017c:	0101                                             .

2000017d <g_b_led0_active>:
2000017d:	0101                                             .

2000017e <g_b_led1_active>:
2000017e:	0001                                        ..

20000180 <TOUCH_SPI_DEVICE>:
20000180:	0002 0000                                   ....

20000184 <impure_data>:
20000184:	0000 0000 3cec 0000 3d0c 0000 3d2c 0000     .....<...=..,=..
	...
200001a4:	3ce4 0000 0000 0000 0000 0000 0000 0000     .<..............
	...

200001e4 <_impure_ptr>:
200001e4:	0184 2000                                   ... 
