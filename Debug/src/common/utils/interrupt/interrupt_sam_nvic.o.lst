   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interrupt_sam_nvic.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.cpu_irq_enter_critical,"ax",%progbits
  20              		.align	2
  21              		.global	cpu_irq_enter_critical
  22              		.thumb
  23              		.thumb_func
  25              	cpu_irq_enter_critical:
  26              	.LFB73:
  27              		.file 1 "../src/common/utils/interrupt/interrupt_sam_nvic.c"
   1:../src/common/utils/interrupt/interrupt_sam_nvic.c **** /**
   2:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * \file
   3:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   4:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   6:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * Copyright (c) 2012-2015 Atmel Corporation. All rights reserved.
   7:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
   8:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * \asf_license_start
   9:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  10:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * \page License
  11:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  12:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * Redistribution and use in source and binary forms, with or without
  13:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * modification, are permitted provided that the following conditions are met:
  14:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  15:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *    this list of conditions and the following disclaimer.
  17:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  18:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *    and/or other materials provided with the distribution.
  21:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  22:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *    from this software without specific prior written permission.
  24:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  25:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *    Atmel microcontroller product.
  27:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  28:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  40:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * \asf_license_stop
  41:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  *
  42:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  */
  43:../src/common/utils/interrupt/interrupt_sam_nvic.c **** /*
  44:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
  45:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  */
  46:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  47:../src/common/utils/interrupt/interrupt_sam_nvic.c **** #include "interrupt/interrupt_sam_nvic.h"
  48:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  49:../src/common/utils/interrupt/interrupt_sam_nvic.c **** #if !defined(__DOXYGEN__)
  50:../src/common/utils/interrupt/interrupt_sam_nvic.c **** /* Deprecated - global flag to determine the global interrupt state. Required by
  51:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * QTouch library, however new applications should use cpu_irq_is_enabled()
  52:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  * which probes the true global interrupt state from the CPU special registers.
  53:../src/common/utils/interrupt/interrupt_sam_nvic.c ****  */
  54:../src/common/utils/interrupt/interrupt_sam_nvic.c **** volatile bool g_interrupt_enabled = true;
  55:../src/common/utils/interrupt/interrupt_sam_nvic.c **** #endif
  56:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  57:../src/common/utils/interrupt/interrupt_sam_nvic.c **** void cpu_irq_enter_critical(void)
  58:../src/common/utils/interrupt/interrupt_sam_nvic.c **** {
  28              		.loc 1 58 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  59:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	if (cpu_irq_critical_section_counter == 0) {
  33              		.loc 1 59 0
  34 0000 0B4B     		ldr	r3, .L4
  35 0002 1B68     		ldr	r3, [r3]
  36 0004 7BB9     		cbnz	r3, .L2
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h"
   1:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /**************************************************************************//**
   2:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  * @version  V4.00
   5:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  * @date     28. August 2014
   6:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  *
   7:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  * @note
   8:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  *
   9:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  ******************************************************************************/
  10:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  12:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    All rights reserved.
  13:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****      specific prior written permission.
  23:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    *
  24:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  37:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  38:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  41:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  42:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   @{
  46:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
  47:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  48:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* ARM armcc specific functions */
  50:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  51:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #endif
  54:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  55:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  58:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Control Register
  59:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  60:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  62:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Control Register value
  63:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
  64:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
  66:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regControl);
  68:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
  69:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  70:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  71:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Control Register
  72:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  73:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  75:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
  77:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
  79:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regControl = control;
  81:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
  82:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  83:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  84:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  86:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  88:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               IPSR Register value
  89:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
  90:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
  92:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regIPSR);
  94:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
  95:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  96:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  97:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get APSR Register
  98:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
  99:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 101:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               APSR Register value
 102:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 103:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 105:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regAPSR);
 107:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 108:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 109:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 110:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 112:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 114:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               xPSR Register value
 115:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 116:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 118:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regXPSR);
 120:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 121:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 122:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 123:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 125:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 127:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               PSP Register value
 128:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 129:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 131:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 134:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 135:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 136:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 138:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 140:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 142:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 144:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 147:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 148:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 149:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 151:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 153:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               MSP Register value
 154:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 155:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 157:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regMainStackPointer);
 159:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 160:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 161:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 162:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 164:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 166:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 168:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 170:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 173:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 174:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 175:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 177:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 179:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Priority Mask value
 180:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 181:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 183:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regPriMask);
 185:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 186:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 187:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 188:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 190:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 192:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 194:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 196:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regPriMask = (priMask);
 198:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 199:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 200:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 201:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 202:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 203:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Enable FIQ
 204:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 205:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 208:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 210:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 211:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Disable FIQ
 212:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 213:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 216:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 218:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 219:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Base Priority
 220:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 221:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 223:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Base Priority register value
 224:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 225:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 227:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regBasePri);
 229:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 230:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 231:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 232:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Base Priority
 233:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 234:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 236:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 238:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 240:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 243:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 244:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 245:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 247:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 249:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Fault Mask register value
 250:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 251:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 253:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regFaultMask);
 255:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 256:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 257:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 258:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 260:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 262:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 264:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 266:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 269:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 270:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 271:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 272:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 273:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
 274:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 275:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get FPSCR
 276:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 277:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 279:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 281:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 283:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(__regfpscr);
 286:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #else
 287:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****    return(0);
 288:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #endif
 289:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 290:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 291:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 292:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set FPSCR
 293:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 294:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 296:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 298:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 300:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #endif
 304:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 305:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 306:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
 307:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 308:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 309:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 310:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /* GNU gcc specific functions */
 311:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 312:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 313:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 314:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 315:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   Can only be executed in Privileged modes.
 316:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 317:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 318:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 319:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 320:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 321:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 322:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 323:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 324:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 325:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 326:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   Can only be executed in Privileged modes.
 327:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 328:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 329:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 330:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 331:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 332:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 333:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 334:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Control Register
 335:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 336:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the Control Register.
 337:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 338:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Control Register value
 339:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 340:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 341:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 342:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   uint32_t result;
 343:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 344:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 345:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 346:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 347:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 348:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 349:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Control Register
 350:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 351:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function writes the given value to the Control Register.
 352:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 353:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 354:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 355:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 356:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 357:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 358:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 359:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 360:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 361:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get IPSR Register
 362:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 363:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 364:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 365:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               IPSR Register value
 366:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 367:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 368:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 369:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   uint32_t result;
 370:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 371:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 372:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 373:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 374:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 375:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 376:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get APSR Register
 377:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 378:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the APSR Register.
 379:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 380:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               APSR Register value
 381:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 382:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 383:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 384:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   uint32_t result;
 385:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 386:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 387:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 388:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 389:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 390:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 391:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get xPSR Register
 392:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 393:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 394:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 395:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               xPSR Register value
 396:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 397:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 398:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 399:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   uint32_t result;
 400:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 401:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 402:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 403:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 404:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 405:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 406:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 407:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 408:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 409:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 410:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               PSP Register value
 411:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 412:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 413:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 414:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t result;
 415:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 416:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 417:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 418:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 419:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 420:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 421:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 422:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 423:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 424:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 425:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 426:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 427:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 428:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 429:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 430:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 431:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 432:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 433:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 434:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 435:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 436:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 437:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               MSP Register value
 438:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 439:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 440:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 441:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   register uint32_t result;
 442:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 443:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 444:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   return(result);
 445:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 446:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 447:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 448:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 449:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 450:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 451:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 452:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 453:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 454:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 455:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 456:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 457:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 458:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 459:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 460:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** /** \brief  Get Priority Mask
 461:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 462:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 463:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 464:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****     \return               Priority Mask value
 465:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****  */
 466:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 467:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** {
 468:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   uint32_t result;
 469:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** 
 470:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40              		.loc 2 470 0
  41              		.syntax unified
  42              	@ 470 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h" 1
  43 0006 EFF31083 		MRS r3, primask
  44              	@ 0 "" 2
  45              		.thumb
  46              		.syntax unified
  47              	.LBE13:
  48              	.LBE12:
  60:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 		if (cpu_irq_is_enabled()) {
  49              		.loc 1 60 0
  50 000a 4BB9     		cbnz	r3, .L3
  51              	.LBB14:
  52              	.LBB15:
 330:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
  53              		.loc 2 330 0
  54              		.syntax unified
  55              	@ 330 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h" 1
  56 000c 72B6     		cpsid i
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60              	.LBE15:
  61              	.LBE14:
  62              	.LBB16:
  63              	.LBB17:
  64              		.file 3 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h"
   1:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /**************************************************************************//**
   2:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @version  V4.00
   5:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @date     28. August 2014
   6:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  *
   7:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @note
   8:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  *
   9:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  ******************************************************************************/
  10:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  12:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    All rights reserved.
  13:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      specific prior written permission.
  23:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    *
  24:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  37:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  38:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  41:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  42:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   Access to dedicated instructions
  45:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   @{
  46:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** */
  47:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  48:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* ARM armcc specific functions */
  50:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  51:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
  54:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  55:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  56:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  No Operation
  57:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  58:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  60:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __NOP                             __nop
  61:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  62:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  63:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  65:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     until one of a number of events occurs.
  67:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  68:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __WFI                             __wfi
  69:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  70:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  71:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Event
  72:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  73:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  76:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __WFE                             __wfe
  77:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  78:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  79:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Send Event
  80:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  81:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  83:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __SEV                             __sev
  84:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  85:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  86:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  88:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  92:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  94:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  95:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  97:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 100:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 102:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 103:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 105:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 108:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 110:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 111:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 113:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 115:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 117:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 118:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __REV                             __rev
 119:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 120:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 121:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 123:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 125:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 127:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 128:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 131:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   rev16 r0, r0
 132:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 133:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 134:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 135:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 136:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 138:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 140:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 142:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 143:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 146:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   revsh r0, r0
 147:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 148:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 149:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 150:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 151:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 152:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 154:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 156:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Rotated value
 159:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 160:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __ROR                             __ror
 161:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 162:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 163:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Breakpoint
 164:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 165:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 168:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 171:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 173:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 174:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 175:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 176:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 178:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 180:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 182:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 183:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __RBIT                            __rbit
 184:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 185:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 186:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 188:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 189:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 190:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 193:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 195:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 196:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 198:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 199:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 200:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 203:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 205:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 206:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 208:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 209:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 210:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 213:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 215:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 216:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 218:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 219:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 220:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 221:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 223:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 224:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 225:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 227:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 228:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 230:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 231:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 232:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 233:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 235:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 236:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 237:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 239:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 240:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 242:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 243:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 244:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 245:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 247:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 248:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 249:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 251:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 252:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 254:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 256:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 257:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CLREX                           __clrex
 258:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 259:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 260:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Signed Saturate
 261:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 262:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function saturates a signed value.
 263:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 264:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             Saturated value
 267:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 268:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __SSAT                            __ssat
 269:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 270:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 271:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 273:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function saturates an unsigned value.
 274:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 275:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             Saturated value
 278:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 279:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __USAT                            __usat
 280:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 281:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 282:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Count leading zeros
 283:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 284:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 286:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             number of leading zeros in value
 288:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 289:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CLZ                             __clz
 290:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 291:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 292:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 293:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 294:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit. The carry input is shifted in at 
 295:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 296:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to rotate
 297:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Rotated value
 298:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 299:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 300:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 301:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 302:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   rrx r0, r0
 303:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 304:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 305:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 306:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 307:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 308:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 309:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 310:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 311:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 312:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 313:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 314:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 315:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 316:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 317:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 318:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 319:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 320:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 321:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 322:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 323:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 324:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 325:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 326:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 327:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 328:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 329:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 330:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 331:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 332:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 333:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 334:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 335:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 336:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 337:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 338:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 339:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 340:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 341:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 342:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 343:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 344:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 345:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 346:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 347:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 348:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 349:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 350:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 351:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 352:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 353:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 354:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 355:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 356:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 357:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 358:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 359:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 360:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 361:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 362:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 363:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 364:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 365:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 366:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 367:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 368:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 369:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 370:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 371:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* GNU gcc specific functions */
 372:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 373:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 374:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 375:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 376:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 377:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 378:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 379:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #else
 380:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 381:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 382:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 383:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 384:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  No Operation
 385:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 386:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 387:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 388:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 389:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 390:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("nop");
 391:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 392:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 393:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 394:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Interrupt
 395:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 396:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 397:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     until one of a number of events occurs.
 398:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 399:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 400:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 401:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("wfi");
 402:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 403:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 404:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 405:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Event
 406:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 407:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 408:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 409:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 410:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 411:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 412:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("wfe");
 413:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 414:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 415:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 416:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Send Event
 417:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 418:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 419:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 420:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 421:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 422:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("sev");
 423:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 424:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 425:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 426:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 427:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 428:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 429:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 430:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     memory, after the instruction has been completed.
 431:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 432:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 433:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 434:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("isb");
 435:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 436:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 437:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 438:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 439:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 440:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 441:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 442:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 443:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 444:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 445:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("dsb");
 446:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 447:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 448:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 449:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Memory Barrier
 450:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 451:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 452:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 453:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 454:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 455:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 456:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("dmb");
  65              		.loc 3 456 0
  66              		.syntax unified
  67              	@ 456 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
  68 000e BFF35F8F 		dmb
  69              	@ 0 "" 2
  70              		.thumb
  71              		.syntax unified
  72              	.LBE17:
  73              	.LBE16:
  61:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_disable();
  74              		.loc 1 61 0
  75 0012 0022     		movs	r2, #0
  76 0014 074B     		ldr	r3, .L4+4
  77 0016 1A70     		strb	r2, [r3]
  62:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_prev_interrupt_state = true;
  78              		.loc 1 62 0
  79 0018 0122     		movs	r2, #1
  80 001a 074B     		ldr	r3, .L4+8
  81 001c 1A70     		strb	r2, [r3]
  82 001e 02E0     		b	.L2
  83              	.L3:
  63:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 		} else {
  64:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 			/* Make sure the to save the prev state as false */
  65:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 			cpu_irq_prev_interrupt_state = false;
  84              		.loc 1 65 0
  85 0020 0022     		movs	r2, #0
  86 0022 054B     		ldr	r3, .L4+8
  87 0024 1A70     		strb	r2, [r3]
  88              	.L2:
  66:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 		}
  67:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  68:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	}
  69:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  70:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	cpu_irq_critical_section_counter++;
  89              		.loc 1 70 0
  90 0026 024A     		ldr	r2, .L4
  91 0028 1368     		ldr	r3, [r2]
  92 002a 0133     		adds	r3, r3, #1
  93 002c 1360     		str	r3, [r2]
  94 002e 7047     		bx	lr
  95              	.L5:
  96              		.align	2
  97              	.L4:
  98 0030 00000000 		.word	.LANCHOR0
  99 0034 00000000 		.word	.LANCHOR1
 100 0038 00000000 		.word	.LANCHOR2
 101              		.cfi_endproc
 102              	.LFE73:
 104              		.section	.text.cpu_irq_leave_critical,"ax",%progbits
 105              		.align	2
 106              		.global	cpu_irq_leave_critical
 107              		.thumb
 108              		.thumb_func
 110              	cpu_irq_leave_critical:
 111              	.LFB74:
  71:../src/common/utils/interrupt/interrupt_sam_nvic.c **** }
  72:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  73:../src/common/utils/interrupt/interrupt_sam_nvic.c **** void cpu_irq_leave_critical(void)
  74:../src/common/utils/interrupt/interrupt_sam_nvic.c **** {
 112              		.loc 1 74 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  75:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	/* Check if the user is trying to leave a critical section when not in a critical section */
  76:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	Assert(cpu_irq_critical_section_counter > 0);
  77:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  78:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	cpu_irq_critical_section_counter--;
 117              		.loc 1 78 0
 118 0000 084B     		ldr	r3, .L8
 119 0002 1A68     		ldr	r2, [r3]
 120 0004 013A     		subs	r2, r2, #1
 121 0006 1A60     		str	r2, [r3]
  79:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 
  80:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt 
  81:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	   was enabled when entering critical state */
  82:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 122              		.loc 1 82 0
 123 0008 1B68     		ldr	r3, [r3]
 124 000a 53B9     		cbnz	r3, .L6
 125              		.loc 1 82 0 is_stmt 0 discriminator 1
 126 000c 064B     		ldr	r3, .L8+4
 127 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 128 0010 13F0FF0F 		tst	r3, #255
 129 0014 05D0     		beq	.L6
  83:../src/common/utils/interrupt/interrupt_sam_nvic.c **** 		cpu_irq_enable();
 130              		.loc 1 83 0 is_stmt 1
 131 0016 0122     		movs	r2, #1
 132 0018 044B     		ldr	r3, .L8+8
 133 001a 1A70     		strb	r2, [r3]
 134              	.LBB18:
 135              	.LBB19:
 136              		.loc 3 456 0
 137              		.syntax unified
 138              	@ 456 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 139 001c BFF35F8F 		dmb
 140              	@ 0 "" 2
 141              		.thumb
 142              		.syntax unified
 143              	.LBE19:
 144              	.LBE18:
 145              	.LBB20:
 146              	.LBB21:
 319:/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h **** }
 147              		.loc 2 319 0
 148              		.syntax unified
 149              	@ 319 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmFunc.h" 1
 150 0020 62B6     		cpsie i
 151              	@ 0 "" 2
 152              		.thumb
 153              		.syntax unified
 154              	.L6:
 155 0022 7047     		bx	lr
 156              	.L9:
 157              		.align	2
 158              	.L8:
 159 0024 00000000 		.word	.LANCHOR0
 160 0028 00000000 		.word	.LANCHOR2
 161 002c 00000000 		.word	.LANCHOR1
 162              	.LBE21:
 163              	.LBE20:
 164              		.cfi_endproc
 165              	.LFE74:
 167              		.global	g_interrupt_enabled
 168              		.section	.data.g_interrupt_enabled,"aw",%progbits
 169              		.set	.LANCHOR1,. + 0
 172              	g_interrupt_enabled:
 173 0000 01       		.byte	1
 174              		.section	.bss.cpu_irq_critical_section_counter,"aw",%nobits
 175              		.align	2
 176              		.set	.LANCHOR0,. + 0
 179              	cpu_irq_critical_section_counter:
 180 0000 00000000 		.space	4
 181              		.section	.bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 182              		.set	.LANCHOR2,. + 0
 185              	cpu_irq_prev_interrupt_state:
 186 0000 00       		.space	1
 187              		.text
 188              	.Letext0:
 189              		.file 4 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 190              		.file 5 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 191              		.file 6 "/home/bekeband/workspace/OLIMEX_Start/src/interrupt/interrupt_sam_nvic.h"
 192              		.file 7 "/home/bekeband/workspace/OLIMEX_Start/src/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt_sam_nvic.c
     /tmp/ccscvMwN.s:20     .text.cpu_irq_enter_critical:00000000 $t
     /tmp/ccscvMwN.s:25     .text.cpu_irq_enter_critical:00000000 cpu_irq_enter_critical
     /tmp/ccscvMwN.s:98     .text.cpu_irq_enter_critical:00000030 $d
     /tmp/ccscvMwN.s:105    .text.cpu_irq_leave_critical:00000000 $t
     /tmp/ccscvMwN.s:110    .text.cpu_irq_leave_critical:00000000 cpu_irq_leave_critical
     /tmp/ccscvMwN.s:159    .text.cpu_irq_leave_critical:00000024 $d
     /tmp/ccscvMwN.s:172    .data.g_interrupt_enabled:00000000 g_interrupt_enabled
     /tmp/ccscvMwN.s:175    .bss.cpu_irq_critical_section_counter:00000000 $d
     /tmp/ccscvMwN.s:179    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
     /tmp/ccscvMwN.s:185    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
     /tmp/ccscvMwN.s:186    .bss.cpu_irq_prev_interrupt_state:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22b0b12aa5a71f1d303bb4102a500f20
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4.parts.h.48.e0e2ea619afac603c89fe3ed31aee15f
                           .group:00000000 wm4.tpaste.h.48.b41cf557065b1d02756f7dcff09d49b9
                           .group:00000000 wm4.stringz.h.48.ed3117824abe39c5e1281f5c5c443171
                           .group:00000000 wm4.mrepeat.h.62.d4f39ef966b631e185fbb702f9b80ecc
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.sam3s4b.h.226.24ac70e3db261e60e9d210f1232ad825
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cm3.h.160.e022dd848961f928eab0fbd8650d106b
                           .group:00000000 wm4.component_acc.h.46.865c75bb2e3a9d4f38652271e089b5c8
                           .group:00000000 wm4.component_adc.h.46.52ba0aeb0af22cb1f1d91b64dde93956
                           .group:00000000 wm4.component_chipid.h.46.43a273f46f4c32081dfee459ad8862da
                           .group:00000000 wm4.component_crccu.h.46.3d5d84ebcceb8af0782dcb99da35d7d0
                           .group:00000000 wm4.component_dacc.h.46.9b850907590bd31997b006351cf81000
                           .group:00000000 wm4.component_efc.h.46.5a9ec99498daf6c49989fb6d077d312d
                           .group:00000000 wm4.component_gpbr.h.46.1788b80e501f9df943793fa21cfbbe21
                           .group:00000000 wm4.component_hsmci.h.46.2dc64c4ca9a764fbaa2fd4fd1541de68
                           .group:00000000 wm4.component_matrix.h.46.2f4d70bb97c9923e855a3d0c5f56d95e
                           .group:00000000 wm4.component_pdc.h.46.dfd3350dd71c534e17334339feb77f7c
                           .group:00000000 wm4.component_pio.h.46.dc6628e5aa2d62d441a2f9edf013a75a
                           .group:00000000 wm4.component_pmc.h.46.3a13206d3ecf2f1946cf88c02281a26b
                           .group:00000000 wm4.component_pwm.h.46.89366ac40583cd8cd91a5fed13cff02c
                           .group:00000000 wm4.component_rstc.h.46.ef0fbefe4bc03f652c9f4a03bfd1ef46
                           .group:00000000 wm4.component_rtc.h.46.cb1a84d0ff4d043a12d4d2139109e615
                           .group:00000000 wm4.component_rtt.h.46.e35d95fd2652721ab93a68f868a14334
                           .group:00000000 wm4.component_spi.h.46.fbe616cc22048ae3dbe0157a75a200d2
                           .group:00000000 wm4.component_ssc.h.46.bf814ca321f25fab9ac26489e1dec9f0
                           .group:00000000 wm4.component_supc.h.46.013b2a48420cc402d8153de678272576
                           .group:00000000 wm4.component_tc.h.46.8ee6425921e5bd880a2aabd4ecd71522
                           .group:00000000 wm4.component_twi.h.46.1b26436f50ce08e4cbf79a4fdffbcc40
                           .group:00000000 wm4.component_uart.h.46.2ec10b01d23d880667901e3e18729356
                           .group:00000000 wm4.component_udp.h.46.817a2ee6a2f80ac39e7bfbe0ff852001
                           .group:00000000 wm4.component_usart.h.46.e73badf8b79b1144a5e58ae3c7f99afd
                           .group:00000000 wm4.component_wdt.h.46.9058aedbbe8c7f88e4bce28490af6b23
                           .group:00000000 wm4.instance_hsmci.h.46.0921b488c345ac98ef3ba7ad69508825
                           .group:00000000 wm4.instance_ssc.h.46.eebd23f2ef145a585a82c5cef060c7ea
                           .group:00000000 wm4.instance_spi.h.46.26621c46b178e9ca6762bb17a24ec410
                           .group:00000000 wm4.instance_tc0.h.46.ead4b45558da2f42ca95730d1beaaa00
                           .group:00000000 wm4.instance_twi0.h.46.cb546cfb1d37706d80f563947a14da44
                           .group:00000000 wm4.instance_twi1.h.46.5f1af4ccf4d6b33c96c4e388359796ac
                           .group:00000000 wm4.instance_pwm.h.46.76f280edd0f8b1bfcce61f4d903d0259
                           .group:00000000 wm4.instance_usart0.h.46.3c469d2b920fd3e12092b7294ca82da9
                           .group:00000000 wm4.instance_usart1.h.46.398f0294bdd8277ea274c7a419e95901
                           .group:00000000 wm4.instance_udp.h.46.40973cfe8c89095098371468c1887576
                           .group:00000000 wm4.instance_adc.h.46.63258f34d0c27b11736611a7b2b2f27b
                           .group:00000000 wm4.instance_dacc.h.46.5ae4a5035dc78df5a5c17d9d1e76e633
                           .group:00000000 wm4.instance_acc.h.46.2e4a9cb4cb3a92c914800b95f627dc57
                           .group:00000000 wm4.instance_crccu.h.46.184237fe1c77c165bb334c02320f869e
                           .group:00000000 wm4.instance_matrix.h.46.d111ad2ca1e7198ed94a2e1213aa58a3
                           .group:00000000 wm4.instance_pmc.h.46.d5d037bdb46a612e424292373f68d9f8
                           .group:00000000 wm4.instance_uart0.h.46.dc252f382de697c23724fa503782af1d
                           .group:00000000 wm4.instance_chipid.h.46.8f77c51e2ab9edf7d26da8400aab7875
                           .group:00000000 wm4.instance_uart1.h.46.283c4a1cf98fcb8466ac9bceadb0b677
                           .group:00000000 wm4.instance_efc.h.46.9f291aa734b1cb8d75fd144e72f97e2b
                           .group:00000000 wm4.instance_pioa.h.46.cf0f81cda67dc3776fe52603ff60a82f
                           .group:00000000 wm4.instance_piob.h.46.fd1caa7213e73c46d15f69de6af123fb
                           .group:00000000 wm4.instance_rstc.h.46.cb75da875c2442dd75e5a8799bd32e87
                           .group:00000000 wm4.instance_supc.h.46.90f370dafc0bdfb8646ce68458e514e6
                           .group:00000000 wm4.instance_rtt.h.46.5758ae3574a477219b8abb8fe940acb4
                           .group:00000000 wm4.instance_wdt.h.46.b7fdc89b044099cb92c28a2f305b0c66
                           .group:00000000 wm4.instance_rtc.h.46.9d6ddf34c4ffdc6eec5effd1b6d4f045
                           .group:00000000 wm4.instance_gpbr.h.46.672198928bf79182f671b278dd185af8
                           .group:00000000 wm4.sam3s4b.h.317.e7cdc49d5fdc97b75252ee6763540354
                           .group:00000000 wm4.pio_sam3s4b.h.46.b91cb9b5c8fcc478a4299e5df5dba6ff
                           .group:00000000 wm4.sam3s4b.h.452.d371283092f6029dc967aa8f16a63977
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.f5f8300e4d8e4fd74800d02abaf0cc79
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4._timeval.h.30.81d73a3eee9df6c17d94febfd4f5f751
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.31.43869e1a2488877c4cd47d2792524430
                           .group:00000000 wm4.types.h.91.482c289990230376cfd504a2907d47e7
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.8f3036bd0ed314ae051372ccc1fe8f02
                           .group:00000000 wm4.compiler.h.91.eeb6296462f96c51e8e0205ed94a5b09
                           .group:00000000 wm4.compiler.h.430.149e09620daad34df46237982e03ccfa
                           .group:00000000 wm4.interrupt_sam_nvic.h.87.7318b5cea98f92eae635f227bdfd3e60

NO UNDEFINED SYMBOLS
