   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.usart_set_sync_master_baudrate,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	usart_set_sync_master_baudrate:
  25              	.LFB74:
  26              		.file 1 "../src/usart/usart.c"
   1:../src/usart/usart.c **** /**
   2:../src/usart/usart.c ****  * \file
   3:../src/usart/usart.c ****  *
   4:../src/usart/usart.c ****  * \brief Universal Synchronous Asynchronous Receiver Transmitter (USART) driver
   5:../src/usart/usart.c ****  * for SAM.
   6:../src/usart/usart.c ****  *
   7:../src/usart/usart.c ****  * Copyright (c) 2011-2015 Atmel Corporation. All rights reserved.
   8:../src/usart/usart.c ****  *
   9:../src/usart/usart.c ****  * \asf_license_start
  10:../src/usart/usart.c ****  *
  11:../src/usart/usart.c ****  * \page License
  12:../src/usart/usart.c ****  *
  13:../src/usart/usart.c ****  * Redistribution and use in source and binary forms, with or without
  14:../src/usart/usart.c ****  * modification, are permitted provided that the following conditions are met:
  15:../src/usart/usart.c ****  *
  16:../src/usart/usart.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../src/usart/usart.c ****  *    this list of conditions and the following disclaimer.
  18:../src/usart/usart.c ****  *
  19:../src/usart/usart.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:../src/usart/usart.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:../src/usart/usart.c ****  *    and/or other materials provided with the distribution.
  22:../src/usart/usart.c ****  *
  23:../src/usart/usart.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:../src/usart/usart.c ****  *    from this software without specific prior written permission.
  25:../src/usart/usart.c ****  *
  26:../src/usart/usart.c ****  * 4. This software may only be redistributed and used in connection with an
  27:../src/usart/usart.c ****  *    Atmel microcontroller product.
  28:../src/usart/usart.c ****  *
  29:../src/usart/usart.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:../src/usart/usart.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:../src/usart/usart.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:../src/usart/usart.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:../src/usart/usart.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../src/usart/usart.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:../src/usart/usart.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:../src/usart/usart.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:../src/usart/usart.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../src/usart/usart.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../src/usart/usart.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../src/usart/usart.c ****  *
  41:../src/usart/usart.c ****  * \asf_license_stop
  42:../src/usart/usart.c ****  *
  43:../src/usart/usart.c ****  */
  44:../src/usart/usart.c **** /*
  45:../src/usart/usart.c ****  * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
  46:../src/usart/usart.c ****  */
  47:../src/usart/usart.c **** 
  48:../src/usart/usart.c **** #include "usart.h"
  49:../src/usart/usart.c **** 
  50:../src/usart/usart.c **** /// @cond 0
  51:../src/usart/usart.c **** /**INDENT-OFF**/
  52:../src/usart/usart.c **** #ifdef __cplusplus
  53:../src/usart/usart.c **** extern "C" {
  54:../src/usart/usart.c **** #endif
  55:../src/usart/usart.c **** /**INDENT-ON**/
  56:../src/usart/usart.c **** /// @endcond
  57:../src/usart/usart.c **** 
  58:../src/usart/usart.c **** /**
  59:../src/usart/usart.c ****  * \defgroup sam_drivers_usart_group Universal Synchronous Asynchronous
  60:../src/usart/usart.c ****  * Receiver Transmitter (USART)
  61:../src/usart/usart.c ****  *
  62:../src/usart/usart.c ****  * The Universal Synchronous Asynchronous Receiver Transceiver (USART)
  63:../src/usart/usart.c ****  * provides one full duplex universal synchronous asynchronous serial link.
  64:../src/usart/usart.c ****  * Data frame format is widely programmable (data length, parity, number of
  65:../src/usart/usart.c ****  * stop bits) to support a maximum of standards. The receiver implements
  66:../src/usart/usart.c ****  * parity error, framing error and overrun error detection. The receiver
  67:../src/usart/usart.c ****  * time-out enables handling variable-length frames and the transmitter
  68:../src/usart/usart.c ****  * timeguard facilitates communications with slow remote devices. Multidrop
  69:../src/usart/usart.c ****  * communications are also supported through address bit handling in reception
  70:../src/usart/usart.c ****  * and transmission. The driver supports the following modes:
  71:../src/usart/usart.c ****  * RS232, RS485, SPI, IrDA, ISO7816, MODEM, Hardware handshaking and LIN.
  72:../src/usart/usart.c ****  *
  73:../src/usart/usart.c ****  * @{
  74:../src/usart/usart.c ****  */
  75:../src/usart/usart.c **** 
  76:../src/usart/usart.c **** /* The write protect key value. */
  77:../src/usart/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  78:../src/usart/usart.c **** #define US_WPMR_WPKEY_PASSWD    US_WPMR_WPKEY(0x555341U)
  79:../src/usart/usart.c **** #endif
  80:../src/usart/usart.c **** 
  81:../src/usart/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  82:../src/usart/usart.c **** #  define US_WPMR_WPKEY_PASSWD US_WPMR_WPKEY(US_WPKEY_VALUE)
  83:../src/usart/usart.c **** #endif
  84:../src/usart/usart.c **** 
  85:../src/usart/usart.c **** /* The CD value scope programmed in MR register. */
  86:../src/usart/usart.c **** #define MIN_CD_VALUE                  0x01
  87:../src/usart/usart.c **** #define MIN_CD_VALUE_SPI              0x04
  88:../src/usart/usart.c **** #define MAX_CD_VALUE                  US_BRGR_CD_Msk
  89:../src/usart/usart.c **** 
  90:../src/usart/usart.c **** /* The receiver sampling divide of baudrate clock. */
  91:../src/usart/usart.c **** #define HIGH_FRQ_SAMPLE_DIV           16
  92:../src/usart/usart.c **** #define LOW_FRQ_SAMPLE_DIV            8
  93:../src/usart/usart.c **** 
  94:../src/usart/usart.c **** /* Max transmitter timeguard. */
  95:../src/usart/usart.c **** #define MAX_TRAN_GUARD_TIME           US_TTGR_TG_Msk
  96:../src/usart/usart.c **** 
  97:../src/usart/usart.c **** /* The non-existent parity error number. */
  98:../src/usart/usart.c **** #define USART_PARITY_ERROR            5
  99:../src/usart/usart.c **** 
 100:../src/usart/usart.c **** /* ISO7816 protocol type. */
 101:../src/usart/usart.c **** #define ISO7816_T_0                   0
 102:../src/usart/usart.c **** #define ISO7816_T_1                   1
 103:../src/usart/usart.c **** 
 104:../src/usart/usart.c **** /**
 105:../src/usart/usart.c ****  * \brief Calculate a clock divider(CD) and a fractional part (FP) for the
 106:../src/usart/usart.c ****  * USART asynchronous modes to generate a baudrate as close as possible to
 107:../src/usart/usart.c ****  * the baudrate set point.
 108:../src/usart/usart.c ****  *
 109:../src/usart/usart.c ****  * \note Baud rate calculation: Baudrate = ul_mck/(Over * (CD + FP/8))
 110:../src/usart/usart.c ****  * (Over being 16 or 8). The maximal oversampling is selected if it allows to
 111:../src/usart/usart.c ****  * generate a baudrate close to the set point.
 112:../src/usart/usart.c ****  *
 113:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 114:../src/usart/usart.c ****  * \param baudrate Baud rate set point.
 115:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 116:../src/usart/usart.c ****  *
 117:../src/usart/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 118:../src/usart/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 119:../src/usart/usart.c ****  * frequency.
 120:../src/usart/usart.c ****  */
 121:../src/usart/usart.c **** uint32_t usart_set_async_baudrate(Usart *p_usart,
 122:../src/usart/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 123:../src/usart/usart.c **** {
 124:../src/usart/usart.c **** 	uint32_t over;
 125:../src/usart/usart.c **** 	uint32_t cd_fp;
 126:../src/usart/usart.c **** 	uint32_t cd;
 127:../src/usart/usart.c **** 	uint32_t fp;
 128:../src/usart/usart.c **** 
 129:../src/usart/usart.c **** 	/* Calculate the receiver sampling divide of baudrate clock. */
 130:../src/usart/usart.c **** 	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
 131:../src/usart/usart.c **** 		over = HIGH_FRQ_SAMPLE_DIV;
 132:../src/usart/usart.c **** 	} else {
 133:../src/usart/usart.c **** 		over = LOW_FRQ_SAMPLE_DIV;
 134:../src/usart/usart.c **** 	}
 135:../src/usart/usart.c **** 
 136:../src/usart/usart.c **** 	/* Calculate clock divider according to the fraction calculated formula. */
 137:../src/usart/usart.c **** 	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
 138:../src/usart/usart.c **** 	cd = cd_fp >> 3;
 139:../src/usart/usart.c **** 	fp = cd_fp & 0x07;
 140:../src/usart/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 141:../src/usart/usart.c **** 		return 1;
 142:../src/usart/usart.c **** 	}
 143:../src/usart/usart.c **** 
 144:../src/usart/usart.c **** 	/* Configure the OVER bit in MR register. */
 145:../src/usart/usart.c **** 	if (over == 8) {
 146:../src/usart/usart.c **** 		p_usart->US_MR |= US_MR_OVER;
 147:../src/usart/usart.c **** 	}
 148:../src/usart/usart.c **** 
 149:../src/usart/usart.c **** 	/* Configure the baudrate generate register. */
 150:../src/usart/usart.c **** 	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
 151:../src/usart/usart.c **** 
 152:../src/usart/usart.c **** 	return 0;
 153:../src/usart/usart.c **** }
 154:../src/usart/usart.c **** 
 155:../src/usart/usart.c **** /**
 156:../src/usart/usart.c ****  * \brief Calculate a clock divider for the USART synchronous master modes
 157:../src/usart/usart.c ****  * to generate a baudrate as close as possible to the baudrate set point.
 158:../src/usart/usart.c ****  *
 159:../src/usart/usart.c ****  * \note Synchronous baudrate calculation: baudrate = ul_mck / cd
 160:../src/usart/usart.c ****  *
 161:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 162:../src/usart/usart.c ****  * \param baudrate Baud rate set point.
 163:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 164:../src/usart/usart.c ****  *
 165:../src/usart/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 166:../src/usart/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 167:../src/usart/usart.c ****  * frequency.
 168:../src/usart/usart.c ****  */
 169:../src/usart/usart.c **** static uint32_t usart_set_sync_master_baudrate(Usart *p_usart,
 170:../src/usart/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 171:../src/usart/usart.c **** {
  27              		.loc 1 171 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 172:../src/usart/usart.c **** 	uint32_t cd;
 173:../src/usart/usart.c **** 
 174:../src/usart/usart.c **** 	/* Calculate clock divider according to the formula in synchronous mode. */
 175:../src/usart/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
  33              		.loc 1 175 0
  34 0000 02EB5102 		add	r2, r2, r1, lsr #1
  35              	.LVL1:
  36 0004 B2FBF1F1 		udiv	r1, r2, r1
  37              	.LVL2:
 176:../src/usart/usart.c **** 
 177:../src/usart/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  38              		.loc 1 177 0
  39 0008 4A1E     		subs	r2, r1, #1
  40 000a 4FF6FE73 		movw	r3, #65534
  41 000e 9A42     		cmp	r2, r3
  42 0010 08D8     		bhi	.L3
 178:../src/usart/usart.c **** 		return 1;
 179:../src/usart/usart.c **** 	}
 180:../src/usart/usart.c **** 
 181:../src/usart/usart.c **** 	/* Configure the baudrate generate register. */
 182:../src/usart/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
  43              		.loc 1 182 0
  44 0012 0162     		str	r1, [r0, #32]
 183:../src/usart/usart.c **** 
 184:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
  45              		.loc 1 184 0
  46 0014 4368     		ldr	r3, [r0, #4]
 185:../src/usart/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
  47              		.loc 1 185 0
  48 0016 23F49873 		bic	r3, r3, #304
  49 001a 43F48073 		orr	r3, r3, #256
 184:../src/usart/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
  50              		.loc 1 184 0
  51 001e 4360     		str	r3, [r0, #4]
 186:../src/usart/usart.c **** 	return 0;
  52              		.loc 1 186 0
  53 0020 0020     		movs	r0, #0
  54              	.LVL3:
  55 0022 7047     		bx	lr
  56              	.LVL4:
  57              	.L3:
 178:../src/usart/usart.c **** 	}
  58              		.loc 1 178 0
  59 0024 0120     		movs	r0, #1
  60              	.LVL5:
 187:../src/usart/usart.c **** }
  61              		.loc 1 187 0
  62 0026 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE74:
  66              		.section	.text.usart_set_sync_slave_baudrate,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	usart_set_sync_slave_baudrate:
  72              	.LFB75:
 188:../src/usart/usart.c **** 
 189:../src/usart/usart.c **** /**
 190:../src/usart/usart.c ****  * \brief Select the SCK pin as the source of baud rate for the USART
 191:../src/usart/usart.c ****  * synchronous slave modes.
 192:../src/usart/usart.c ****  *
 193:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 194:../src/usart/usart.c ****  */
 195:../src/usart/usart.c **** static void usart_set_sync_slave_baudrate(Usart *p_usart)
 196:../src/usart/usart.c **** {
  73              		.loc 1 196 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL6:
 197:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
  79              		.loc 1 197 0
  80 0000 4368     		ldr	r3, [r0, #4]
 198:../src/usart/usart.c **** 			US_MR_USCLKS_SCK | US_MR_SYNC;
  81              		.loc 1 198 0
  82 0002 43F49873 		orr	r3, r3, #304
 197:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
  83              		.loc 1 197 0
  84 0006 4360     		str	r3, [r0, #4]
  85 0008 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE75:
  89              		.section	.text.usart_set_spi_master_baudrate,"ax",%progbits
  90              		.align	2
  91              		.thumb
  92              		.thumb_func
  94              	usart_set_spi_master_baudrate:
  95              	.LFB76:
 199:../src/usart/usart.c **** }
 200:../src/usart/usart.c **** 
 201:../src/usart/usart.c **** /**
 202:../src/usart/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART SPI master mode to
 203:../src/usart/usart.c ****  * generate a baud rate as close as possible to the baud rate set point.
 204:../src/usart/usart.c ****  *
 205:../src/usart/usart.c ****  * \note Baud rate calculation:
 206:../src/usart/usart.c ****  * \f$ Baudrate = \frac{SelectedClock}{CD} \f$.
 207:../src/usart/usart.c ****  *
 208:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 209:../src/usart/usart.c ****  * \param baudrate Baud rate set point.
 210:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 211:../src/usart/usart.c ****  *
 212:../src/usart/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 213:../src/usart/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 214:../src/usart/usart.c ****  * frequency.
 215:../src/usart/usart.c ****  */
 216:../src/usart/usart.c **** static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
 217:../src/usart/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 218:../src/usart/usart.c **** {
  96              		.loc 1 218 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL7:
 219:../src/usart/usart.c **** 	uint32_t cd;
 220:../src/usart/usart.c **** 
 221:../src/usart/usart.c **** 	/* Calculate the clock divider according to the formula in SPI mode. */
 222:../src/usart/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
 102              		.loc 1 222 0
 103 0000 02EB5102 		add	r2, r2, r1, lsr #1
 104              	.LVL8:
 105 0004 B2FBF1F1 		udiv	r1, r2, r1
 106              	.LVL9:
 223:../src/usart/usart.c **** 
 224:../src/usart/usart.c **** 	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
 107              		.loc 1 224 0
 108 0008 0A1F     		subs	r2, r1, #4
 109 000a 4FF6FB73 		movw	r3, #65531
 110 000e 9A42     		cmp	r2, r3
 111 0010 02D8     		bhi	.L7
 225:../src/usart/usart.c **** 		return 1;
 226:../src/usart/usart.c **** 	}
 227:../src/usart/usart.c **** 
 228:../src/usart/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 112              		.loc 1 228 0
 113 0012 0162     		str	r1, [r0, #32]
 229:../src/usart/usart.c **** 
 230:../src/usart/usart.c **** 	return 0;
 114              		.loc 1 230 0
 115 0014 0020     		movs	r0, #0
 116              	.LVL10:
 117 0016 7047     		bx	lr
 118              	.LVL11:
 119              	.L7:
 225:../src/usart/usart.c **** 		return 1;
 120              		.loc 1 225 0
 121 0018 0120     		movs	r0, #1
 122              	.LVL12:
 231:../src/usart/usart.c **** }
 123              		.loc 1 231 0
 124 001a 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE76:
 128              		.section	.text.usart_set_spi_slave_baudrate,"ax",%progbits
 129              		.align	2
 130              		.thumb
 131              		.thumb_func
 133              	usart_set_spi_slave_baudrate:
 134              	.LFB77:
 232:../src/usart/usart.c **** 
 233:../src/usart/usart.c **** /**
 234:../src/usart/usart.c ****  * \brief Select the SCK pin as the source of baudrate for the USART SPI slave
 235:../src/usart/usart.c ****  * mode.
 236:../src/usart/usart.c ****  *
 237:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 238:../src/usart/usart.c ****  */
 239:../src/usart/usart.c **** static void usart_set_spi_slave_baudrate(Usart *p_usart)
 240:../src/usart/usart.c **** {
 135              		.loc 1 240 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140              	.LVL13:
 241:../src/usart/usart.c **** 	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
 141              		.loc 1 241 0
 142 0000 4368     		ldr	r3, [r0, #4]
 143 0002 23F03003 		bic	r3, r3, #48
 144 0006 4360     		str	r3, [r0, #4]
 242:../src/usart/usart.c **** 	p_usart->US_MR |= US_MR_USCLKS_SCK;
 145              		.loc 1 242 0
 146 0008 4368     		ldr	r3, [r0, #4]
 147 000a 43F03003 		orr	r3, r3, #48
 148 000e 4360     		str	r3, [r0, #4]
 149 0010 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE77:
 153 0012 00BF     		.section	.text.usart_set_iso7816_clock,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 158              	usart_set_iso7816_clock:
 159              	.LFB86:
 243:../src/usart/usart.c **** }
 244:../src/usart/usart.c **** 
 245:../src/usart/usart.c **** /**
 246:../src/usart/usart.c ****  * \brief Reset the USART and disable TX and RX.
 247:../src/usart/usart.c ****  *
 248:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 249:../src/usart/usart.c ****  */
 250:../src/usart/usart.c **** void usart_reset(Usart *p_usart)
 251:../src/usart/usart.c **** {
 252:../src/usart/usart.c **** 	/* Disable the Write Protect. */
 253:../src/usart/usart.c **** 	usart_disable_writeprotect(p_usart);
 254:../src/usart/usart.c **** 
 255:../src/usart/usart.c **** 	/* Reset registers that could cause unpredictable behavior after reset. */
 256:../src/usart/usart.c **** 	p_usart->US_MR = 0;
 257:../src/usart/usart.c **** 	p_usart->US_RTOR = 0;
 258:../src/usart/usart.c **** 	p_usart->US_TTGR = 0;
 259:../src/usart/usart.c **** 
 260:../src/usart/usart.c **** 	/* Disable TX and RX. */
 261:../src/usart/usart.c **** 	usart_reset_tx(p_usart);
 262:../src/usart/usart.c **** 	usart_reset_rx(p_usart);
 263:../src/usart/usart.c **** 	/* Reset status bits. */
 264:../src/usart/usart.c **** 	usart_reset_status(p_usart);
 265:../src/usart/usart.c **** 	/* Turn off RTS and DTR if exist. */
 266:../src/usart/usart.c **** 	usart_drive_RTS_pin_high(p_usart);
 267:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 268:../src/usart/usart.c **** 	usart_drive_DTR_pin_high(p_usart);
 269:../src/usart/usart.c **** #endif
 270:../src/usart/usart.c **** }
 271:../src/usart/usart.c **** 
 272:../src/usart/usart.c **** /**
 273:../src/usart/usart.c ****  * \brief Configure USART to work in RS232 mode.
 274:../src/usart/usart.c ****  *
 275:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 276:../src/usart/usart.c ****  *
 277:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 278:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 279:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 280:../src/usart/usart.c ****  *
 281:../src/usart/usart.c ****  * \retval 0 on success.
 282:../src/usart/usart.c ****  * \retval 1 on failure.
 283:../src/usart/usart.c ****  */
 284:../src/usart/usart.c **** uint32_t usart_init_rs232(Usart *p_usart,
 285:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 286:../src/usart/usart.c **** {
 287:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 288:../src/usart/usart.c **** 
 289:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 290:../src/usart/usart.c **** 	usart_reset(p_usart);
 291:../src/usart/usart.c **** 
 292:../src/usart/usart.c **** 	ul_reg_val = 0;
 293:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 294:../src/usart/usart.c **** 	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
 295:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 296:../src/usart/usart.c **** 		return 1;
 297:../src/usart/usart.c **** 	}
 298:../src/usart/usart.c **** 
 299:../src/usart/usart.c **** 	/* Configure the USART option. */
 300:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 301:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 302:../src/usart/usart.c **** 
 303:../src/usart/usart.c **** 	/* Configure the USART mode as normal mode. */
 304:../src/usart/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 305:../src/usart/usart.c **** 
 306:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 307:../src/usart/usart.c **** 
 308:../src/usart/usart.c **** 	return 0;
 309:../src/usart/usart.c **** }
 310:../src/usart/usart.c **** 
 311:../src/usart/usart.c **** /**
 312:../src/usart/usart.c ****  * \brief Configure USART to work in hardware handshaking mode.
 313:../src/usart/usart.c ****  *
 314:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 315:../src/usart/usart.c ****  *
 316:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 317:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 318:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 319:../src/usart/usart.c ****  *
 320:../src/usart/usart.c ****  * \retval 0 on success.
 321:../src/usart/usart.c ****  * \retval 1 on failure.
 322:../src/usart/usart.c ****  */
 323:../src/usart/usart.c **** uint32_t usart_init_hw_handshaking(Usart *p_usart,
 324:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 325:../src/usart/usart.c **** {
 326:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 327:../src/usart/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 328:../src/usart/usart.c **** 		return 1;
 329:../src/usart/usart.c **** 	}
 330:../src/usart/usart.c **** 
 331:../src/usart/usart.c **** 	/* Set hardware handshaking mode. */
 332:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 333:../src/usart/usart.c **** 			US_MR_USART_MODE_HW_HANDSHAKING;
 334:../src/usart/usart.c **** 
 335:../src/usart/usart.c **** 	return 0;
 336:../src/usart/usart.c **** }
 337:../src/usart/usart.c **** 
 338:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 339:../src/usart/usart.c **** 
 340:../src/usart/usart.c **** /**
 341:../src/usart/usart.c ****  * \brief Configure USART to work in modem mode.
 342:../src/usart/usart.c ****  *
 343:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 344:../src/usart/usart.c ****  *
 345:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 346:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 347:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 348:../src/usart/usart.c ****  *
 349:../src/usart/usart.c ****  * \retval 0 on success.
 350:../src/usart/usart.c ****  * \retval 1 on failure.
 351:../src/usart/usart.c ****  */
 352:../src/usart/usart.c **** uint32_t usart_init_modem(Usart *p_usart,
 353:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 354:../src/usart/usart.c **** {
 355:../src/usart/usart.c **** 	/*
 356:../src/usart/usart.c **** 	 * SAM3S, SAM4S and SAM4E series support MODEM mode only on USART1,
 357:../src/usart/usart.c **** 	 * SAM3U and SAM4L series support MODEM mode only on USART0.
 358:../src/usart/usart.c **** 	 */
 359:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM4E)
 360:../src/usart/usart.c **** #ifdef USART1
 361:../src/usart/usart.c **** 	if (p_usart != USART1) {
 362:../src/usart/usart.c **** 		return 1;
 363:../src/usart/usart.c **** 	}
 364:../src/usart/usart.c **** #endif
 365:../src/usart/usart.c **** #elif (SAM3U || SAM4L)
 366:../src/usart/usart.c **** 	if (p_usart != USART0) {
 367:../src/usart/usart.c **** 		return 1;
 368:../src/usart/usart.c **** 	}
 369:../src/usart/usart.c **** #endif
 370:../src/usart/usart.c **** 
 371:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 372:../src/usart/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 373:../src/usart/usart.c **** 		return 1;
 374:../src/usart/usart.c **** 	}
 375:../src/usart/usart.c **** 
 376:../src/usart/usart.c **** 	/* Set MODEM mode. */
 377:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 378:../src/usart/usart.c **** 			US_MR_USART_MODE_MODEM;
 379:../src/usart/usart.c **** 
 380:../src/usart/usart.c **** 	return 0;
 381:../src/usart/usart.c **** }
 382:../src/usart/usart.c **** #endif
 383:../src/usart/usart.c **** 
 384:../src/usart/usart.c **** /**
 385:../src/usart/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a master.
 386:../src/usart/usart.c ****  *
 387:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 388:../src/usart/usart.c ****  *
 389:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 390:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 391:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 392:../src/usart/usart.c ****  *
 393:../src/usart/usart.c ****  * \retval 0 on success.
 394:../src/usart/usart.c ****  * \retval 1 on failure.
 395:../src/usart/usart.c ****  */
 396:../src/usart/usart.c **** uint32_t usart_init_sync_master(Usart *p_usart,
 397:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 398:../src/usart/usart.c **** {
 399:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 400:../src/usart/usart.c **** 
 401:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 402:../src/usart/usart.c **** 	usart_reset(p_usart);
 403:../src/usart/usart.c **** 
 404:../src/usart/usart.c **** 	ul_reg_val = 0;
 405:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 406:../src/usart/usart.c **** 	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
 407:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 408:../src/usart/usart.c **** 		return 1;
 409:../src/usart/usart.c **** 	}
 410:../src/usart/usart.c **** 
 411:../src/usart/usart.c **** 	/* Configure the USART option. */
 412:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 413:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 414:../src/usart/usart.c **** 
 415:../src/usart/usart.c **** 	/* Set normal mode and output clock as synchronous master. */
 416:../src/usart/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
 417:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 418:../src/usart/usart.c **** 
 419:../src/usart/usart.c **** 	return 0;
 420:../src/usart/usart.c **** }
 421:../src/usart/usart.c **** 
 422:../src/usart/usart.c **** /**
 423:../src/usart/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a slave.
 424:../src/usart/usart.c ****  *
 425:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 426:../src/usart/usart.c ****  *
 427:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 428:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 429:../src/usart/usart.c ****  *
 430:../src/usart/usart.c ****  * \retval 0 on success.
 431:../src/usart/usart.c ****  * \retval 1 on failure.
 432:../src/usart/usart.c ****  */
 433:../src/usart/usart.c **** uint32_t usart_init_sync_slave(Usart *p_usart,
 434:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt)
 435:../src/usart/usart.c **** {
 436:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 437:../src/usart/usart.c **** 
 438:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 439:../src/usart/usart.c **** 	usart_reset(p_usart);
 440:../src/usart/usart.c **** 
 441:../src/usart/usart.c **** 	ul_reg_val = 0;
 442:../src/usart/usart.c **** 	usart_set_sync_slave_baudrate(p_usart);
 443:../src/usart/usart.c **** 
 444:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 445:../src/usart/usart.c **** 	if (!p_usart_opt) {
 446:../src/usart/usart.c **** 		return 1;
 447:../src/usart/usart.c **** 	}
 448:../src/usart/usart.c **** 
 449:../src/usart/usart.c **** 	/* Configure the USART option. */
 450:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 451:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 452:../src/usart/usart.c **** 
 453:../src/usart/usart.c **** 	/* Set normal mode. */
 454:../src/usart/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 455:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 456:../src/usart/usart.c **** 
 457:../src/usart/usart.c **** 	return 0;
 458:../src/usart/usart.c **** }
 459:../src/usart/usart.c **** 
 460:../src/usart/usart.c **** /**
 461:../src/usart/usart.c ****  * \brief Configure USART to work in RS485 mode.
 462:../src/usart/usart.c ****  *
 463:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 464:../src/usart/usart.c ****  *
 465:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 466:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 467:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 468:../src/usart/usart.c ****  *
 469:../src/usart/usart.c ****  * \retval 0 on success.
 470:../src/usart/usart.c ****  * \retval 1 on failure.
 471:../src/usart/usart.c ****  */
 472:../src/usart/usart.c **** uint32_t usart_init_rs485(Usart *p_usart,
 473:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 474:../src/usart/usart.c **** {
 475:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 476:../src/usart/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 477:../src/usart/usart.c **** 		return 1;
 478:../src/usart/usart.c **** 	}
 479:../src/usart/usart.c **** 
 480:../src/usart/usart.c **** 	/* Set RS485 mode. */
 481:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 482:../src/usart/usart.c **** 			US_MR_USART_MODE_RS485;
 483:../src/usart/usart.c **** 
 484:../src/usart/usart.c **** 	return 0;
 485:../src/usart/usart.c **** }
 486:../src/usart/usart.c **** 
 487:../src/usart/usart.c **** #if (!SAMG55 && !SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
 488:../src/usart/usart.c **** /**
 489:../src/usart/usart.c ****  * \brief Configure USART to work in IrDA mode.
 490:../src/usart/usart.c ****  *
 491:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 492:../src/usart/usart.c ****  *
 493:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 494:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 495:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 496:../src/usart/usart.c ****  *
 497:../src/usart/usart.c ****  * \retval 0 on success.
 498:../src/usart/usart.c ****  * \retval 1 on failure.
 499:../src/usart/usart.c ****  */
 500:../src/usart/usart.c **** uint32_t usart_init_irda(Usart *p_usart,
 501:../src/usart/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 502:../src/usart/usart.c **** {
 503:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 504:../src/usart/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 505:../src/usart/usart.c **** 		return 1;
 506:../src/usart/usart.c **** 	}
 507:../src/usart/usart.c **** 
 508:../src/usart/usart.c **** 	/* Set IrDA filter. */
 509:../src/usart/usart.c **** 	p_usart->US_IF = p_usart_opt->irda_filter;
 510:../src/usart/usart.c **** 
 511:../src/usart/usart.c **** 	/* Set IrDA mode. */
 512:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 513:../src/usart/usart.c **** 			US_MR_USART_MODE_IRDA;
 514:../src/usart/usart.c **** 
 515:../src/usart/usart.c **** 	return 0;
 516:../src/usart/usart.c **** }
 517:../src/usart/usart.c **** #endif
 518:../src/usart/usart.c **** 
 519:../src/usart/usart.c **** #if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
 520:../src/usart/usart.c **** /**
 521:../src/usart/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART ISO7816 mode to
 522:../src/usart/usart.c ****  * generate an ISO7816 clock as close as possible to the clock set point.
 523:../src/usart/usart.c ****  *
 524:../src/usart/usart.c ****  * \note ISO7816 clock calculation: Clock = ul_mck / cd
 525:../src/usart/usart.c ****  *
 526:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 527:../src/usart/usart.c ****  * \param clock ISO7816 clock set point.
 528:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 529:../src/usart/usart.c ****  *
 530:../src/usart/usart.c ****  * \retval 0 ISO7816 clock is successfully initialized.
 531:../src/usart/usart.c ****  * \retval 1 ISO7816 clock set point is out of range for the given input clock
 532:../src/usart/usart.c ****  * frequency.
 533:../src/usart/usart.c ****  */
 534:../src/usart/usart.c **** static uint32_t usart_set_iso7816_clock(Usart *p_usart,
 535:../src/usart/usart.c **** 		uint32_t clock, uint32_t ul_mck)
 536:../src/usart/usart.c **** {
 160              		.loc 1 536 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL14:
 537:../src/usart/usart.c **** 	uint32_t cd;
 538:../src/usart/usart.c **** 
 539:../src/usart/usart.c **** 	/* Calculate clock divider according to the formula in ISO7816 mode. */
 540:../src/usart/usart.c **** 	cd = (ul_mck + clock / 2) / clock;
 166              		.loc 1 540 0
 167 0000 02EB5102 		add	r2, r2, r1, lsr #1
 168              	.LVL15:
 169 0004 B2FBF1F1 		udiv	r1, r2, r1
 170              	.LVL16:
 541:../src/usart/usart.c **** 
 542:../src/usart/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 171              		.loc 1 542 0
 172 0008 4A1E     		subs	r2, r1, #1
 173 000a 4FF6FE73 		movw	r3, #65534
 174 000e 9A42     		cmp	r2, r3
 175 0010 0AD8     		bhi	.L11
 543:../src/usart/usart.c **** 		return 1;
 544:../src/usart/usart.c **** 	}
 545:../src/usart/usart.c **** 
 546:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
 176              		.loc 1 546 0
 177 0012 4368     		ldr	r3, [r0, #4]
 547:../src/usart/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 178              		.loc 1 547 0
 179 0014 23F44023 		bic	r3, r3, #786432
 180 0018 23F49873 		bic	r3, r3, #304
 181 001c 43F48023 		orr	r3, r3, #262144
 546:../src/usart/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 182              		.loc 1 546 0
 183 0020 4360     		str	r3, [r0, #4]
 548:../src/usart/usart.c **** 
 549:../src/usart/usart.c **** 	/* Configure the baudrate generate register. */
 550:../src/usart/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 184              		.loc 1 550 0
 185 0022 0162     		str	r1, [r0, #32]
 551:../src/usart/usart.c **** 
 552:../src/usart/usart.c **** 	return 0;
 186              		.loc 1 552 0
 187 0024 0020     		movs	r0, #0
 188              	.LVL17:
 189 0026 7047     		bx	lr
 190              	.LVL18:
 191              	.L11:
 543:../src/usart/usart.c **** 	}
 192              		.loc 1 543 0
 193 0028 0120     		movs	r0, #1
 194              	.LVL19:
 553:../src/usart/usart.c **** }
 195              		.loc 1 553 0
 196 002a 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE86:
 200              		.section	.text.usart_set_async_baudrate,"ax",%progbits
 201              		.align	2
 202              		.global	usart_set_async_baudrate
 203              		.thumb
 204              		.thumb_func
 206              	usart_set_async_baudrate:
 207              	.LFB73:
 123:../src/usart/usart.c **** 	uint32_t over;
 208              		.loc 1 123 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL20:
 214 0000 30B4     		push	{r4, r5}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 4, -8
 217              		.cfi_offset 5, -4
 130:../src/usart/usart.c **** 		over = HIGH_FRQ_SAMPLE_DIV;
 218              		.loc 1 130 0
 219 0002 B2EB011F 		cmp	r2, r1, lsl #4
 220 0006 01D3     		bcc	.L16
 131:../src/usart/usart.c **** 	} else {
 221              		.loc 1 131 0
 222 0008 1024     		movs	r4, #16
 223 000a 00E0     		b	.L13
 224              	.L16:
 133:../src/usart/usart.c **** 	}
 225              		.loc 1 133 0
 226 000c 0824     		movs	r4, #8
 227              	.L13:
 228              	.LVL21:
 137:../src/usart/usart.c **** 	cd = cd_fp >> 3;
 229              		.loc 1 137 0
 230 000e 01FB04F1 		mul	r1, r1, r4
 231              	.LVL22:
 232 0012 4B08     		lsrs	r3, r1, #1
 233 0014 03EBC202 		add	r2, r3, r2, lsl #3
 234              	.LVL23:
 235 0018 B2FBF1F2 		udiv	r2, r2, r1
 236              	.LVL24:
 138:../src/usart/usart.c **** 	fp = cd_fp & 0x07;
 237              		.loc 1 138 0
 238 001c D308     		lsrs	r3, r2, #3
 239              	.LVL25:
 140:../src/usart/usart.c **** 		return 1;
 240              		.loc 1 140 0
 241 001e 5D1E     		subs	r5, r3, #1
 242 0020 4FF6FE71 		movw	r1, #65534
 243 0024 8D42     		cmp	r5, r1
 244 0026 0CD8     		bhi	.L17
 145:../src/usart/usart.c **** 		p_usart->US_MR |= US_MR_OVER;
 245              		.loc 1 145 0
 246 0028 082C     		cmp	r4, #8
 247 002a 03D1     		bne	.L15
 146:../src/usart/usart.c **** 	}
 248              		.loc 1 146 0
 249 002c 4168     		ldr	r1, [r0, #4]
 250 002e 41F40021 		orr	r1, r1, #524288
 251 0032 4160     		str	r1, [r0, #4]
 252              	.L15:
 150:../src/usart/usart.c **** 
 253              		.loc 1 150 0
 254 0034 1204     		lsls	r2, r2, #16
 255              	.LVL26:
 256 0036 02F4E022 		and	r2, r2, #458752
 257 003a 1A43     		orrs	r2, r2, r3
 258 003c 0262     		str	r2, [r0, #32]
 152:../src/usart/usart.c **** }
 259              		.loc 1 152 0
 260 003e 0020     		movs	r0, #0
 261              	.LVL27:
 262 0040 00E0     		b	.L14
 263              	.LVL28:
 264              	.L17:
 141:../src/usart/usart.c **** 	}
 265              		.loc 1 141 0
 266 0042 0120     		movs	r0, #1
 267              	.LVL29:
 268              	.L14:
 153:../src/usart/usart.c **** 
 269              		.loc 1 153 0
 270 0044 30BC     		pop	{r4, r5}
 271              		.cfi_restore 5
 272              		.cfi_restore 4
 273              		.cfi_def_cfa_offset 0
 274              	.LVL30:
 275 0046 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE73:
 279              		.section	.text.usart_reset_iterations,"ax",%progbits
 280              		.align	2
 281              		.global	usart_reset_iterations
 282              		.thumb
 283              		.thumb_func
 285              	usart_reset_iterations:
 286              	.LFB88:
 554:../src/usart/usart.c **** 
 555:../src/usart/usart.c **** /**
 556:../src/usart/usart.c ****  * \brief Configure USART to work in ISO7816 mode.
 557:../src/usart/usart.c ****  *
 558:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 559:../src/usart/usart.c ****  *
 560:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 561:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 562:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 563:../src/usart/usart.c ****  *
 564:../src/usart/usart.c ****  * \retval 0 on success.
 565:../src/usart/usart.c ****  * \retval 1 on failure.
 566:../src/usart/usart.c ****  */
 567:../src/usart/usart.c **** uint32_t usart_init_iso7816(Usart *p_usart,
 568:../src/usart/usart.c **** 		const usart_iso7816_opt_t *p_usart_opt, uint32_t ul_mck)
 569:../src/usart/usart.c **** {
 570:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 571:../src/usart/usart.c **** 
 572:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 573:../src/usart/usart.c **** 	usart_reset(p_usart);
 574:../src/usart/usart.c **** 
 575:../src/usart/usart.c **** 	ul_reg_val = 0;
 576:../src/usart/usart.c **** 
 577:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 578:../src/usart/usart.c **** 	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
 579:../src/usart/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 580:../src/usart/usart.c **** 		return 1;
 581:../src/usart/usart.c **** 	}
 582:../src/usart/usart.c **** 
 583:../src/usart/usart.c **** 	if (p_usart_opt->protocol_type == ISO7816_T_0) {
 584:../src/usart/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 585:../src/usart/usart.c **** 				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
 586:../src/usart/usart.c **** 
 587:../src/usart/usart.c **** 		if (p_usart_opt->bit_order) {
 588:../src/usart/usart.c **** 			ul_reg_val |= US_MR_MSBF;
 589:../src/usart/usart.c **** 		}
 590:../src/usart/usart.c **** 	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
 591:../src/usart/usart.c **** 		/*
 592:../src/usart/usart.c **** 		 * Only LSBF is used in the T=1 protocol, and max_iterations field
 593:../src/usart/usart.c **** 		 * is only used in T=0 mode.
 594:../src/usart/usart.c **** 		 */
 595:../src/usart/usart.c **** 		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
 596:../src/usart/usart.c **** 			return 1;
 597:../src/usart/usart.c **** 		}
 598:../src/usart/usart.c **** 
 599:../src/usart/usart.c **** 		/* Set USART mode to ISO7816, T=1, and always uses 1 stop bit. */
 600:../src/usart/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
 601:../src/usart/usart.c **** 	} else {
 602:../src/usart/usart.c **** 		return 1;
 603:../src/usart/usart.c **** 	}
 604:../src/usart/usart.c **** 
 605:../src/usart/usart.c **** 	/* Set up the baudrate. */
 606:../src/usart/usart.c **** 	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
 607:../src/usart/usart.c **** 		return 1;
 608:../src/usart/usart.c **** 	}
 609:../src/usart/usart.c **** 
 610:../src/usart/usart.c **** 	/* Set FIDI register: bit rate = iso7816_hz / fidi_ratio. */
 611:../src/usart/usart.c **** 	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
 612:../src/usart/usart.c **** 
 613:../src/usart/usart.c **** 	/* Set ISO7816 parity type in the MODE register. */
 614:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->parity_type;
 615:../src/usart/usart.c **** 
 616:../src/usart/usart.c **** 	if (p_usart_opt->inhibit_nack) {
 617:../src/usart/usart.c **** 		ul_reg_val |= US_MR_INACK;
 618:../src/usart/usart.c **** 	}
 619:../src/usart/usart.c **** 	if (p_usart_opt->dis_suc_nack) {
 620:../src/usart/usart.c **** 		ul_reg_val |= US_MR_DSNACK;
 621:../src/usart/usart.c **** 	}
 622:../src/usart/usart.c **** 
 623:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 624:../src/usart/usart.c **** 
 625:../src/usart/usart.c **** 	return 0;
 626:../src/usart/usart.c **** }
 627:../src/usart/usart.c **** 
 628:../src/usart/usart.c **** /**
 629:../src/usart/usart.c ****  * \brief Reset the ITERATION in US_CSR when the ISO7816 mode is enabled.
 630:../src/usart/usart.c ****  *
 631:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 632:../src/usart/usart.c ****  */
 633:../src/usart/usart.c **** void usart_reset_iterations(Usart *p_usart)
 634:../src/usart/usart.c **** {
 287              		.loc 1 634 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL31:
 635:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RSTIT;
 293              		.loc 1 635 0
 294 0000 4FF40053 		mov	r3, #8192
 295 0004 0360     		str	r3, [r0]
 296 0006 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE88:
 300              		.section	.text.usart_reset_nack,"ax",%progbits
 301              		.align	2
 302              		.global	usart_reset_nack
 303              		.thumb
 304              		.thumb_func
 306              	usart_reset_nack:
 307              	.LFB89:
 636:../src/usart/usart.c **** }
 637:../src/usart/usart.c **** 
 638:../src/usart/usart.c **** /**
 639:../src/usart/usart.c ****  * \brief Reset NACK in US_CSR.
 640:../src/usart/usart.c ****  *
 641:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 642:../src/usart/usart.c ****  */
 643:../src/usart/usart.c **** void usart_reset_nack(Usart *p_usart)
 644:../src/usart/usart.c **** {
 308              		.loc 1 644 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL32:
 645:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RSTNACK;
 314              		.loc 1 645 0
 315 0000 4FF48043 		mov	r3, #16384
 316 0004 0360     		str	r3, [r0]
 317 0006 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE89:
 321              		.section	.text.usart_is_rx_buf_end,"ax",%progbits
 322              		.align	2
 323              		.global	usart_is_rx_buf_end
 324              		.thumb
 325              		.thumb_func
 327              	usart_is_rx_buf_end:
 328              	.LFB90:
 646:../src/usart/usart.c **** }
 647:../src/usart/usart.c **** 
 648:../src/usart/usart.c **** /**
 649:../src/usart/usart.c ****  * \brief Check if one receive buffer is filled.
 650:../src/usart/usart.c ****  *
 651:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 652:../src/usart/usart.c ****  *
 653:../src/usart/usart.c ****  * \retval 1 Receive is complete.
 654:../src/usart/usart.c ****  * \retval 0 Receive is still pending.
 655:../src/usart/usart.c ****  */
 656:../src/usart/usart.c **** uint32_t usart_is_rx_buf_end(Usart *p_usart)
 657:../src/usart/usart.c **** {
 329              		.loc 1 657 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334              	.LVL33:
 658:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDRX) > 0;
 335              		.loc 1 658 0
 336 0000 4069     		ldr	r0, [r0, #20]
 337              	.LVL34:
 659:../src/usart/usart.c **** }
 338              		.loc 1 659 0
 339 0002 C0F3C000 		ubfx	r0, r0, #3, #1
 340 0006 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE90:
 344              		.section	.text.usart_is_tx_buf_end,"ax",%progbits
 345              		.align	2
 346              		.global	usart_is_tx_buf_end
 347              		.thumb
 348              		.thumb_func
 350              	usart_is_tx_buf_end:
 351              	.LFB91:
 660:../src/usart/usart.c **** 
 661:../src/usart/usart.c **** /**
 662:../src/usart/usart.c ****  * \brief Check if one transmit buffer is empty.
 663:../src/usart/usart.c ****  *
 664:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 665:../src/usart/usart.c ****  *
 666:../src/usart/usart.c ****  * \retval 1 Transmit is complete.
 667:../src/usart/usart.c ****  * \retval 0 Transmit is still pending.
 668:../src/usart/usart.c ****  */
 669:../src/usart/usart.c **** uint32_t usart_is_tx_buf_end(Usart *p_usart)
 670:../src/usart/usart.c **** {
 352              		.loc 1 670 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357              	.LVL35:
 671:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDTX) > 0;
 358              		.loc 1 671 0
 359 0000 4069     		ldr	r0, [r0, #20]
 360              	.LVL36:
 672:../src/usart/usart.c **** }
 361              		.loc 1 672 0
 362 0002 C0F30010 		ubfx	r0, r0, #4, #1
 363 0006 7047     		bx	lr
 364              		.cfi_endproc
 365              	.LFE91:
 367              		.section	.text.usart_is_rx_buf_full,"ax",%progbits
 368              		.align	2
 369              		.global	usart_is_rx_buf_full
 370              		.thumb
 371              		.thumb_func
 373              	usart_is_rx_buf_full:
 374              	.LFB92:
 673:../src/usart/usart.c **** 
 674:../src/usart/usart.c **** /**
 675:../src/usart/usart.c ****  * \brief Check if both receive buffers are full.
 676:../src/usart/usart.c ****  *
 677:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 678:../src/usart/usart.c ****  *
 679:../src/usart/usart.c ****  * \retval 1 Receive buffers are full.
 680:../src/usart/usart.c ****  * \retval 0 Receive buffers are not full.
 681:../src/usart/usart.c ****  */
 682:../src/usart/usart.c **** uint32_t usart_is_rx_buf_full(Usart *p_usart)
 683:../src/usart/usart.c **** {
 375              		.loc 1 683 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380              	.LVL37:
 684:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXBUFF) > 0;
 381              		.loc 1 684 0
 382 0000 4069     		ldr	r0, [r0, #20]
 383              	.LVL38:
 685:../src/usart/usart.c **** }
 384              		.loc 1 685 0
 385 0002 C0F30030 		ubfx	r0, r0, #12, #1
 386 0006 7047     		bx	lr
 387              		.cfi_endproc
 388              	.LFE92:
 390              		.section	.text.usart_is_tx_buf_empty,"ax",%progbits
 391              		.align	2
 392              		.global	usart_is_tx_buf_empty
 393              		.thumb
 394              		.thumb_func
 396              	usart_is_tx_buf_empty:
 397              	.LFB93:
 686:../src/usart/usart.c **** 
 687:../src/usart/usart.c **** /**
 688:../src/usart/usart.c ****  * \brief Check if both transmit buffers are empty.
 689:../src/usart/usart.c ****  *
 690:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 691:../src/usart/usart.c ****  *
 692:../src/usart/usart.c ****  * \retval 1 Transmit buffers are empty.
 693:../src/usart/usart.c ****  * \retval 0 Transmit buffers are not empty.
 694:../src/usart/usart.c ****  */
 695:../src/usart/usart.c **** uint32_t usart_is_tx_buf_empty(Usart *p_usart)
 696:../src/usart/usart.c **** {
 398              		.loc 1 696 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403              	.LVL39:
 697:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXBUFE) > 0;
 404              		.loc 1 697 0
 405 0000 4069     		ldr	r0, [r0, #20]
 406              	.LVL40:
 698:../src/usart/usart.c **** }
 407              		.loc 1 698 0
 408 0002 C0F3C020 		ubfx	r0, r0, #11, #1
 409 0006 7047     		bx	lr
 410              		.cfi_endproc
 411              	.LFE93:
 413              		.section	.text.usart_get_error_number,"ax",%progbits
 414              		.align	2
 415              		.global	usart_get_error_number
 416              		.thumb
 417              		.thumb_func
 419              	usart_get_error_number:
 420              	.LFB94:
 699:../src/usart/usart.c **** 
 700:../src/usart/usart.c **** /**
 701:../src/usart/usart.c ****  * \brief Get the total number of errors that occur during an ISO7816 transfer.
 702:../src/usart/usart.c ****  *
 703:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 704:../src/usart/usart.c ****  *
 705:../src/usart/usart.c ****  * \return The number of errors that occurred.
 706:../src/usart/usart.c ****  */
 707:../src/usart/usart.c **** uint8_t usart_get_error_number(Usart *p_usart)
 708:../src/usart/usart.c **** {
 421              		.loc 1 708 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL41:
 709:../src/usart/usart.c **** 	return (p_usart->US_NER & US_NER_NB_ERRORS_Msk);
 427              		.loc 1 709 0
 428 0000 406C     		ldr	r0, [r0, #68]
 429              	.LVL42:
 710:../src/usart/usart.c **** }
 430              		.loc 1 710 0
 431 0002 C0B2     		uxtb	r0, r0
 432 0004 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE94:
 436 0006 00BF     		.section	.text.usart_enable_tx,"ax",%progbits
 437              		.align	2
 438              		.global	usart_enable_tx
 439              		.thumb
 440              		.thumb_func
 442              	usart_enable_tx:
 443              	.LFB97:
 711:../src/usart/usart.c **** 
 712:../src/usart/usart.c **** #endif
 713:../src/usart/usart.c **** 
 714:../src/usart/usart.c **** /**
 715:../src/usart/usart.c ****  * \brief Configure USART to work in SPI mode and act as a master.
 716:../src/usart/usart.c ****  *
 717:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 718:../src/usart/usart.c ****  *
 719:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 720:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 721:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 722:../src/usart/usart.c ****  *
 723:../src/usart/usart.c ****  * \retval 0 on success.
 724:../src/usart/usart.c ****  * \retval 1 on failure.
 725:../src/usart/usart.c ****  */
 726:../src/usart/usart.c **** uint32_t usart_init_spi_master(Usart *p_usart,
 727:../src/usart/usart.c **** 		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
 728:../src/usart/usart.c **** {
 729:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 730:../src/usart/usart.c **** 
 731:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 732:../src/usart/usart.c **** 	usart_reset(p_usart);
 733:../src/usart/usart.c **** 
 734:../src/usart/usart.c **** 	ul_reg_val = 0;
 735:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 736:../src/usart/usart.c **** 	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
 737:../src/usart/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 738:../src/usart/usart.c **** 			ul_mck)) {
 739:../src/usart/usart.c **** 		return 1;
 740:../src/usart/usart.c **** 	}
 741:../src/usart/usart.c **** 
 742:../src/usart/usart.c **** 	/* Configure the character length bit in MR register. */
 743:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 744:../src/usart/usart.c **** 
 745:../src/usart/usart.c **** 	/* Set SPI master mode and channel mode. */
 746:../src/usart/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
 747:../src/usart/usart.c **** 			p_usart_opt->channel_mode;
 748:../src/usart/usart.c **** 
 749:../src/usart/usart.c **** 	switch (p_usart_opt->spi_mode) {
 750:../src/usart/usart.c **** 	case SPI_MODE_0:
 751:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 752:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 753:../src/usart/usart.c **** 		break;
 754:../src/usart/usart.c **** 
 755:../src/usart/usart.c **** 	case SPI_MODE_1:
 756:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 757:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 758:../src/usart/usart.c **** 		break;
 759:../src/usart/usart.c **** 
 760:../src/usart/usart.c **** 	case SPI_MODE_2:
 761:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 762:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 763:../src/usart/usart.c **** 		break;
 764:../src/usart/usart.c **** 
 765:../src/usart/usart.c **** 	case SPI_MODE_3:
 766:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 767:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 768:../src/usart/usart.c **** 		break;
 769:../src/usart/usart.c **** 
 770:../src/usart/usart.c **** 	default:
 771:../src/usart/usart.c **** 		break;
 772:../src/usart/usart.c **** 	}
 773:../src/usart/usart.c **** 
 774:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 775:../src/usart/usart.c **** 
 776:../src/usart/usart.c **** 	return 0;
 777:../src/usart/usart.c **** }
 778:../src/usart/usart.c **** 
 779:../src/usart/usart.c **** /**
 780:../src/usart/usart.c ****  * \brief Configure USART to work in SPI mode and act as a slave.
 781:../src/usart/usart.c ****  *
 782:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 783:../src/usart/usart.c ****  *
 784:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 785:../src/usart/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 786:../src/usart/usart.c ****  *
 787:../src/usart/usart.c ****  * \retval 0 on success.
 788:../src/usart/usart.c ****  * \retval 1 on failure.
 789:../src/usart/usart.c ****  */
 790:../src/usart/usart.c **** uint32_t usart_init_spi_slave(Usart *p_usart,
 791:../src/usart/usart.c **** 		const usart_spi_opt_t *p_usart_opt)
 792:../src/usart/usart.c **** {
 793:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 794:../src/usart/usart.c **** 
 795:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 796:../src/usart/usart.c **** 	usart_reset(p_usart);
 797:../src/usart/usart.c **** 
 798:../src/usart/usart.c **** 	ul_reg_val = 0;
 799:../src/usart/usart.c **** 	usart_set_spi_slave_baudrate(p_usart);
 800:../src/usart/usart.c **** 
 801:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 802:../src/usart/usart.c **** 	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
 803:../src/usart/usart.c **** 		return 1;
 804:../src/usart/usart.c **** 	}
 805:../src/usart/usart.c **** 
 806:../src/usart/usart.c **** 	/* Configure the character length bit in MR register. */
 807:../src/usart/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 808:../src/usart/usart.c **** 
 809:../src/usart/usart.c **** 	/* Set SPI slave mode and channel mode. */
 810:../src/usart/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
 811:../src/usart/usart.c **** 
 812:../src/usart/usart.c **** 	switch (p_usart_opt->spi_mode) {
 813:../src/usart/usart.c **** 	case SPI_MODE_0:
 814:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 815:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 816:../src/usart/usart.c **** 		break;
 817:../src/usart/usart.c **** 
 818:../src/usart/usart.c **** 	case SPI_MODE_1:
 819:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 820:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 821:../src/usart/usart.c **** 		break;
 822:../src/usart/usart.c **** 
 823:../src/usart/usart.c **** 	case SPI_MODE_2:
 824:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 825:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 826:../src/usart/usart.c **** 		break;
 827:../src/usart/usart.c **** 
 828:../src/usart/usart.c **** 	case SPI_MODE_3:
 829:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 830:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 831:../src/usart/usart.c **** 		break;
 832:../src/usart/usart.c **** 
 833:../src/usart/usart.c **** 	default:
 834:../src/usart/usart.c **** 		break;
 835:../src/usart/usart.c **** 	}
 836:../src/usart/usart.c **** 
 837:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 838:../src/usart/usart.c **** 
 839:../src/usart/usart.c **** 	return 0;
 840:../src/usart/usart.c **** }
 841:../src/usart/usart.c **** 
 842:../src/usart/usart.c **** #if (SAM3XA || SAM4L || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
 843:../src/usart/usart.c **** 
 844:../src/usart/usart.c **** /**
 845:../src/usart/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN master.
 846:../src/usart/usart.c ****  *
 847:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 848:../src/usart/usart.c ****  *
 849:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 850:../src/usart/usart.c ****  * \param ul_baudrate Baudrate to be used.
 851:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 852:../src/usart/usart.c ****  *
 853:../src/usart/usart.c ****  * \retval 0 on success.
 854:../src/usart/usart.c ****  * \retval 1 on failure.
 855:../src/usart/usart.c ****  */
 856:../src/usart/usart.c **** uint32_t usart_init_lin_master(Usart *p_usart,uint32_t ul_baudrate,
 857:../src/usart/usart.c **** 		uint32_t ul_mck)
 858:../src/usart/usart.c **** {
 859:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 860:../src/usart/usart.c **** 	usart_reset(p_usart);
 861:../src/usart/usart.c **** 
 862:../src/usart/usart.c **** 	/* Set up the baudrate. */
 863:../src/usart/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 864:../src/usart/usart.c **** 		return 1;
 865:../src/usart/usart.c **** 	}
 866:../src/usart/usart.c **** 
 867:../src/usart/usart.c **** 	/* Set LIN master mode. */
 868:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 869:../src/usart/usart.c **** 			US_MR_USART_MODE_LIN_MASTER;
 870:../src/usart/usart.c **** 
 871:../src/usart/usart.c **** 	usart_enable_rx(p_usart);
 872:../src/usart/usart.c **** 	usart_enable_tx(p_usart);
 873:../src/usart/usart.c **** 
 874:../src/usart/usart.c **** 	return 0;
 875:../src/usart/usart.c **** }
 876:../src/usart/usart.c **** 
 877:../src/usart/usart.c **** /**
 878:../src/usart/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN slave.
 879:../src/usart/usart.c ****  *
 880:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 881:../src/usart/usart.c ****  *
 882:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 883:../src/usart/usart.c ****  * \param ul_baudrate Baudrate to be used.
 884:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
 885:../src/usart/usart.c ****  *
 886:../src/usart/usart.c ****  * \retval 0 on success.
 887:../src/usart/usart.c ****  * \retval 1 on failure.
 888:../src/usart/usart.c ****  */
 889:../src/usart/usart.c **** uint32_t usart_init_lin_slave(Usart *p_usart, uint32_t ul_baudrate,
 890:../src/usart/usart.c **** 		uint32_t ul_mck)
 891:../src/usart/usart.c **** {
 892:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 893:../src/usart/usart.c **** 	usart_reset(p_usart);
 894:../src/usart/usart.c **** 
 895:../src/usart/usart.c **** 	usart_enable_rx(p_usart);
 896:../src/usart/usart.c **** 	usart_enable_tx(p_usart);
 897:../src/usart/usart.c **** 
 898:../src/usart/usart.c **** 	/* Set LIN slave mode. */
 899:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 900:../src/usart/usart.c **** 			US_MR_USART_MODE_LIN_SLAVE;
 901:../src/usart/usart.c **** 
 902:../src/usart/usart.c **** 	/* Set up the baudrate. */
 903:../src/usart/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 904:../src/usart/usart.c **** 		return 1;
 905:../src/usart/usart.c **** 	}
 906:../src/usart/usart.c **** 
 907:../src/usart/usart.c **** 	return 0;
 908:../src/usart/usart.c **** }
 909:../src/usart/usart.c **** 
 910:../src/usart/usart.c **** /**
 911:../src/usart/usart.c ****  * \brief Abort the current LIN transmission.
 912:../src/usart/usart.c ****  *
 913:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 914:../src/usart/usart.c ****  */
 915:../src/usart/usart.c **** void usart_lin_abort_tx(Usart *p_usart)
 916:../src/usart/usart.c **** {
 917:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_LINABT;
 918:../src/usart/usart.c **** }
 919:../src/usart/usart.c **** 
 920:../src/usart/usart.c **** /**
 921:../src/usart/usart.c ****  * \brief Send a wakeup signal on the LIN bus.
 922:../src/usart/usart.c ****  *
 923:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 924:../src/usart/usart.c ****  */
 925:../src/usart/usart.c **** void usart_lin_send_wakeup_signal(Usart *p_usart)
 926:../src/usart/usart.c **** {
 927:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_LINWKUP;
 928:../src/usart/usart.c **** }
 929:../src/usart/usart.c **** 
 930:../src/usart/usart.c **** /**
 931:../src/usart/usart.c ****  * \brief Configure the LIN node action, which should be one of PUBLISH,
 932:../src/usart/usart.c ****  * SUBSCRIBE or IGNORE.
 933:../src/usart/usart.c ****  *
 934:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 935:../src/usart/usart.c ****  * \param uc_action 0 for PUBLISH, 1 for SUBSCRIBE, 2 for IGNORE.
 936:../src/usart/usart.c ****  */
 937:../src/usart/usart.c **** void usart_lin_set_node_action(Usart *p_usart, uint8_t uc_action)
 938:../src/usart/usart.c **** {
 939:../src/usart/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_NACT_Msk) |
 940:../src/usart/usart.c **** 			(uc_action << US_LINMR_NACT_Pos);
 941:../src/usart/usart.c **** }
 942:../src/usart/usart.c **** 
 943:../src/usart/usart.c **** /**
 944:../src/usart/usart.c ****  * \brief Disable the parity check during the LIN communication.
 945:../src/usart/usart.c ****  *
 946:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 947:../src/usart/usart.c ****  */
 948:../src/usart/usart.c **** void usart_lin_disable_parity(Usart *p_usart)
 949:../src/usart/usart.c **** {
 950:../src/usart/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PARDIS;
 951:../src/usart/usart.c **** }
 952:../src/usart/usart.c **** 
 953:../src/usart/usart.c **** /**
 954:../src/usart/usart.c ****  * \brief Enable the parity check during the LIN communication.
 955:../src/usart/usart.c ****  *
 956:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 957:../src/usart/usart.c ****  */
 958:../src/usart/usart.c **** void usart_lin_enable_parity(Usart *p_usart)
 959:../src/usart/usart.c **** {
 960:../src/usart/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PARDIS;
 961:../src/usart/usart.c **** }
 962:../src/usart/usart.c **** 
 963:../src/usart/usart.c **** /**
 964:../src/usart/usart.c ****  * \brief Disable the checksum during the LIN communication.
 965:../src/usart/usart.c ****  *
 966:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 967:../src/usart/usart.c ****  */
 968:../src/usart/usart.c **** void usart_lin_disable_checksum(Usart *p_usart)
 969:../src/usart/usart.c **** {
 970:../src/usart/usart.c **** 	p_usart->US_LINMR |= US_LINMR_CHKDIS;
 971:../src/usart/usart.c **** }
 972:../src/usart/usart.c **** 
 973:../src/usart/usart.c **** /**
 974:../src/usart/usart.c ****  * \brief Enable the checksum during the LIN communication.
 975:../src/usart/usart.c ****  *
 976:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 977:../src/usart/usart.c ****  */
 978:../src/usart/usart.c **** void usart_lin_enable_checksum(Usart *p_usart)
 979:../src/usart/usart.c **** {
 980:../src/usart/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_CHKDIS;
 981:../src/usart/usart.c **** }
 982:../src/usart/usart.c **** 
 983:../src/usart/usart.c **** /**
 984:../src/usart/usart.c ****  * \brief Configure the checksum type during the LIN communication.
 985:../src/usart/usart.c ****  *
 986:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
 987:../src/usart/usart.c ****  * \param uc_type 0 for LIN 2.0 Enhanced checksum or 1 for LIN 1.3 Classic
 988:../src/usart/usart.c ****  *  checksum.
 989:../src/usart/usart.c ****  */
 990:../src/usart/usart.c **** void usart_lin_set_checksum_type(Usart *p_usart, uint8_t uc_type)
 991:../src/usart/usart.c **** {
 992:../src/usart/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_CHKTYP) |
 993:../src/usart/usart.c **** 			(uc_type << 4);
 994:../src/usart/usart.c **** }
 995:../src/usart/usart.c **** 
 996:../src/usart/usart.c **** /**
 997:../src/usart/usart.c ****  * \brief Configure the data length mode during the LIN communication.
 998:../src/usart/usart.c ****  *
 999:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1000:../src/usart/usart.c ****  * \param uc_mode Indicate the data length type: 0 if the data length is
1001:../src/usart/usart.c ****  * defined by the DLC of LIN mode register or 1 if the data length is defined
1002:../src/usart/usart.c ****  * by the bit 5 and 6 of the identifier.
1003:../src/usart/usart.c ****  */
1004:../src/usart/usart.c **** void usart_lin_set_data_len_mode(Usart *p_usart, uint8_t uc_mode)
1005:../src/usart/usart.c **** {
1006:../src/usart/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLM) |
1007:../src/usart/usart.c **** 			(uc_mode << 5);
1008:../src/usart/usart.c **** }
1009:../src/usart/usart.c **** 
1010:../src/usart/usart.c **** /**
1011:../src/usart/usart.c ****  * \brief Disable the frame slot mode during the LIN communication.
1012:../src/usart/usart.c ****  *
1013:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1014:../src/usart/usart.c ****  */
1015:../src/usart/usart.c **** void usart_lin_disable_frame_slot(Usart *p_usart)
1016:../src/usart/usart.c **** {
1017:../src/usart/usart.c **** 	p_usart->US_LINMR |= US_LINMR_FSDIS;
1018:../src/usart/usart.c **** }
1019:../src/usart/usart.c **** 
1020:../src/usart/usart.c **** /**
1021:../src/usart/usart.c ****  * \brief Enable the frame slot mode during the LIN communication.
1022:../src/usart/usart.c ****  *
1023:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1024:../src/usart/usart.c ****  */
1025:../src/usart/usart.c **** void usart_lin_enable_frame_slot(Usart *p_usart)
1026:../src/usart/usart.c **** {
1027:../src/usart/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_FSDIS;
1028:../src/usart/usart.c **** }
1029:../src/usart/usart.c **** 
1030:../src/usart/usart.c **** /**
1031:../src/usart/usart.c ****  * \brief Configure the wakeup signal type during the LIN communication.
1032:../src/usart/usart.c ****  *
1033:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1034:../src/usart/usart.c ****  * \param uc_type Indicate the checksum type: 0 if the wakeup signal is a
1035:../src/usart/usart.c ****  * LIN 2.0 wakeup signal; 1 if the wakeup signal is a LIN 1.3 wakeup signal.
1036:../src/usart/usart.c ****  */
1037:../src/usart/usart.c **** void usart_lin_set_wakeup_signal_type(Usart *p_usart, uint8_t uc_type)
1038:../src/usart/usart.c **** {
1039:../src/usart/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_WKUPTYP) |
1040:../src/usart/usart.c **** 			(uc_type << 7);
1041:../src/usart/usart.c **** }
1042:../src/usart/usart.c **** 
1043:../src/usart/usart.c **** /**
1044:../src/usart/usart.c ****  * \brief Configure the response data length if the data length is defined by
1045:../src/usart/usart.c ****  * the DLC field during the LIN communication.
1046:../src/usart/usart.c ****  *
1047:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1048:../src/usart/usart.c ****  * \param uc_len Indicate the response data length.
1049:../src/usart/usart.c ****  */
1050:../src/usart/usart.c **** void usart_lin_set_response_data_len(Usart *p_usart, uint8_t uc_len)
1051:../src/usart/usart.c **** {
1052:../src/usart/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLC_Msk) |
1053:../src/usart/usart.c **** 			((uc_len - 1) << US_LINMR_DLC_Pos);
1054:../src/usart/usart.c **** }
1055:../src/usart/usart.c **** 
1056:../src/usart/usart.c **** /**
1057:../src/usart/usart.c ****  * \brief The LIN mode register is not written by the PDC.
1058:../src/usart/usart.c ****  *
1059:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1060:../src/usart/usart.c ****  */
1061:../src/usart/usart.c **** void usart_lin_disable_pdc_mode(Usart *p_usart)
1062:../src/usart/usart.c **** {
1063:../src/usart/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PDCM;
1064:../src/usart/usart.c **** }
1065:../src/usart/usart.c **** 
1066:../src/usart/usart.c **** /**
1067:../src/usart/usart.c ****  * \brief The LIN mode register (except this flag) is written by the PDC.
1068:../src/usart/usart.c ****  *
1069:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1070:../src/usart/usart.c ****  */
1071:../src/usart/usart.c **** void usart_lin_enable_pdc_mode(Usart *p_usart)
1072:../src/usart/usart.c **** {
1073:../src/usart/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PDCM;
1074:../src/usart/usart.c **** }
1075:../src/usart/usart.c **** 
1076:../src/usart/usart.c **** /**
1077:../src/usart/usart.c ****  * \brief Configure the LIN identifier when USART works in LIN master mode.
1078:../src/usart/usart.c ****  *
1079:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1080:../src/usart/usart.c ****  * \param uc_id The identifier to be transmitted.
1081:../src/usart/usart.c ****  */
1082:../src/usart/usart.c **** void usart_lin_set_tx_identifier(Usart *p_usart, uint8_t uc_id)
1083:../src/usart/usart.c **** {
1084:../src/usart/usart.c **** 	p_usart->US_LINIR = (p_usart->US_LINIR & ~US_LINIR_IDCHR_Msk) |
1085:../src/usart/usart.c **** 			US_LINIR_IDCHR(uc_id);
1086:../src/usart/usart.c **** }
1087:../src/usart/usart.c **** 
1088:../src/usart/usart.c **** /**
1089:../src/usart/usart.c ****  * \brief Read the identifier when USART works in LIN mode.
1090:../src/usart/usart.c ****  *
1091:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1092:../src/usart/usart.c ****  *
1093:../src/usart/usart.c ****  * \return The last identifier received in LIN slave mode or the last
1094:../src/usart/usart.c ****  * identifier transmitted in LIN master mode.
1095:../src/usart/usart.c ****  */
1096:../src/usart/usart.c **** uint8_t usart_lin_read_identifier(Usart *p_usart)
1097:../src/usart/usart.c **** {
1098:../src/usart/usart.c **** 	return (p_usart->US_LINIR & US_LINIR_IDCHR_Msk);
1099:../src/usart/usart.c **** }
1100:../src/usart/usart.c **** 
1101:../src/usart/usart.c **** /**
1102:../src/usart/usart.c ****  * \brief Get data length.
1103:../src/usart/usart.c ****  *
1104:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1105:../src/usart/usart.c ****  *
1106:../src/usart/usart.c ****  * \return Data length.
1107:../src/usart/usart.c ****  */
1108:../src/usart/usart.c **** uint8_t usart_lin_get_data_length(Usart *usart)
1109:../src/usart/usart.c **** {
1110:../src/usart/usart.c **** 	if (usart->US_LINMR & US_LINMR_DLM) {
1111:../src/usart/usart.c **** 		uint8_t data_length = 1 << ((usart->US_LINIR >>
1112:../src/usart/usart.c **** 				(US_LINIR_IDCHR_Pos + 4)) & 0x03);
1113:../src/usart/usart.c **** 		return data_length;
1114:../src/usart/usart.c **** 	} else {
1115:../src/usart/usart.c **** 		return ((usart->US_LINMR & US_LINMR_DLC_Msk) >> US_LINMR_DLC_Pos) + 1;
1116:../src/usart/usart.c **** 	}
1117:../src/usart/usart.c **** }
1118:../src/usart/usart.c **** 
1119:../src/usart/usart.c **** #endif
1120:../src/usart/usart.c **** 
1121:../src/usart/usart.c **** #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
1122:../src/usart/usart.c **** /**
1123:../src/usart/usart.c ****  * \brief Get identifier send status.
1124:../src/usart/usart.c ****  *
1125:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1126:../src/usart/usart.c ****  *
1127:../src/usart/usart.c ****  * \return
1128:../src/usart/usart.c ****  * 0:  No LIN identifier has been sent since the last RSTSTA.
1129:../src/usart/usart.c ****  * 1: :At least one LIN identifier has been sent since the last RSTSTA.
1130:../src/usart/usart.c ****  */
1131:../src/usart/usart.c **** uint8_t usart_lin_identifier_send_complete(Usart *usart)
1132:../src/usart/usart.c **** {
1133:../src/usart/usart.c **** 	return (usart->US_CSR & US_CSR_LINID) > 0;
1134:../src/usart/usart.c **** }
1135:../src/usart/usart.c **** 
1136:../src/usart/usart.c **** /**
1137:../src/usart/usart.c ****  * \brief Get identifier received status.
1138:../src/usart/usart.c ****  *
1139:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1140:../src/usart/usart.c ****  *
1141:../src/usart/usart.c ****  * \return
1142:../src/usart/usart.c ****  * 0:  No LIN identifier has been reveived since the last RSTSTA.
1143:../src/usart/usart.c ****  * 1: At least one LIN identifier has been received since the last RSTSTA.
1144:../src/usart/usart.c ****  */
1145:../src/usart/usart.c **** uint8_t usart_lin_identifier_reception_complete(Usart *usart)
1146:../src/usart/usart.c **** {
1147:../src/usart/usart.c **** 	return (usart->US_CSR & US_CSR_LINID) > 0;
1148:../src/usart/usart.c **** }
1149:../src/usart/usart.c **** 
1150:../src/usart/usart.c **** /**
1151:../src/usart/usart.c ****  * \brief Get transmission status.
1152:../src/usart/usart.c ****  *
1153:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1154:../src/usart/usart.c ****  *
1155:../src/usart/usart.c ****  * \return
1156:../src/usart/usart.c ****  * 0: The USART is idle or a LIN transfer is ongoing.
1157:../src/usart/usart.c ****  * 1: A LIN transfer has been completed since the last RSTSTA.
1158:../src/usart/usart.c ****  */
1159:../src/usart/usart.c **** uint8_t usart_lin_tx_complete(Usart *usart)
1160:../src/usart/usart.c **** {
1161:../src/usart/usart.c **** 	return (usart->US_CSR & US_CSR_LINTC) > 0;
1162:../src/usart/usart.c **** }
1163:../src/usart/usart.c **** 
1164:../src/usart/usart.c **** /**
1165:../src/usart/usart.c ****  * \brief Configure USART to work in LON mode.
1166:../src/usart/usart.c ****  *
1167:../src/usart/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
1168:../src/usart/usart.c ****  *
1169:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1170:../src/usart/usart.c ****  * \param ul_baudrate Baudrate to be used.
1171:../src/usart/usart.c ****  * \param ul_mck USART module input clock frequency.
1172:../src/usart/usart.c ****  *
1173:../src/usart/usart.c ****  * \retval 0 on success.
1174:../src/usart/usart.c ****  * \retval 1 on failure.
1175:../src/usart/usart.c ****  */
1176:../src/usart/usart.c **** uint32_t usart_init_lon(Usart *p_usart,uint32_t ul_baudrate,
1177:../src/usart/usart.c **** 		uint32_t ul_mck)
1178:../src/usart/usart.c **** {
1179:../src/usart/usart.c **** 	/* Reset the USART and shut down TX and RX. */
1180:../src/usart/usart.c **** 	usart_reset(p_usart);
1181:../src/usart/usart.c **** 
1182:../src/usart/usart.c **** 	/* Set up the baudrate. */
1183:../src/usart/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
1184:../src/usart/usart.c **** 		return 1;
1185:../src/usart/usart.c **** 	}
1186:../src/usart/usart.c **** 
1187:../src/usart/usart.c **** 	/* Set LIN master mode. */
1188:../src/usart/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
1189:../src/usart/usart.c **** 			US_MR_USART_MODE_LON;
1190:../src/usart/usart.c **** 
1191:../src/usart/usart.c **** 	usart_enable_rx(p_usart);
1192:../src/usart/usart.c **** 	usart_enable_tx(p_usart);
1193:../src/usart/usart.c **** 
1194:../src/usart/usart.c **** 	return 0;
1195:../src/usart/usart.c **** }
1196:../src/usart/usart.c **** 
1197:../src/usart/usart.c **** /**
1198:../src/usart/usart.c ****  * \brief set LON parameter value.
1199:../src/usart/usart.c ****  *
1200:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1201:../src/usart/usart.c ****  * \param uc_type 0: LON comm_type = 1 mode,
1202:../src/usart/usart.c ****  *  1: LON comm_type = 2 mode
1203:../src/usart/usart.c ****  */
1204:../src/usart/usart.c **** void  usart_lon_set_comm_type(Usart *p_usart, uint8_t uc_type)
1205:../src/usart/usart.c **** {
1206:../src/usart/usart.c **** 	p_usart->US_LONMR = (p_usart->US_LONMR & ~US_LONMR_COMMT) |
1207:../src/usart/usart.c **** 			 (uc_type << 0);
1208:../src/usart/usart.c **** }
1209:../src/usart/usart.c **** 
1210:../src/usart/usart.c **** /**
1211:../src/usart/usart.c ****  * \brief Disable  LON Collision Detection Feature.
1212:../src/usart/usart.c ****  *
1213:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1214:../src/usart/usart.c ****  */
1215:../src/usart/usart.c **** void usart_lon_disable_coll_detection(Usart *p_usart)
1216:../src/usart/usart.c **** {
1217:../src/usart/usart.c **** 	p_usart->US_LONMR |= US_LONMR_COLDET;
1218:../src/usart/usart.c **** }
1219:../src/usart/usart.c **** 
1220:../src/usart/usart.c **** /**
1221:../src/usart/usart.c ****  * \brief Enable LON Collision Detection Feature.
1222:../src/usart/usart.c ****  *
1223:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1224:../src/usart/usart.c ****  */
1225:../src/usart/usart.c **** void usart_lon_enable_coll_detection(Usart *p_usart)
1226:../src/usart/usart.c **** {
1227:../src/usart/usart.c **** 	p_usart->US_LONMR &= ~US_LONMR_COLDET;
1228:../src/usart/usart.c **** }
1229:../src/usart/usart.c **** 
1230:../src/usart/usart.c **** /**
1231:../src/usart/usart.c ****  * \brief set Terminate Frame upon Collision Notification.
1232:../src/usart/usart.c ****  *
1233:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1234:../src/usart/usart.c ****  * \param uc_type 0:  Do not terminate the frame in LON comm_type = 1 mode upon collision detection
1235:../src/usart/usart.c ****  * 1:Terminate the frame in LON comm_type = 1 mode upon collision detection if possible.
1236:../src/usart/usart.c ****  */
1237:../src/usart/usart.c **** void  usart_lon_set_tcol(Usart *p_usart, uint8_t uc_type)
1238:../src/usart/usart.c **** {
1239:../src/usart/usart.c **** 	p_usart->US_LONMR = (p_usart->US_LONMR & ~US_LONMR_TCOL) |
1240:../src/usart/usart.c **** 			 (uc_type << 2);
1241:../src/usart/usart.c **** }
1242:../src/usart/usart.c **** 
1243:../src/usart/usart.c **** /**
1244:../src/usart/usart.c ****  * \brief set  LON Collision Detection on Frame Tail.
1245:../src/usart/usart.c ****  *
1246:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1247:../src/usart/usart.c ****  * \param uc_type 0: Detect collisions after CRC has been sent but prior end of transmission in LON
1248:../src/usart/usart.c ****  * 1: Ignore collisions after CRC has been sent but prior end of transmission in LON comm_type = 1 
1249:../src/usart/usart.c ****  */
1250:../src/usart/usart.c **** void  usart_lon_set_cdtail(Usart *p_usart, uint8_t uc_type)
1251:../src/usart/usart.c **** {
1252:../src/usart/usart.c **** 	p_usart->US_LONMR = (p_usart->US_LONMR & ~US_LONMR_CDTAIL) |
1253:../src/usart/usart.c **** 			 (uc_type << 3);
1254:../src/usart/usart.c **** }
1255:../src/usart/usart.c **** 
1256:../src/usart/usart.c **** /**
1257:../src/usart/usart.c ****  * \brief set  LON DMA Mode.
1258:../src/usart/usart.c ****  *
1259:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1260:../src/usart/usart.c ****  * \param uc_type 0: The LON data length register US_LONDL is not written by the DMA.
1261:../src/usart/usart.c ****  * 1: The LON data length register US_LONDL is written by the DMA.
1262:../src/usart/usart.c ****  */
1263:../src/usart/usart.c **** void  usart_lon_set_dmam(Usart *p_usart, uint8_t uc_type)
1264:../src/usart/usart.c **** {
1265:../src/usart/usart.c **** 	p_usart->US_LONMR = (p_usart->US_LONMR & ~US_LONMR_DMAM) |
1266:../src/usart/usart.c **** 			 (uc_type << 4);
1267:../src/usart/usart.c **** }
1268:../src/usart/usart.c **** 
1269:../src/usart/usart.c **** /**
1270:../src/usart/usart.c ****  * \brief set LON Beta1 Length after Transmission.
1271:../src/usart/usart.c ****  *
1272:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1273:../src/usart/usart.c ****  * \param ul_len 1-16777215: LON beta1 length after transmission in tbit
1274:../src/usart/usart.c ****  */
1275:../src/usart/usart.c **** void  usart_lon_set_beta1_tx_len(Usart *p_usart, uint32_t ul_len)
1276:../src/usart/usart.c **** {
1277:../src/usart/usart.c **** 	p_usart->US_LONB1TX = US_LONB1TX_BETA1TX(ul_len);
1278:../src/usart/usart.c **** }
1279:../src/usart/usart.c **** 
1280:../src/usart/usart.c **** /**
1281:../src/usart/usart.c ****  * \brief set LON Beta1 Length after Reception.
1282:../src/usart/usart.c ****  *
1283:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1284:../src/usart/usart.c ****  * \param ul_len 1-16777215: LON beta1 length after reception in tbit.
1285:../src/usart/usart.c ****  */
1286:../src/usart/usart.c **** void  usart_lon_set_beta1_rx_len(Usart *p_usart, uint32_t ul_len)
1287:../src/usart/usart.c **** {
1288:../src/usart/usart.c **** 	p_usart->US_LONB1RX = US_LONB1RX_BETA1RX(ul_len);
1289:../src/usart/usart.c **** }
1290:../src/usart/usart.c **** 
1291:../src/usart/usart.c **** /**
1292:../src/usart/usart.c ****  * \brief set  LON Priority.
1293:../src/usart/usart.c ****  *
1294:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1295:../src/usart/usart.c ****  * \param uc_psnb 0 -127: LON Priority Slot Number.
1296:../src/usart/usart.c ****  * \param uc_nps  0 -127: LON Node Priority Slot.
1297:../src/usart/usart.c ****  */
1298:../src/usart/usart.c **** void  usart_lon_set_priority(Usart *p_usart, uint8_t uc_psnb, uint8_t uc_nps)
1299:../src/usart/usart.c **** {
1300:../src/usart/usart.c **** 	p_usart->US_LONPRIO = US_LONPRIO_PSNB(uc_psnb) | US_LONPRIO_NPS(uc_nps);
1301:../src/usart/usart.c **** }
1302:../src/usart/usart.c **** 
1303:../src/usart/usart.c **** /**
1304:../src/usart/usart.c ****  * \brief set LON Indeterminate Time after Transmission.
1305:../src/usart/usart.c ****  *
1306:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1307:../src/usart/usart.c ****  * \param ul_time 1-16777215: LON Indeterminate Time after Transmission (comm_type = 1 mode only).
1308:../src/usart/usart.c ****  */
1309:../src/usart/usart.c **** void  usart_lon_set_tx_idt(Usart *p_usart, uint32_t ul_time)
1310:../src/usart/usart.c **** {
1311:../src/usart/usart.c **** 	p_usart->US_IDTTX = US_IDTTX_IDTTX(ul_time);
1312:../src/usart/usart.c **** }
1313:../src/usart/usart.c **** 
1314:../src/usart/usart.c **** /**
1315:../src/usart/usart.c ****  * \brief set LON Indeterminate Time after Reception.
1316:../src/usart/usart.c ****  *
1317:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1318:../src/usart/usart.c ****  * \param ul_time 1-16777215: LON Indeterminate Time after Reception (comm_type = 1 mode only).
1319:../src/usart/usart.c ****  */
1320:../src/usart/usart.c **** void  usart_lon_set_rx_idt(Usart *p_usart, uint32_t ul_time)
1321:../src/usart/usart.c **** {
1322:../src/usart/usart.c **** 	p_usart->US_IDTRX = US_IDTRX_IDTRX(ul_time);
1323:../src/usart/usart.c **** }
1324:../src/usart/usart.c **** 
1325:../src/usart/usart.c **** /**
1326:../src/usart/usart.c ****  * \brief set LON Preamble Length.
1327:../src/usart/usart.c ****  *
1328:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1329:../src/usart/usart.c ****  * \param ul_len 1-16383: LON preamble length in tbit(without byte-sync).
1330:../src/usart/usart.c ****  */
1331:../src/usart/usart.c **** void  usart_lon_set_pre_len(Usart *p_usart, uint32_t ul_len)
1332:../src/usart/usart.c **** {
1333:../src/usart/usart.c **** 	p_usart->US_LONPR = US_LONPR_LONPL(ul_len);
1334:../src/usart/usart.c **** }
1335:../src/usart/usart.c **** 
1336:../src/usart/usart.c **** /**
1337:../src/usart/usart.c ****  * \brief set LON  Data Length.
1338:../src/usart/usart.c ****  *
1339:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1340:../src/usart/usart.c ****  * \param uc_len 0-255: LON data length is LONDL+1 bytes.
1341:../src/usart/usart.c ****  */
1342:../src/usart/usart.c **** void  usart_lon_set_data_len(Usart *p_usart, uint8_t uc_len)
1343:../src/usart/usart.c **** {
1344:../src/usart/usart.c **** 	p_usart->US_LONDL = US_LONDL_LONDL(uc_len);
1345:../src/usart/usart.c **** }
1346:../src/usart/usart.c **** 
1347:../src/usart/usart.c **** /**
1348:../src/usart/usart.c ****  * \brief set  LON Priority.
1349:../src/usart/usart.c ****  *
1350:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1351:../src/usart/usart.c ****  * \param uc_bli   LON Backlog Increment.
1352:../src/usart/usart.c ****  * \param uc_altp LON Alternate Path Bit.
1353:../src/usart/usart.c ****  * \param uc_pb   LON Priority Bit.
1354:../src/usart/usart.c ****  */
1355:../src/usart/usart.c **** void  usart_lon_set_l2hdr(Usart *p_usart, uint8_t uc_bli, uint8_t uc_altp, uint8_t uc_pb)
1356:../src/usart/usart.c **** {
1357:../src/usart/usart.c **** 	p_usart->US_LONL2HDR = US_LONL2HDR_BLI(uc_bli) | (uc_altp << 6) | (uc_pb << 7);
1358:../src/usart/usart.c **** }
1359:../src/usart/usart.c **** 
1360:../src/usart/usart.c **** /**
1361:../src/usart/usart.c ****  * \brief Check if LON Transmission End.
1362:../src/usart/usart.c ****  *
1363:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1364:../src/usart/usart.c ****  *
1365:../src/usart/usart.c ****  * \retval 1  At least one transmission has been performed since the last RSTSTA.
1366:../src/usart/usart.c ****  * \retval 0  Transmission on going or no transmission occurred since the last RSTSTA.
1367:../src/usart/usart.c ****  */
1368:../src/usart/usart.c **** uint32_t usart_lon_is_tx_end(Usart *p_usart)
1369:../src/usart/usart.c **** {
1370:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_LTXD) > 0;
1371:../src/usart/usart.c **** }
1372:../src/usart/usart.c **** 
1373:../src/usart/usart.c **** /**
1374:../src/usart/usart.c ****  * \brief Check if LON Reception End.
1375:../src/usart/usart.c ****  *
1376:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1377:../src/usart/usart.c ****  *
1378:../src/usart/usart.c ****  * \retval 1  At least one Reception has been performed since the last RSTSTA.
1379:../src/usart/usart.c ****  * \retval 0  Reception on going or no Reception occurred since the last RSTSTA.
1380:../src/usart/usart.c ****  */
1381:../src/usart/usart.c **** uint32_t usart_lon_is_rx_end(Usart *p_usart)
1382:../src/usart/usart.c **** {
1383:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_LRXD) > 0;
1384:../src/usart/usart.c **** }
1385:../src/usart/usart.c **** #endif
1386:../src/usart/usart.c **** 
1387:../src/usart/usart.c **** /**
1388:../src/usart/usart.c ****  * \brief Enable USART transmitter.
1389:../src/usart/usart.c ****  *
1390:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1391:../src/usart/usart.c ****  */
1392:../src/usart/usart.c **** void usart_enable_tx(Usart *p_usart)
1393:../src/usart/usart.c **** {
 444              		.loc 1 1393 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL43:
1394:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_TXEN;
 450              		.loc 1 1394 0
 451 0000 4023     		movs	r3, #64
 452 0002 0360     		str	r3, [r0]
 453 0004 7047     		bx	lr
 454              		.cfi_endproc
 455              	.LFE97:
 457 0006 00BF     		.section	.text.usart_disable_tx,"ax",%progbits
 458              		.align	2
 459              		.global	usart_disable_tx
 460              		.thumb
 461              		.thumb_func
 463              	usart_disable_tx:
 464              	.LFB98:
1395:../src/usart/usart.c **** }
1396:../src/usart/usart.c **** 
1397:../src/usart/usart.c **** /**
1398:../src/usart/usart.c ****  * \brief Disable USART transmitter.
1399:../src/usart/usart.c ****  *
1400:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1401:../src/usart/usart.c ****  */
1402:../src/usart/usart.c **** void usart_disable_tx(Usart *p_usart)
1403:../src/usart/usart.c **** {
 465              		.loc 1 1403 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470              	.LVL44:
1404:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_TXDIS;
 471              		.loc 1 1404 0
 472 0000 8023     		movs	r3, #128
 473 0002 0360     		str	r3, [r0]
 474 0004 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE98:
 478 0006 00BF     		.section	.text.usart_reset_tx,"ax",%progbits
 479              		.align	2
 480              		.global	usart_reset_tx
 481              		.thumb
 482              		.thumb_func
 484              	usart_reset_tx:
 485              	.LFB99:
1405:../src/usart/usart.c **** }
1406:../src/usart/usart.c **** 
1407:../src/usart/usart.c **** /**
1408:../src/usart/usart.c ****  * \brief Immediately stop and disable USART transmitter.
1409:../src/usart/usart.c ****  *
1410:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1411:../src/usart/usart.c ****  */
1412:../src/usart/usart.c **** void usart_reset_tx(Usart *p_usart)
1413:../src/usart/usart.c **** {
 486              		.loc 1 1413 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL45:
1414:../src/usart/usart.c **** 	/* Reset transmitter */
1415:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
 492              		.loc 1 1415 0
 493 0000 8823     		movs	r3, #136
 494 0002 0360     		str	r3, [r0]
 495 0004 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE99:
 499 0006 00BF     		.section	.text.usart_set_tx_timeguard,"ax",%progbits
 500              		.align	2
 501              		.global	usart_set_tx_timeguard
 502              		.thumb
 503              		.thumb_func
 505              	usart_set_tx_timeguard:
 506              	.LFB100:
1416:../src/usart/usart.c **** }
1417:../src/usart/usart.c **** 
1418:../src/usart/usart.c **** /**
1419:../src/usart/usart.c ****  * \brief Configure the transmit timeguard register.
1420:../src/usart/usart.c ****  *
1421:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1422:../src/usart/usart.c ****  * \param timeguard The value of transmit timeguard.
1423:../src/usart/usart.c ****  */
1424:../src/usart/usart.c **** void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
1425:../src/usart/usart.c **** {
 507              		.loc 1 1425 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512              	.LVL46:
1426:../src/usart/usart.c **** 	p_usart->US_TTGR = timeguard;
 513              		.loc 1 1426 0
 514 0000 8162     		str	r1, [r0, #40]
 515 0002 7047     		bx	lr
 516              		.cfi_endproc
 517              	.LFE100:
 519              		.section	.text.usart_enable_rx,"ax",%progbits
 520              		.align	2
 521              		.global	usart_enable_rx
 522              		.thumb
 523              		.thumb_func
 525              	usart_enable_rx:
 526              	.LFB101:
1427:../src/usart/usart.c **** }
1428:../src/usart/usart.c **** 
1429:../src/usart/usart.c **** /**
1430:../src/usart/usart.c ****  * \brief Enable USART receiver.
1431:../src/usart/usart.c ****  *
1432:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1433:../src/usart/usart.c ****  */
1434:../src/usart/usart.c **** void usart_enable_rx(Usart *p_usart)
1435:../src/usart/usart.c **** {
 527              		.loc 1 1435 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 532              	.LVL47:
1436:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RXEN;
 533              		.loc 1 1436 0
 534 0000 1023     		movs	r3, #16
 535 0002 0360     		str	r3, [r0]
 536 0004 7047     		bx	lr
 537              		.cfi_endproc
 538              	.LFE101:
 540 0006 00BF     		.section	.text.usart_disable_rx,"ax",%progbits
 541              		.align	2
 542              		.global	usart_disable_rx
 543              		.thumb
 544              		.thumb_func
 546              	usart_disable_rx:
 547              	.LFB102:
1437:../src/usart/usart.c **** }
1438:../src/usart/usart.c **** 
1439:../src/usart/usart.c **** /**
1440:../src/usart/usart.c ****  * \brief Disable USART receiver.
1441:../src/usart/usart.c ****  *
1442:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1443:../src/usart/usart.c ****  */
1444:../src/usart/usart.c **** void usart_disable_rx(Usart *p_usart)
1445:../src/usart/usart.c **** {
 548              		.loc 1 1445 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553              	.LVL48:
1446:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RXDIS;
 554              		.loc 1 1446 0
 555 0000 2023     		movs	r3, #32
 556 0002 0360     		str	r3, [r0]
 557 0004 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE102:
 561 0006 00BF     		.section	.text.usart_reset_rx,"ax",%progbits
 562              		.align	2
 563              		.global	usart_reset_rx
 564              		.thumb
 565              		.thumb_func
 567              	usart_reset_rx:
 568              	.LFB103:
1447:../src/usart/usart.c **** }
1448:../src/usart/usart.c **** 
1449:../src/usart/usart.c **** /**
1450:../src/usart/usart.c ****  * \brief Immediately stop and disable USART receiver.
1451:../src/usart/usart.c ****  *
1452:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1453:../src/usart/usart.c ****  */
1454:../src/usart/usart.c **** void usart_reset_rx(Usart *p_usart)
1455:../src/usart/usart.c **** {
 569              		.loc 1 1455 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL49:
1456:../src/usart/usart.c **** 	/* Reset Receiver */
1457:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
 575              		.loc 1 1457 0
 576 0000 2423     		movs	r3, #36
 577 0002 0360     		str	r3, [r0]
 578 0004 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE103:
 582 0006 00BF     		.section	.text.usart_set_rx_timeout,"ax",%progbits
 583              		.align	2
 584              		.global	usart_set_rx_timeout
 585              		.thumb
 586              		.thumb_func
 588              	usart_set_rx_timeout:
 589              	.LFB104:
1458:../src/usart/usart.c **** }
1459:../src/usart/usart.c **** 
1460:../src/usart/usart.c **** /**
1461:../src/usart/usart.c ****  * \brief Configure the receive timeout register.
1462:../src/usart/usart.c ****  *
1463:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1464:../src/usart/usart.c ****  * \param timeout The value of receive timeout.
1465:../src/usart/usart.c ****  */
1466:../src/usart/usart.c **** void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
1467:../src/usart/usart.c **** {
 590              		.loc 1 1467 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL50:
1468:../src/usart/usart.c **** 	p_usart->US_RTOR = timeout;
 596              		.loc 1 1468 0
 597 0000 4162     		str	r1, [r0, #36]
 598 0002 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE104:
 602              		.section	.text.usart_enable_interrupt,"ax",%progbits
 603              		.align	2
 604              		.global	usart_enable_interrupt
 605              		.thumb
 606              		.thumb_func
 608              	usart_enable_interrupt:
 609              	.LFB105:
1469:../src/usart/usart.c **** }
1470:../src/usart/usart.c **** 
1471:../src/usart/usart.c **** /**
1472:../src/usart/usart.c ****  * \brief Enable USART interrupts.
1473:../src/usart/usart.c ****  *
1474:../src/usart/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1475:../src/usart/usart.c ****  * \param ul_sources Interrupt sources bit map.
1476:../src/usart/usart.c ****  */
1477:../src/usart/usart.c **** void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
1478:../src/usart/usart.c **** {
 610              		.loc 1 1478 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL51:
1479:../src/usart/usart.c **** 	p_usart->US_IER = ul_sources;
 616              		.loc 1 1479 0
 617 0000 8160     		str	r1, [r0, #8]
 618 0002 7047     		bx	lr
 619              		.cfi_endproc
 620              	.LFE105:
 622              		.section	.text.usart_disable_interrupt,"ax",%progbits
 623              		.align	2
 624              		.global	usart_disable_interrupt
 625              		.thumb
 626              		.thumb_func
 628              	usart_disable_interrupt:
 629              	.LFB106:
1480:../src/usart/usart.c **** }
1481:../src/usart/usart.c **** 
1482:../src/usart/usart.c **** /**
1483:../src/usart/usart.c ****  * \brief Disable USART interrupts.
1484:../src/usart/usart.c ****  *
1485:../src/usart/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1486:../src/usart/usart.c ****  * \param ul_sources Interrupt sources bit map.
1487:../src/usart/usart.c ****  */
1488:../src/usart/usart.c **** void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
1489:../src/usart/usart.c **** {
 630              		.loc 1 1489 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635              	.LVL52:
1490:../src/usart/usart.c **** 	p_usart->US_IDR = ul_sources;
 636              		.loc 1 1490 0
 637 0000 C160     		str	r1, [r0, #12]
 638 0002 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE106:
 642              		.section	.text.usart_get_interrupt_mask,"ax",%progbits
 643              		.align	2
 644              		.global	usart_get_interrupt_mask
 645              		.thumb
 646              		.thumb_func
 648              	usart_get_interrupt_mask:
 649              	.LFB107:
1491:../src/usart/usart.c **** }
1492:../src/usart/usart.c **** 
1493:../src/usart/usart.c **** /**
1494:../src/usart/usart.c ****  * \brief Read USART interrupt mask.
1495:../src/usart/usart.c ****  *
1496:../src/usart/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1497:../src/usart/usart.c ****  *
1498:../src/usart/usart.c ****  * \return The interrupt mask value.
1499:../src/usart/usart.c ****  */
1500:../src/usart/usart.c **** uint32_t usart_get_interrupt_mask(Usart *p_usart)
1501:../src/usart/usart.c **** {
 650              		.loc 1 1501 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              		@ link register save eliminated.
 655              	.LVL53:
1502:../src/usart/usart.c **** 	return p_usart->US_IMR;
 656              		.loc 1 1502 0
 657 0000 0069     		ldr	r0, [r0, #16]
 658              	.LVL54:
1503:../src/usart/usart.c **** }
 659              		.loc 1 1503 0
 660 0002 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE107:
 664              		.section	.text.usart_get_status,"ax",%progbits
 665              		.align	2
 666              		.global	usart_get_status
 667              		.thumb
 668              		.thumb_func
 670              	usart_get_status:
 671              	.LFB108:
1504:../src/usart/usart.c **** 
1505:../src/usart/usart.c **** /**
1506:../src/usart/usart.c ****  * \brief Get current status.
1507:../src/usart/usart.c ****  *
1508:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1509:../src/usart/usart.c ****  *
1510:../src/usart/usart.c ****  * \return The current USART status.
1511:../src/usart/usart.c ****  */
1512:../src/usart/usart.c **** uint32_t usart_get_status(Usart *p_usart)
1513:../src/usart/usart.c **** {
 672              		.loc 1 1513 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 677              	.LVL55:
1514:../src/usart/usart.c **** 	return p_usart->US_CSR;
 678              		.loc 1 1514 0
 679 0000 4069     		ldr	r0, [r0, #20]
 680              	.LVL56:
1515:../src/usart/usart.c **** }
 681              		.loc 1 1515 0
 682 0002 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE108:
 686              		.section	.text.usart_reset_status,"ax",%progbits
 687              		.align	2
 688              		.global	usart_reset_status
 689              		.thumb
 690              		.thumb_func
 692              	usart_reset_status:
 693              	.LFB109:
1516:../src/usart/usart.c **** 
1517:../src/usart/usart.c **** /**
1518:../src/usart/usart.c ****  * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
1519:../src/usart/usart.c ****  *
1520:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1521:../src/usart/usart.c ****  */
1522:../src/usart/usart.c **** void usart_reset_status(Usart *p_usart)
1523:../src/usart/usart.c **** {
 694              		.loc 1 1523 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699              	.LVL57:
1524:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RSTSTA;
 700              		.loc 1 1524 0
 701 0000 4FF48073 		mov	r3, #256
 702 0004 0360     		str	r3, [r0]
 703 0006 7047     		bx	lr
 704              		.cfi_endproc
 705              	.LFE109:
 707              		.section	.text.usart_start_tx_break,"ax",%progbits
 708              		.align	2
 709              		.global	usart_start_tx_break
 710              		.thumb
 711              		.thumb_func
 713              	usart_start_tx_break:
 714              	.LFB110:
1525:../src/usart/usart.c **** }
1526:../src/usart/usart.c **** 
1527:../src/usart/usart.c **** /**
1528:../src/usart/usart.c ****  * \brief Start transmission of a break.
1529:../src/usart/usart.c ****  *
1530:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1531:../src/usart/usart.c ****  */
1532:../src/usart/usart.c **** void usart_start_tx_break(Usart *p_usart)
1533:../src/usart/usart.c **** {
 715              		.loc 1 1533 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720              	.LVL58:
1534:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_STTBRK;
 721              		.loc 1 1534 0
 722 0000 4FF40073 		mov	r3, #512
 723 0004 0360     		str	r3, [r0]
 724 0006 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE110:
 728              		.section	.text.usart_stop_tx_break,"ax",%progbits
 729              		.align	2
 730              		.global	usart_stop_tx_break
 731              		.thumb
 732              		.thumb_func
 734              	usart_stop_tx_break:
 735              	.LFB111:
1535:../src/usart/usart.c **** }
1536:../src/usart/usart.c **** 
1537:../src/usart/usart.c **** /**
1538:../src/usart/usart.c ****  * \brief Stop transmission of a break.
1539:../src/usart/usart.c ****  *
1540:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1541:../src/usart/usart.c ****  */
1542:../src/usart/usart.c **** void usart_stop_tx_break(Usart *p_usart)
1543:../src/usart/usart.c **** {
 736              		.loc 1 1543 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741              	.LVL59:
1544:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_STPBRK;
 742              		.loc 1 1544 0
 743 0000 4FF48063 		mov	r3, #1024
 744 0004 0360     		str	r3, [r0]
 745 0006 7047     		bx	lr
 746              		.cfi_endproc
 747              	.LFE111:
 749              		.section	.text.usart_start_rx_timeout,"ax",%progbits
 750              		.align	2
 751              		.global	usart_start_rx_timeout
 752              		.thumb
 753              		.thumb_func
 755              	usart_start_rx_timeout:
 756              	.LFB112:
1545:../src/usart/usart.c **** }
1546:../src/usart/usart.c **** 
1547:../src/usart/usart.c **** /**
1548:../src/usart/usart.c ****  * \brief Start waiting for a character before clocking the timeout count.
1549:../src/usart/usart.c ****  * Reset the status bit TIMEOUT in US_CSR.
1550:../src/usart/usart.c ****  *
1551:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1552:../src/usart/usart.c ****  */
1553:../src/usart/usart.c **** void usart_start_rx_timeout(Usart *p_usart)
1554:../src/usart/usart.c **** {
 757              		.loc 1 1554 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              		@ link register save eliminated.
 762              	.LVL60:
1555:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_STTTO;
 763              		.loc 1 1555 0
 764 0000 4FF40063 		mov	r3, #2048
 765 0004 0360     		str	r3, [r0]
 766 0006 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE112:
 770              		.section	.text.usart_restart_rx_timeout,"ax",%progbits
 771              		.align	2
 772              		.global	usart_restart_rx_timeout
 773              		.thumb
 774              		.thumb_func
 776              	usart_restart_rx_timeout:
 777              	.LFB114:
1556:../src/usart/usart.c **** }
1557:../src/usart/usart.c **** 
1558:../src/usart/usart.c **** /**
1559:../src/usart/usart.c ****  * \brief In Multidrop mode only, the next character written to the US_THR
1560:../src/usart/usart.c ****  * is sent with the address bit set.
1561:../src/usart/usart.c ****  *
1562:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1563:../src/usart/usart.c ****  * \param ul_addr The address to be sent out.
1564:../src/usart/usart.c ****  *
1565:../src/usart/usart.c ****  * \retval 0 on success.
1566:../src/usart/usart.c ****  * \retval 1 on failure.
1567:../src/usart/usart.c ****  */
1568:../src/usart/usart.c **** uint32_t usart_send_address(Usart *p_usart, uint32_t ul_addr)
1569:../src/usart/usart.c **** {
1570:../src/usart/usart.c **** 	if ((p_usart->US_MR & US_MR_PAR_MULTIDROP) != US_MR_PAR_MULTIDROP) {
1571:../src/usart/usart.c **** 		return 1;
1572:../src/usart/usart.c **** 	}
1573:../src/usart/usart.c **** 
1574:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_SENDA;
1575:../src/usart/usart.c **** 
1576:../src/usart/usart.c **** 	if (usart_write(p_usart, ul_addr)) {
1577:../src/usart/usart.c **** 		return 1;
1578:../src/usart/usart.c **** 	} else {
1579:../src/usart/usart.c **** 		return 0;
1580:../src/usart/usart.c **** 	}
1581:../src/usart/usart.c **** }
1582:../src/usart/usart.c **** 
1583:../src/usart/usart.c **** /**
1584:../src/usart/usart.c ****  * \brief Restart the receive timeout.
1585:../src/usart/usart.c ****  *
1586:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1587:../src/usart/usart.c ****  */
1588:../src/usart/usart.c **** void usart_restart_rx_timeout(Usart *p_usart)
1589:../src/usart/usart.c **** {
 778              		.loc 1 1589 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 783              	.LVL61:
1590:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RETTO;
 784              		.loc 1 1590 0
 785 0000 4FF40043 		mov	r3, #32768
 786 0004 0360     		str	r3, [r0]
 787 0006 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE114:
 791              		.section	.text.usart_drive_DTR_pin_low,"ax",%progbits
 792              		.align	2
 793              		.global	usart_drive_DTR_pin_low
 794              		.thumb
 795              		.thumb_func
 797              	usart_drive_DTR_pin_low:
 798              	.LFB115:
1591:../src/usart/usart.c **** }
1592:../src/usart/usart.c **** 
1593:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
1594:../src/usart/usart.c **** 
1595:../src/usart/usart.c **** /**
1596:../src/usart/usart.c ****  * \brief Drive the pin DTR to 0.
1597:../src/usart/usart.c ****  *
1598:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1599:../src/usart/usart.c ****  */
1600:../src/usart/usart.c **** void usart_drive_DTR_pin_low(Usart *p_usart)
1601:../src/usart/usart.c **** {
 799              		.loc 1 1601 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 804              	.LVL62:
1602:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_DTREN;
 805              		.loc 1 1602 0
 806 0000 4FF48033 		mov	r3, #65536
 807 0004 0360     		str	r3, [r0]
 808 0006 7047     		bx	lr
 809              		.cfi_endproc
 810              	.LFE115:
 812              		.section	.text.usart_drive_DTR_pin_high,"ax",%progbits
 813              		.align	2
 814              		.global	usart_drive_DTR_pin_high
 815              		.thumb
 816              		.thumb_func
 818              	usart_drive_DTR_pin_high:
 819              	.LFB116:
1603:../src/usart/usart.c **** }
1604:../src/usart/usart.c **** 
1605:../src/usart/usart.c **** /**
1606:../src/usart/usart.c ****  * \brief Drive the pin DTR to 1.
1607:../src/usart/usart.c ****  *
1608:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1609:../src/usart/usart.c ****  */
1610:../src/usart/usart.c **** void usart_drive_DTR_pin_high(Usart *p_usart)
1611:../src/usart/usart.c **** {
 820              		.loc 1 1611 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825              	.LVL63:
1612:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_DTRDIS;
 826              		.loc 1 1612 0
 827 0000 4FF40033 		mov	r3, #131072
 828 0004 0360     		str	r3, [r0]
 829 0006 7047     		bx	lr
 830              		.cfi_endproc
 831              	.LFE116:
 833              		.section	.text.usart_drive_RTS_pin_low,"ax",%progbits
 834              		.align	2
 835              		.global	usart_drive_RTS_pin_low
 836              		.thumb
 837              		.thumb_func
 839              	usart_drive_RTS_pin_low:
 840              	.LFB117:
1613:../src/usart/usart.c **** }
1614:../src/usart/usart.c **** 
1615:../src/usart/usart.c **** #endif
1616:../src/usart/usart.c **** 
1617:../src/usart/usart.c **** /**
1618:../src/usart/usart.c ****  * \brief Drive the pin RTS to 0.
1619:../src/usart/usart.c ****  *
1620:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1621:../src/usart/usart.c ****  */
1622:../src/usart/usart.c **** void usart_drive_RTS_pin_low(Usart *p_usart)
1623:../src/usart/usart.c **** {
 841              		.loc 1 1623 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL64:
1624:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RTSEN;
 847              		.loc 1 1624 0
 848 0000 4FF48023 		mov	r3, #262144
 849 0004 0360     		str	r3, [r0]
 850 0006 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE117:
 854              		.section	.text.usart_drive_RTS_pin_high,"ax",%progbits
 855              		.align	2
 856              		.global	usart_drive_RTS_pin_high
 857              		.thumb
 858              		.thumb_func
 860              	usart_drive_RTS_pin_high:
 861              	.LFB118:
1625:../src/usart/usart.c **** }
1626:../src/usart/usart.c **** 
1627:../src/usart/usart.c **** /**
1628:../src/usart/usart.c ****  * \brief Drive the pin RTS to 1.
1629:../src/usart/usart.c ****  *
1630:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1631:../src/usart/usart.c ****  */
1632:../src/usart/usart.c **** void usart_drive_RTS_pin_high(Usart *p_usart)
1633:../src/usart/usart.c **** {
 862              		.loc 1 1633 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL65:
1634:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RTSDIS;
 868              		.loc 1 1634 0
 869 0000 4FF40023 		mov	r3, #524288
 870 0004 0360     		str	r3, [r0]
 871 0006 7047     		bx	lr
 872              		.cfi_endproc
 873              	.LFE118:
 875              		.section	.text.usart_spi_force_chip_select,"ax",%progbits
 876              		.align	2
 877              		.global	usart_spi_force_chip_select
 878              		.thumb
 879              		.thumb_func
 881              	usart_spi_force_chip_select:
 882              	.LFB119:
1635:../src/usart/usart.c **** }
1636:../src/usart/usart.c **** 
1637:../src/usart/usart.c **** /**
1638:../src/usart/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
1639:../src/usart/usart.c ****  *
1640:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1641:../src/usart/usart.c ****  */
1642:../src/usart/usart.c **** void usart_spi_force_chip_select(Usart *p_usart)
1643:../src/usart/usart.c **** {
 883              		.loc 1 1643 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888              	.LVL66:
1644:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_FCS;
 889              		.loc 1 1644 0
 890 0000 4FF48023 		mov	r3, #262144
 891 0004 0360     		str	r3, [r0]
 892 0006 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE119:
 896              		.section	.text.usart_spi_release_chip_select,"ax",%progbits
 897              		.align	2
 898              		.global	usart_spi_release_chip_select
 899              		.thumb
 900              		.thumb_func
 902              	usart_spi_release_chip_select:
 903              	.LFB120:
1645:../src/usart/usart.c **** }
1646:../src/usart/usart.c **** 
1647:../src/usart/usart.c **** /**
1648:../src/usart/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
1649:../src/usart/usart.c ****  *
1650:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1651:../src/usart/usart.c ****  */
1652:../src/usart/usart.c **** void usart_spi_release_chip_select(Usart *p_usart)
1653:../src/usart/usart.c **** {
 904              		.loc 1 1653 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 0
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              		@ link register save eliminated.
 909              	.LVL67:
1654:../src/usart/usart.c **** 	p_usart->US_CR = US_CR_RCS;
 910              		.loc 1 1654 0
 911 0000 4FF40023 		mov	r3, #524288
 912 0004 0360     		str	r3, [r0]
 913 0006 7047     		bx	lr
 914              		.cfi_endproc
 915              	.LFE120:
 917              		.section	.text.usart_is_tx_ready,"ax",%progbits
 918              		.align	2
 919              		.global	usart_is_tx_ready
 920              		.thumb
 921              		.thumb_func
 923              	usart_is_tx_ready:
 924              	.LFB121:
1655:../src/usart/usart.c **** }
1656:../src/usart/usart.c **** 
1657:../src/usart/usart.c **** /**
1658:../src/usart/usart.c ****  * \brief Check if Transmit is Ready.
1659:../src/usart/usart.c ****  * Check if data have been loaded in USART_THR and are waiting to be loaded
1660:../src/usart/usart.c ****  * into the Transmit Shift Register (TSR).
1661:../src/usart/usart.c ****  *
1662:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1663:../src/usart/usart.c ****  *
1664:../src/usart/usart.c ****  * \retval 1 No data is in the Transmit Holding Register.
1665:../src/usart/usart.c ****  * \retval 0 There is data in the Transmit Holding Register.
1666:../src/usart/usart.c ****  */
1667:../src/usart/usart.c **** uint32_t usart_is_tx_ready(Usart *p_usart)
1668:../src/usart/usart.c **** {
 925              		.loc 1 1668 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930              	.LVL68:
1669:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
 931              		.loc 1 1669 0
 932 0000 4069     		ldr	r0, [r0, #20]
 933              	.LVL69:
1670:../src/usart/usart.c **** }
 934              		.loc 1 1670 0
 935 0002 C0F34000 		ubfx	r0, r0, #1, #1
 936 0006 7047     		bx	lr
 937              		.cfi_endproc
 938              	.LFE121:
 940              		.section	.text.usart_is_tx_empty,"ax",%progbits
 941              		.align	2
 942              		.global	usart_is_tx_empty
 943              		.thumb
 944              		.thumb_func
 946              	usart_is_tx_empty:
 947              	.LFB122:
1671:../src/usart/usart.c **** 
1672:../src/usart/usart.c **** /**
1673:../src/usart/usart.c ****  * \brief Check if Transmit Holding Register is empty.
1674:../src/usart/usart.c ****  * Check if the last data written in USART_THR have been loaded in TSR and the
1675:../src/usart/usart.c ****  * last data loaded in TSR have been transmitted.
1676:../src/usart/usart.c ****  *
1677:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1678:../src/usart/usart.c ****  *
1679:../src/usart/usart.c ****  * \retval 1 Transmitter is empty.
1680:../src/usart/usart.c ****  * \retval 0 Transmitter is not empty.
1681:../src/usart/usart.c ****  */
1682:../src/usart/usart.c **** uint32_t usart_is_tx_empty(Usart *p_usart)
1683:../src/usart/usart.c **** {
 948              		.loc 1 1683 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 953              	.LVL70:
1684:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
 954              		.loc 1 1684 0
 955 0000 4069     		ldr	r0, [r0, #20]
 956              	.LVL71:
1685:../src/usart/usart.c **** }
 957              		.loc 1 1685 0
 958 0002 C0F34020 		ubfx	r0, r0, #9, #1
 959 0006 7047     		bx	lr
 960              		.cfi_endproc
 961              	.LFE122:
 963              		.section	.text.usart_is_rx_ready,"ax",%progbits
 964              		.align	2
 965              		.global	usart_is_rx_ready
 966              		.thumb
 967              		.thumb_func
 969              	usart_is_rx_ready:
 970              	.LFB123:
1686:../src/usart/usart.c **** 
1687:../src/usart/usart.c **** /**
1688:../src/usart/usart.c ****  * \brief Check if the received data are ready.
1689:../src/usart/usart.c ****  * Check if Data have been received and loaded into USART_RHR.
1690:../src/usart/usart.c ****  *
1691:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1692:../src/usart/usart.c ****  *
1693:../src/usart/usart.c ****  * \retval 1 Some data has been received.
1694:../src/usart/usart.c ****  * \retval 0 No data has been received.
1695:../src/usart/usart.c ****  */
1696:../src/usart/usart.c **** uint32_t usart_is_rx_ready(Usart *p_usart)
1697:../src/usart/usart.c **** {
 971              		.loc 1 1697 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              		@ link register save eliminated.
 976              	.LVL72:
1698:../src/usart/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
 977              		.loc 1 1698 0
 978 0000 4069     		ldr	r0, [r0, #20]
 979              	.LVL73:
 980 0002 00F00100 		and	r0, r0, #1
1699:../src/usart/usart.c **** }
 981              		.loc 1 1699 0
 982 0006 7047     		bx	lr
 983              		.cfi_endproc
 984              	.LFE123:
 986              		.section	.text.usart_write,"ax",%progbits
 987              		.align	2
 988              		.global	usart_write
 989              		.thumb
 990              		.thumb_func
 992              	usart_write:
 993              	.LFB124:
1700:../src/usart/usart.c **** 
1701:../src/usart/usart.c **** /**
1702:../src/usart/usart.c ****  * \brief Write to USART Transmit Holding Register.
1703:../src/usart/usart.c ****  *
1704:../src/usart/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1705:../src/usart/usart.c ****  *
1706:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1707:../src/usart/usart.c ****  * \param c Data to be sent.
1708:../src/usart/usart.c ****  *
1709:../src/usart/usart.c ****  * \retval 0 on success.
1710:../src/usart/usart.c ****  * \retval 1 on failure.
1711:../src/usart/usart.c ****  */
1712:../src/usart/usart.c **** uint32_t usart_write(Usart *p_usart, uint32_t c)
1713:../src/usart/usart.c **** {
 994              		.loc 1 1713 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999              	.LVL74:
1714:../src/usart/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 1000              		.loc 1 1714 0
 1001 0000 4369     		ldr	r3, [r0, #20]
 1002 0002 13F0020F 		tst	r3, #2
 1003 0006 04D0     		beq	.L54
1715:../src/usart/usart.c **** 		return 1;
1716:../src/usart/usart.c **** 	}
1717:../src/usart/usart.c **** 
1718:../src/usart/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 1004              		.loc 1 1718 0
 1005 0008 C1F30801 		ubfx	r1, r1, #0, #9
 1006              	.LVL75:
 1007 000c C161     		str	r1, [r0, #28]
1719:../src/usart/usart.c **** 	return 0;
 1008              		.loc 1 1719 0
 1009 000e 0020     		movs	r0, #0
 1010              	.LVL76:
 1011 0010 7047     		bx	lr
 1012              	.LVL77:
 1013              	.L54:
1715:../src/usart/usart.c **** 		return 1;
 1014              		.loc 1 1715 0
 1015 0012 0120     		movs	r0, #1
 1016              	.LVL78:
1720:../src/usart/usart.c **** }
 1017              		.loc 1 1720 0
 1018 0014 7047     		bx	lr
 1019              		.cfi_endproc
 1020              	.LFE124:
 1022 0016 00BF     		.section	.text.usart_send_address,"ax",%progbits
 1023              		.align	2
 1024              		.global	usart_send_address
 1025              		.thumb
 1026              		.thumb_func
 1028              	usart_send_address:
 1029              	.LFB113:
1569:../src/usart/usart.c **** 	if ((p_usart->US_MR & US_MR_PAR_MULTIDROP) != US_MR_PAR_MULTIDROP) {
 1030              		.loc 1 1569 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL79:
 1035 0000 08B5     		push	{r3, lr}
 1036              		.cfi_def_cfa_offset 8
 1037              		.cfi_offset 3, -8
 1038              		.cfi_offset 14, -4
1570:../src/usart/usart.c **** 		return 1;
 1039              		.loc 1 1570 0
 1040 0002 4368     		ldr	r3, [r0, #4]
 1041 0004 03F44063 		and	r3, r3, #3072
 1042 0008 B3F5406F 		cmp	r3, #3072
 1043 000c 08D1     		bne	.L57
1574:../src/usart/usart.c **** 
 1044              		.loc 1 1574 0
 1045 000e 4FF48053 		mov	r3, #4096
 1046 0012 0360     		str	r3, [r0]
1576:../src/usart/usart.c **** 		return 1;
 1047              		.loc 1 1576 0
 1048 0014 FFF7FEFF 		bl	usart_write
 1049              	.LVL80:
 1050 0018 0346     		mov	r3, r0
 1051 001a 10B1     		cbz	r0, .L56
1577:../src/usart/usart.c **** 	} else {
 1052              		.loc 1 1577 0
 1053 001c 0123     		movs	r3, #1
 1054 001e 00E0     		b	.L56
 1055              	.LVL81:
 1056              	.L57:
1571:../src/usart/usart.c **** 	}
 1057              		.loc 1 1571 0
 1058 0020 0123     		movs	r3, #1
 1059              	.LVL82:
 1060              	.L56:
1581:../src/usart/usart.c **** 
 1061              		.loc 1 1581 0
 1062 0022 1846     		mov	r0, r3
 1063 0024 08BD     		pop	{r3, pc}
 1064              		.cfi_endproc
 1065              	.LFE113:
 1067 0026 00BF     		.section	.text.usart_putchar,"ax",%progbits
 1068              		.align	2
 1069              		.global	usart_putchar
 1070              		.thumb
 1071              		.thumb_func
 1073              	usart_putchar:
 1074              	.LFB125:
1721:../src/usart/usart.c **** 
1722:../src/usart/usart.c **** /**
1723:../src/usart/usart.c ****  * \brief Write to USART Transmit Holding Register.
1724:../src/usart/usart.c ****  *
1725:../src/usart/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1726:../src/usart/usart.c ****  *
1727:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1728:../src/usart/usart.c ****  * \param c Data to be sent.
1729:../src/usart/usart.c ****  *
1730:../src/usart/usart.c ****  * \retval 0 on success.
1731:../src/usart/usart.c ****  * \retval 1 on failure.
1732:../src/usart/usart.c ****  */
1733:../src/usart/usart.c **** uint32_t usart_putchar(Usart *p_usart, uint32_t c)
1734:../src/usart/usart.c **** {
 1075              		.loc 1 1734 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 1080              	.LVL83:
 1081              	.L60:
1735:../src/usart/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 1082              		.loc 1 1735 0 discriminator 1
 1083 0000 4369     		ldr	r3, [r0, #20]
 1084 0002 13F0020F 		tst	r3, #2
 1085 0006 FBD0     		beq	.L60
1736:../src/usart/usart.c **** 	}
1737:../src/usart/usart.c **** 
1738:../src/usart/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 1086              		.loc 1 1738 0
 1087 0008 C1F30801 		ubfx	r1, r1, #0, #9
 1088              	.LVL84:
 1089 000c C161     		str	r1, [r0, #28]
1739:../src/usart/usart.c **** 
1740:../src/usart/usart.c **** 	return 0;
1741:../src/usart/usart.c **** }
 1090              		.loc 1 1741 0
 1091 000e 0020     		movs	r0, #0
 1092              	.LVL85:
 1093 0010 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE125:
 1097 0012 00BF     		.section	.text.usart_write_line,"ax",%progbits
 1098              		.align	2
 1099              		.global	usart_write_line
 1100              		.thumb
 1101              		.thumb_func
 1103              	usart_write_line:
 1104              	.LFB126:
1742:../src/usart/usart.c **** 
1743:../src/usart/usart.c **** /**
1744:../src/usart/usart.c ****  * \brief Write one-line string through USART.
1745:../src/usart/usart.c ****  *
1746:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1747:../src/usart/usart.c ****  * \param string Pointer to one-line string to be sent.
1748:../src/usart/usart.c ****  */
1749:../src/usart/usart.c **** void usart_write_line(Usart *p_usart, const char *string)
1750:../src/usart/usart.c **** {
 1105              		.loc 1 1750 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              	.LVL86:
 1110 0000 38B5     		push	{r3, r4, r5, lr}
 1111              		.cfi_def_cfa_offset 16
 1112              		.cfi_offset 3, -16
 1113              		.cfi_offset 4, -12
 1114              		.cfi_offset 5, -8
 1115              		.cfi_offset 14, -4
 1116 0002 0546     		mov	r5, r0
 1117 0004 0C46     		mov	r4, r1
1751:../src/usart/usart.c **** 	while (*string != '\0') {
 1118              		.loc 1 1751 0
 1119 0006 04E0     		b	.L62
 1120              	.LVL87:
 1121              	.L63:
1752:../src/usart/usart.c **** 		usart_putchar(p_usart, *string++);
 1122              		.loc 1 1752 0
 1123 0008 0134     		adds	r4, r4, #1
 1124              	.LVL88:
 1125 000a 49B2     		sxtb	r1, r1
 1126 000c 2846     		mov	r0, r5
 1127 000e FFF7FEFF 		bl	usart_putchar
 1128              	.LVL89:
 1129              	.L62:
1751:../src/usart/usart.c **** 	while (*string != '\0') {
 1130              		.loc 1 1751 0
 1131 0012 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 1132 0014 0029     		cmp	r1, #0
 1133 0016 F7D1     		bne	.L63
1753:../src/usart/usart.c **** 	}
1754:../src/usart/usart.c **** }
 1134              		.loc 1 1754 0
 1135 0018 38BD     		pop	{r3, r4, r5, pc}
 1136              		.cfi_endproc
 1137              	.LFE126:
 1139 001a 00BF     		.section	.text.usart_read,"ax",%progbits
 1140              		.align	2
 1141              		.global	usart_read
 1142              		.thumb
 1143              		.thumb_func
 1145              	usart_read:
 1146              	.LFB127:
1755:../src/usart/usart.c **** 
1756:../src/usart/usart.c **** /**
1757:../src/usart/usart.c ****  * \brief Read from USART Receive Holding Register.
1758:../src/usart/usart.c ****  *
1759:../src/usart/usart.c ****  * \note Before reading user should check if rx is ready.
1760:../src/usart/usart.c ****  *
1761:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1762:../src/usart/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1763:../src/usart/usart.c ****  *
1764:../src/usart/usart.c ****  * \retval 0 on success.
1765:../src/usart/usart.c ****  * \retval 1 if no data is available or errors.
1766:../src/usart/usart.c ****  */
1767:../src/usart/usart.c **** uint32_t usart_read(Usart *p_usart, uint32_t *c)
1768:../src/usart/usart.c **** {
 1147              		.loc 1 1768 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152              	.LVL90:
1769:../src/usart/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 1153              		.loc 1 1769 0
 1154 0000 4369     		ldr	r3, [r0, #20]
 1155 0002 13F0010F 		tst	r3, #1
 1156 0006 05D0     		beq	.L67
1770:../src/usart/usart.c **** 		return 1;
1771:../src/usart/usart.c **** 	}
1772:../src/usart/usart.c **** 
1773:../src/usart/usart.c **** 	/* Read character */
1774:../src/usart/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 1157              		.loc 1 1774 0
 1158 0008 8369     		ldr	r3, [r0, #24]
 1159 000a C3F30803 		ubfx	r3, r3, #0, #9
 1160 000e 0B60     		str	r3, [r1]
1775:../src/usart/usart.c **** 
1776:../src/usart/usart.c **** 	return 0;
 1161              		.loc 1 1776 0
 1162 0010 0020     		movs	r0, #0
 1163              	.LVL91:
 1164 0012 7047     		bx	lr
 1165              	.LVL92:
 1166              	.L67:
1770:../src/usart/usart.c **** 		return 1;
 1167              		.loc 1 1770 0
 1168 0014 0120     		movs	r0, #1
 1169              	.LVL93:
1777:../src/usart/usart.c **** }
 1170              		.loc 1 1777 0
 1171 0016 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE127:
 1175              		.section	.text.usart_getchar,"ax",%progbits
 1176              		.align	2
 1177              		.global	usart_getchar
 1178              		.thumb
 1179              		.thumb_func
 1181              	usart_getchar:
 1182              	.LFB128:
1778:../src/usart/usart.c **** 
1779:../src/usart/usart.c **** /**
1780:../src/usart/usart.c ****  * \brief Read from USART Receive Holding Register.
1781:../src/usart/usart.c ****  * Before reading user should check if rx is ready.
1782:../src/usart/usart.c ****  *
1783:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1784:../src/usart/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1785:../src/usart/usart.c ****  *
1786:../src/usart/usart.c ****  * \retval 0 Data has been received.
1787:../src/usart/usart.c ****  * \retval 1 on failure.
1788:../src/usart/usart.c ****  */
1789:../src/usart/usart.c **** uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
1790:../src/usart/usart.c **** {
 1183              		.loc 1 1790 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 1188              	.LVL94:
 1189              	.L69:
1791:../src/usart/usart.c **** 	/* Wait until it's not empty or timeout has reached. */
1792:../src/usart/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 1190              		.loc 1 1792 0 discriminator 1
 1191 0000 4369     		ldr	r3, [r0, #20]
 1192 0002 13F0010F 		tst	r3, #1
 1193 0006 FBD0     		beq	.L69
1793:../src/usart/usart.c **** 	}
1794:../src/usart/usart.c **** 
1795:../src/usart/usart.c **** 	/* Read character */
1796:../src/usart/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 1194              		.loc 1 1796 0
 1195 0008 8369     		ldr	r3, [r0, #24]
 1196 000a C3F30803 		ubfx	r3, r3, #0, #9
 1197 000e 0B60     		str	r3, [r1]
1797:../src/usart/usart.c **** 
1798:../src/usart/usart.c **** 	return 0;
1799:../src/usart/usart.c **** }
 1198              		.loc 1 1799 0
 1199 0010 0020     		movs	r0, #0
 1200              	.LVL95:
 1201 0012 7047     		bx	lr
 1202              		.cfi_endproc
 1203              	.LFE128:
 1205              		.section	.text.usart_get_pdc_base,"ax",%progbits
 1206              		.align	2
 1207              		.global	usart_get_pdc_base
 1208              		.thumb
 1209              		.thumb_func
 1211              	usart_get_pdc_base:
 1212              	.LFB129:
1800:../src/usart/usart.c **** 
1801:../src/usart/usart.c **** #if (SAM3XA || SAM3U)
1802:../src/usart/usart.c **** /**
1803:../src/usart/usart.c ****  * \brief Get Transmit address for DMA operation.
1804:../src/usart/usart.c ****  *
1805:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1806:../src/usart/usart.c ****  *
1807:../src/usart/usart.c ****  * \return Transmit address for DMA access.
1808:../src/usart/usart.c ****  */
1809:../src/usart/usart.c **** uint32_t *usart_get_tx_access(Usart *p_usart)
1810:../src/usart/usart.c **** {
1811:../src/usart/usart.c **** 	return (uint32_t *)&(p_usart->US_THR);
1812:../src/usart/usart.c **** }
1813:../src/usart/usart.c **** 
1814:../src/usart/usart.c **** /**
1815:../src/usart/usart.c ****  * \brief Get Receive address for DMA operation.
1816:../src/usart/usart.c ****  *
1817:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1818:../src/usart/usart.c ****  *
1819:../src/usart/usart.c ****  * \return Receive address for DMA access.
1820:../src/usart/usart.c ****  */
1821:../src/usart/usart.c **** uint32_t *usart_get_rx_access(Usart *p_usart)
1822:../src/usart/usart.c **** {
1823:../src/usart/usart.c **** 	return (uint32_t *)&(p_usart->US_RHR);
1824:../src/usart/usart.c **** }
1825:../src/usart/usart.c **** #endif
1826:../src/usart/usart.c **** 
1827:../src/usart/usart.c **** #if (!SAM4L && !SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
1828:../src/usart/usart.c **** /**
1829:../src/usart/usart.c ****  * \brief Get USART PDC base address.
1830:../src/usart/usart.c ****  *
1831:../src/usart/usart.c ****  * \param p_usart Pointer to a UART instance.
1832:../src/usart/usart.c ****  *
1833:../src/usart/usart.c ****  * \return USART PDC registers base for PDC driver to access.
1834:../src/usart/usart.c ****  */
1835:../src/usart/usart.c **** Pdc *usart_get_pdc_base(Usart *p_usart)
1836:../src/usart/usart.c **** {
 1213              		.loc 1 1836 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 0
 1216              		@ frame_needed = 0, uses_anonymous_args = 0
 1217              		@ link register save eliminated.
 1218              	.LVL96:
1837:../src/usart/usart.c **** 	Pdc *p_pdc_base;
1838:../src/usart/usart.c **** 
1839:../src/usart/usart.c **** 	p_pdc_base = (Pdc *)NULL;
1840:../src/usart/usart.c **** 
1841:../src/usart/usart.c **** #ifdef PDC_USART
1842:../src/usart/usart.c **** 	if (p_usart == USART) {
1843:../src/usart/usart.c **** 		p_pdc_base = PDC_USART;
1844:../src/usart/usart.c **** 		return p_pdc_base;
1845:../src/usart/usart.c **** 	}
1846:../src/usart/usart.c **** #endif
1847:../src/usart/usart.c **** #ifdef PDC_USART0
1848:../src/usart/usart.c **** 	if (p_usart == USART0) {
 1219              		.loc 1 1848 0
 1220 0000 064B     		ldr	r3, .L74
 1221 0002 9842     		cmp	r0, r3
 1222 0004 05D0     		beq	.L72
1849:../src/usart/usart.c **** 		p_pdc_base = PDC_USART0;
1850:../src/usart/usart.c **** 		return p_pdc_base;
1851:../src/usart/usart.c **** 	}
1852:../src/usart/usart.c **** #endif
1853:../src/usart/usart.c **** #ifdef PDC_USART1
1854:../src/usart/usart.c **** 	else if (p_usart == USART1) {
 1223              		.loc 1 1854 0
 1224 0006 03F58043 		add	r3, r3, #16384
 1225 000a 9842     		cmp	r0, r3
 1226 000c 03D1     		bne	.L73
1855:../src/usart/usart.c **** 		p_pdc_base = PDC_USART1;
1856:../src/usart/usart.c **** 		return p_pdc_base;
 1227              		.loc 1 1856 0
 1228 000e 0448     		ldr	r0, .L74+4
 1229              	.LVL97:
 1230 0010 7047     		bx	lr
 1231              	.LVL98:
 1232              	.L72:
1850:../src/usart/usart.c **** 	}
 1233              		.loc 1 1850 0
 1234 0012 0448     		ldr	r0, .L74+8
 1235              	.LVL99:
 1236 0014 7047     		bx	lr
 1237              	.LVL100:
 1238              	.L73:
1857:../src/usart/usart.c **** 	}
1858:../src/usart/usart.c **** #endif
1859:../src/usart/usart.c **** #ifdef PDC_USART2
1860:../src/usart/usart.c **** 	else if (p_usart == USART2) {
1861:../src/usart/usart.c **** 		p_pdc_base = PDC_USART2;
1862:../src/usart/usart.c **** 		return p_pdc_base;
1863:../src/usart/usart.c **** 	}
1864:../src/usart/usart.c **** #endif
1865:../src/usart/usart.c **** #ifdef PDC_USART3
1866:../src/usart/usart.c **** 	else if (p_usart == USART3) {
1867:../src/usart/usart.c **** 		p_pdc_base = PDC_USART3;
1868:../src/usart/usart.c **** 		return p_pdc_base;
1869:../src/usart/usart.c **** 	}
1870:../src/usart/usart.c **** #endif
1871:../src/usart/usart.c **** #ifdef PDC_USART4
1872:../src/usart/usart.c **** 	else if (p_usart == USART4) {
1873:../src/usart/usart.c **** 		p_pdc_base = PDC_USART4;
1874:../src/usart/usart.c **** 		return p_pdc_base;
1875:../src/usart/usart.c **** 	}
1876:../src/usart/usart.c **** #endif
1877:../src/usart/usart.c **** #ifdef PDC_USART5
1878:../src/usart/usart.c **** 	else if (p_usart == USART5) {
1879:../src/usart/usart.c **** 		p_pdc_base = PDC_USART5;
1880:../src/usart/usart.c **** 		return p_pdc_base;
1881:../src/usart/usart.c **** 	}
1882:../src/usart/usart.c **** #endif
1883:../src/usart/usart.c **** #ifdef PDC_USART6
1884:../src/usart/usart.c **** 	else if (p_usart == USART6) {
1885:../src/usart/usart.c **** 		p_pdc_base = PDC_USART6;
1886:../src/usart/usart.c **** 		return p_pdc_base;
1887:../src/usart/usart.c **** 	}
1888:../src/usart/usart.c **** #endif
1889:../src/usart/usart.c **** #ifdef PDC_USART7
1890:../src/usart/usart.c **** 	else if (p_usart == USART7) {
1891:../src/usart/usart.c **** 		p_pdc_base = PDC_USART7;
1892:../src/usart/usart.c **** 		return p_pdc_base;
1893:../src/usart/usart.c **** 	}
1894:../src/usart/usart.c **** #endif
1895:../src/usart/usart.c **** 
1896:../src/usart/usart.c **** 	return p_pdc_base;
 1239              		.loc 1 1896 0
 1240 0016 0020     		movs	r0, #0
 1241              	.LVL101:
1897:../src/usart/usart.c **** }
 1242              		.loc 1 1897 0
 1243 0018 7047     		bx	lr
 1244              	.L75:
 1245 001a 00BF     		.align	2
 1246              	.L74:
 1247 001c 00400240 		.word	1073889280
 1248 0020 00810240 		.word	1073905920
 1249 0024 00410240 		.word	1073889536
 1250              		.cfi_endproc
 1251              	.LFE129:
 1253              		.section	.text.usart_enable_writeprotect,"ax",%progbits
 1254              		.align	2
 1255              		.global	usart_enable_writeprotect
 1256              		.thumb
 1257              		.thumb_func
 1259              	usart_enable_writeprotect:
 1260              	.LFB130:
1898:../src/usart/usart.c **** #endif
1899:../src/usart/usart.c **** 
1900:../src/usart/usart.c **** /**
1901:../src/usart/usart.c ****  * \brief Enable write protect of USART registers.
1902:../src/usart/usart.c ****  *
1903:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1904:../src/usart/usart.c ****  */
1905:../src/usart/usart.c **** void usart_enable_writeprotect(Usart *p_usart)
1906:../src/usart/usart.c **** {
 1261              		.loc 1 1906 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              		@ link register save eliminated.
 1266              	.LVL102:
1907:../src/usart/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPEN | US_WPMR_WPKEY_PASSWD;
 1267              		.loc 1 1907 0
 1268 0000 014B     		ldr	r3, .L77
 1269 0002 C0F8E430 		str	r3, [r0, #228]
 1270 0006 7047     		bx	lr
 1271              	.L78:
 1272              		.align	2
 1273              	.L77:
 1274 0008 01415355 		.word	1431519489
 1275              		.cfi_endproc
 1276              	.LFE130:
 1278              		.section	.text.usart_disable_writeprotect,"ax",%progbits
 1279              		.align	2
 1280              		.global	usart_disable_writeprotect
 1281              		.thumb
 1282              		.thumb_func
 1284              	usart_disable_writeprotect:
 1285              	.LFB131:
1908:../src/usart/usart.c **** }
1909:../src/usart/usart.c **** 
1910:../src/usart/usart.c **** /**
1911:../src/usart/usart.c ****  * \brief Disable write protect of USART registers.
1912:../src/usart/usart.c ****  *
1913:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1914:../src/usart/usart.c ****  */
1915:../src/usart/usart.c **** void usart_disable_writeprotect(Usart *p_usart)
1916:../src/usart/usart.c **** {
 1286              		.loc 1 1916 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		@ link register save eliminated.
 1291              	.LVL103:
1917:../src/usart/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
 1292              		.loc 1 1917 0
 1293 0000 014B     		ldr	r3, .L80
 1294 0002 C0F8E430 		str	r3, [r0, #228]
 1295 0006 7047     		bx	lr
 1296              	.L81:
 1297              		.align	2
 1298              	.L80:
 1299 0008 00415355 		.word	1431519488
 1300              		.cfi_endproc
 1301              	.LFE131:
 1303              		.section	.text.usart_reset,"ax",%progbits
 1304              		.align	2
 1305              		.global	usart_reset
 1306              		.thumb
 1307              		.thumb_func
 1309              	usart_reset:
 1310              	.LFB78:
 251:../src/usart/usart.c **** 	/* Disable the Write Protect. */
 1311              		.loc 1 251 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL104:
 1316 0000 10B5     		push	{r4, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 14, -4
 1320 0002 0446     		mov	r4, r0
 253:../src/usart/usart.c **** 
 1321              		.loc 1 253 0
 1322 0004 FFF7FEFF 		bl	usart_disable_writeprotect
 1323              	.LVL105:
 256:../src/usart/usart.c **** 	p_usart->US_RTOR = 0;
 1324              		.loc 1 256 0
 1325 0008 0023     		movs	r3, #0
 1326 000a 6360     		str	r3, [r4, #4]
 257:../src/usart/usart.c **** 	p_usart->US_TTGR = 0;
 1327              		.loc 1 257 0
 1328 000c 6362     		str	r3, [r4, #36]
 258:../src/usart/usart.c **** 
 1329              		.loc 1 258 0
 1330 000e A362     		str	r3, [r4, #40]
 261:../src/usart/usart.c **** 	usart_reset_rx(p_usart);
 1331              		.loc 1 261 0
 1332 0010 2046     		mov	r0, r4
 1333 0012 FFF7FEFF 		bl	usart_reset_tx
 1334              	.LVL106:
 262:../src/usart/usart.c **** 	/* Reset status bits. */
 1335              		.loc 1 262 0
 1336 0016 2046     		mov	r0, r4
 1337 0018 FFF7FEFF 		bl	usart_reset_rx
 1338              	.LVL107:
 264:../src/usart/usart.c **** 	/* Turn off RTS and DTR if exist. */
 1339              		.loc 1 264 0
 1340 001c 2046     		mov	r0, r4
 1341 001e FFF7FEFF 		bl	usart_reset_status
 1342              	.LVL108:
 266:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 1343              		.loc 1 266 0
 1344 0022 2046     		mov	r0, r4
 1345 0024 FFF7FEFF 		bl	usart_drive_RTS_pin_high
 1346              	.LVL109:
 268:../src/usart/usart.c **** #endif
 1347              		.loc 1 268 0
 1348 0028 2046     		mov	r0, r4
 1349 002a FFF7FEFF 		bl	usart_drive_DTR_pin_high
 1350              	.LVL110:
 1351 002e 10BD     		pop	{r4, pc}
 1352              		.cfi_endproc
 1353              	.LFE78:
 1355              		.section	.text.usart_init_rs232,"ax",%progbits
 1356              		.align	2
 1357              		.global	usart_init_rs232
 1358              		.thumb
 1359              		.thumb_func
 1361              	usart_init_rs232:
 1362              	.LFB79:
 286:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 1363              		.loc 1 286 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              	.LVL111:
 1368 0000 70B5     		push	{r4, r5, r6, lr}
 1369              		.cfi_def_cfa_offset 16
 1370              		.cfi_offset 4, -16
 1371              		.cfi_offset 5, -12
 1372              		.cfi_offset 6, -8
 1373              		.cfi_offset 14, -4
 1374 0002 0546     		mov	r5, r0
 1375 0004 0C46     		mov	r4, r1
 1376 0006 1646     		mov	r6, r2
 290:../src/usart/usart.c **** 
 1377              		.loc 1 290 0
 1378 0008 FFF7FEFF 		bl	usart_reset
 1379              	.LVL112:
 292:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 1380              		.loc 1 292 0
 1381 000c 0022     		movs	r2, #0
 1382 000e 0F4B     		ldr	r3, .L89
 1383 0010 1A60     		str	r2, [r3]
 294:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 1384              		.loc 1 294 0
 1385 0012 ACB1     		cbz	r4, .L86
 294:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 1386              		.loc 1 294 0 is_stmt 0 discriminator 1
 1387 0014 3246     		mov	r2, r6
 1388 0016 2168     		ldr	r1, [r4]
 1389 0018 2846     		mov	r0, r5
 1390 001a FFF7FEFF 		bl	usart_set_async_baudrate
 1391              	.LVL113:
 1392 001e 0246     		mov	r2, r0
 1393 0020 80B9     		cbnz	r0, .L87
 300:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1394              		.loc 1 300 0 is_stmt 1
 1395 0022 6168     		ldr	r1, [r4, #4]
 1396 0024 A368     		ldr	r3, [r4, #8]
 1397 0026 1943     		orrs	r1, r1, r3
 301:../src/usart/usart.c **** 
 1398              		.loc 1 301 0
 1399 0028 2369     		ldr	r3, [r4, #16]
 300:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1400              		.loc 1 300 0
 1401 002a 1943     		orrs	r1, r1, r3
 301:../src/usart/usart.c **** 
 1402              		.loc 1 301 0
 1403 002c E368     		ldr	r3, [r4, #12]
 1404 002e 1943     		orrs	r1, r1, r3
 300:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1405              		.loc 1 300 0
 1406 0030 0648     		ldr	r0, .L89
 1407 0032 0368     		ldr	r3, [r0]
 1408 0034 0B43     		orrs	r3, r3, r1
 1409 0036 0360     		str	r3, [r0]
 306:../src/usart/usart.c **** 
 1410              		.loc 1 306 0
 1411 0038 6968     		ldr	r1, [r5, #4]
 1412 003a 0B43     		orrs	r3, r3, r1
 1413 003c 6B60     		str	r3, [r5, #4]
 308:../src/usart/usart.c **** }
 1414              		.loc 1 308 0
 1415 003e 02E0     		b	.L85
 1416              	.L86:
 296:../src/usart/usart.c **** 	}
 1417              		.loc 1 296 0
 1418 0040 0122     		movs	r2, #1
 1419 0042 00E0     		b	.L85
 1420              	.L87:
 1421 0044 0122     		movs	r2, #1
 1422              	.L85:
 309:../src/usart/usart.c **** 
 1423              		.loc 1 309 0
 1424 0046 1046     		mov	r0, r2
 1425 0048 70BD     		pop	{r4, r5, r6, pc}
 1426              	.LVL114:
 1427              	.L90:
 1428 004a 00BF     		.align	2
 1429              	.L89:
 1430 004c 00000000 		.word	.LANCHOR0
 1431              		.cfi_endproc
 1432              	.LFE79:
 1434              		.section	.text.usart_init_hw_handshaking,"ax",%progbits
 1435              		.align	2
 1436              		.global	usart_init_hw_handshaking
 1437              		.thumb
 1438              		.thumb_func
 1440              	usart_init_hw_handshaking:
 1441              	.LFB80:
 325:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 1442              		.loc 1 325 0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 0
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446              	.LVL115:
 1447 0000 10B5     		push	{r4, lr}
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 4, -8
 1450              		.cfi_offset 14, -4
 1451 0002 0446     		mov	r4, r0
 327:../src/usart/usart.c **** 		return 1;
 1452              		.loc 1 327 0
 1453 0004 FFF7FEFF 		bl	usart_init_rs232
 1454              	.LVL116:
 1455 0008 38B9     		cbnz	r0, .L93
 1456 000a 0246     		mov	r2, r0
 332:../src/usart/usart.c **** 			US_MR_USART_MODE_HW_HANDSHAKING;
 1457              		.loc 1 332 0
 1458 000c 6368     		ldr	r3, [r4, #4]
 1459 000e 23F00F03 		bic	r3, r3, #15
 1460 0012 43F00203 		orr	r3, r3, #2
 1461 0016 6360     		str	r3, [r4, #4]
 335:../src/usart/usart.c **** }
 1462              		.loc 1 335 0
 1463 0018 00E0     		b	.L92
 1464              	.L93:
 328:../src/usart/usart.c **** 	}
 1465              		.loc 1 328 0
 1466 001a 0122     		movs	r2, #1
 1467              	.L92:
 336:../src/usart/usart.c **** 
 1468              		.loc 1 336 0
 1469 001c 1046     		mov	r0, r2
 1470 001e 10BD     		pop	{r4, pc}
 1471              		.cfi_endproc
 1472              	.LFE80:
 1474              		.section	.text.usart_init_modem,"ax",%progbits
 1475              		.align	2
 1476              		.global	usart_init_modem
 1477              		.thumb
 1478              		.thumb_func
 1480              	usart_init_modem:
 1481              	.LFB81:
 354:../src/usart/usart.c **** 	/*
 1482              		.loc 1 354 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              	.LVL117:
 361:../src/usart/usart.c **** 		return 1;
 1487              		.loc 1 361 0
 1488 0000 0A4B     		ldr	r3, .L100
 1489 0002 9842     		cmp	r0, r3
 1490 0004 0CD1     		bne	.L97
 354:../src/usart/usart.c **** 	/*
 1491              		.loc 1 354 0
 1492 0006 10B5     		push	{r4, lr}
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 4, -8
 1495              		.cfi_offset 14, -4
 1496 0008 0446     		mov	r4, r0
 372:../src/usart/usart.c **** 		return 1;
 1497              		.loc 1 372 0
 1498 000a FFF7FEFF 		bl	usart_init_rs232
 1499              	.LVL118:
 1500 000e 0346     		mov	r3, r0
 1501 0010 48B9     		cbnz	r0, .L98
 377:../src/usart/usart.c **** 			US_MR_USART_MODE_MODEM;
 1502              		.loc 1 377 0
 1503 0012 6268     		ldr	r2, [r4, #4]
 1504 0014 22F00F02 		bic	r2, r2, #15
 1505 0018 42F00302 		orr	r2, r2, #3
 1506 001c 6260     		str	r2, [r4, #4]
 380:../src/usart/usart.c **** }
 1507              		.loc 1 380 0
 1508 001e 03E0     		b	.L96
 1509              	.LVL119:
 1510              	.L97:
 1511              		.cfi_def_cfa_offset 0
 1512              		.cfi_restore 4
 1513              		.cfi_restore 14
 362:../src/usart/usart.c **** 	}
 1514              		.loc 1 362 0
 1515 0020 0123     		movs	r3, #1
 381:../src/usart/usart.c **** #endif
 1516              		.loc 1 381 0
 1517 0022 1846     		mov	r0, r3
 1518              	.LVL120:
 1519 0024 7047     		bx	lr
 1520              	.LVL121:
 1521              	.L98:
 1522              		.cfi_def_cfa_offset 8
 1523              		.cfi_offset 4, -8
 1524              		.cfi_offset 14, -4
 373:../src/usart/usart.c **** 	}
 1525              		.loc 1 373 0
 1526 0026 0123     		movs	r3, #1
 1527              	.L96:
 381:../src/usart/usart.c **** #endif
 1528              		.loc 1 381 0
 1529 0028 1846     		mov	r0, r3
 1530 002a 10BD     		pop	{r4, pc}
 1531              	.LVL122:
 1532              	.L101:
 1533              		.align	2
 1534              	.L100:
 1535 002c 00800240 		.word	1073905664
 1536              		.cfi_endproc
 1537              	.LFE81:
 1539              		.section	.text.usart_init_rs485,"ax",%progbits
 1540              		.align	2
 1541              		.global	usart_init_rs485
 1542              		.thumb
 1543              		.thumb_func
 1545              	usart_init_rs485:
 1546              	.LFB84:
 474:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 1547              		.loc 1 474 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              	.LVL123:
 1552 0000 10B5     		push	{r4, lr}
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 4, -8
 1555              		.cfi_offset 14, -4
 1556 0002 0446     		mov	r4, r0
 476:../src/usart/usart.c **** 		return 1;
 1557              		.loc 1 476 0
 1558 0004 FFF7FEFF 		bl	usart_init_rs232
 1559              	.LVL124:
 1560 0008 38B9     		cbnz	r0, .L104
 1561 000a 0246     		mov	r2, r0
 481:../src/usart/usart.c **** 			US_MR_USART_MODE_RS485;
 1562              		.loc 1 481 0
 1563 000c 6368     		ldr	r3, [r4, #4]
 1564 000e 23F00F03 		bic	r3, r3, #15
 1565 0012 43F00103 		orr	r3, r3, #1
 1566 0016 6360     		str	r3, [r4, #4]
 484:../src/usart/usart.c **** }
 1567              		.loc 1 484 0
 1568 0018 00E0     		b	.L103
 1569              	.L104:
 477:../src/usart/usart.c **** 	}
 1570              		.loc 1 477 0
 1571 001a 0122     		movs	r2, #1
 1572              	.L103:
 485:../src/usart/usart.c **** 
 1573              		.loc 1 485 0
 1574 001c 1046     		mov	r0, r2
 1575 001e 10BD     		pop	{r4, pc}
 1576              		.cfi_endproc
 1577              	.LFE84:
 1579              		.section	.text.usart_init_irda,"ax",%progbits
 1580              		.align	2
 1581              		.global	usart_init_irda
 1582              		.thumb
 1583              		.thumb_func
 1585              	usart_init_irda:
 1586              	.LFB85:
 502:../src/usart/usart.c **** 	/* Initialize the USART as standard RS232. */
 1587              		.loc 1 502 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              	.LVL125:
 1592 0000 38B5     		push	{r3, r4, r5, lr}
 1593              		.cfi_def_cfa_offset 16
 1594              		.cfi_offset 3, -16
 1595              		.cfi_offset 4, -12
 1596              		.cfi_offset 5, -8
 1597              		.cfi_offset 14, -4
 1598 0002 0446     		mov	r4, r0
 1599 0004 0D46     		mov	r5, r1
 504:../src/usart/usart.c **** 		return 1;
 1600              		.loc 1 504 0
 1601 0006 FFF7FEFF 		bl	usart_init_rs232
 1602              	.LVL126:
 1603 000a 48B9     		cbnz	r0, .L108
 1604 000c 0246     		mov	r2, r0
 509:../src/usart/usart.c **** 
 1605              		.loc 1 509 0
 1606 000e 6B69     		ldr	r3, [r5, #20]
 1607 0010 E364     		str	r3, [r4, #76]
 512:../src/usart/usart.c **** 			US_MR_USART_MODE_IRDA;
 1608              		.loc 1 512 0
 1609 0012 6368     		ldr	r3, [r4, #4]
 1610 0014 23F00F03 		bic	r3, r3, #15
 1611 0018 43F00803 		orr	r3, r3, #8
 1612 001c 6360     		str	r3, [r4, #4]
 515:../src/usart/usart.c **** }
 1613              		.loc 1 515 0
 1614 001e 00E0     		b	.L107
 1615              	.L108:
 505:../src/usart/usart.c **** 	}
 1616              		.loc 1 505 0
 1617 0020 0122     		movs	r2, #1
 1618              	.L107:
 516:../src/usart/usart.c **** #endif
 1619              		.loc 1 516 0
 1620 0022 1046     		mov	r0, r2
 1621 0024 38BD     		pop	{r3, r4, r5, pc}
 1622              		.cfi_endproc
 1623              	.LFE85:
 1625 0026 00BF     		.section	.text.usart_init_sync_master,"ax",%progbits
 1626              		.align	2
 1627              		.global	usart_init_sync_master
 1628              		.thumb
 1629              		.thumb_func
 1631              	usart_init_sync_master:
 1632              	.LFB82:
 398:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 1633              		.loc 1 398 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              	.LVL127:
 1638 0000 70B5     		push	{r4, r5, r6, lr}
 1639              		.cfi_def_cfa_offset 16
 1640              		.cfi_offset 4, -16
 1641              		.cfi_offset 5, -12
 1642              		.cfi_offset 6, -8
 1643              		.cfi_offset 14, -4
 1644 0002 0546     		mov	r5, r0
 1645 0004 0C46     		mov	r4, r1
 1646 0006 1646     		mov	r6, r2
 402:../src/usart/usart.c **** 
 1647              		.loc 1 402 0
 1648 0008 FFF7FEFF 		bl	usart_reset
 1649              	.LVL128:
 404:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 1650              		.loc 1 404 0
 1651 000c 0022     		movs	r2, #0
 1652 000e 104B     		ldr	r3, .L115
 1653 0010 1A60     		str	r2, [r3]
 406:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 1654              		.loc 1 406 0
 1655 0012 BCB1     		cbz	r4, .L112
 406:../src/usart/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 1656              		.loc 1 406 0 is_stmt 0 discriminator 1
 1657 0014 3246     		mov	r2, r6
 1658 0016 2168     		ldr	r1, [r4]
 1659 0018 2846     		mov	r0, r5
 1660 001a FFF7FEFF 		bl	usart_set_sync_master_baudrate
 1661              	.LVL129:
 1662 001e 0246     		mov	r2, r0
 1663 0020 90B9     		cbnz	r0, .L113
 412:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1664              		.loc 1 412 0 is_stmt 1
 1665 0022 6168     		ldr	r1, [r4, #4]
 1666 0024 A368     		ldr	r3, [r4, #8]
 1667 0026 1943     		orrs	r1, r1, r3
 413:../src/usart/usart.c **** 
 1668              		.loc 1 413 0
 1669 0028 2369     		ldr	r3, [r4, #16]
 412:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1670              		.loc 1 412 0
 1671 002a 1943     		orrs	r1, r1, r3
 413:../src/usart/usart.c **** 
 1672              		.loc 1 413 0
 1673 002c E368     		ldr	r3, [r4, #12]
 1674 002e 1943     		orrs	r1, r1, r3
 412:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1675              		.loc 1 412 0
 1676 0030 0748     		ldr	r0, .L115
 1677 0032 0368     		ldr	r3, [r0]
 1678 0034 0B43     		orrs	r3, r3, r1
 416:../src/usart/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1679              		.loc 1 416 0
 1680 0036 43F48023 		orr	r3, r3, #262144
 1681 003a 0360     		str	r3, [r0]
 417:../src/usart/usart.c **** 
 1682              		.loc 1 417 0
 1683 003c 6968     		ldr	r1, [r5, #4]
 1684 003e 0B43     		orrs	r3, r3, r1
 1685 0040 6B60     		str	r3, [r5, #4]
 419:../src/usart/usart.c **** }
 1686              		.loc 1 419 0
 1687 0042 02E0     		b	.L111
 1688              	.L112:
 408:../src/usart/usart.c **** 	}
 1689              		.loc 1 408 0
 1690 0044 0122     		movs	r2, #1
 1691 0046 00E0     		b	.L111
 1692              	.L113:
 1693 0048 0122     		movs	r2, #1
 1694              	.L111:
 420:../src/usart/usart.c **** 
 1695              		.loc 1 420 0
 1696 004a 1046     		mov	r0, r2
 1697 004c 70BD     		pop	{r4, r5, r6, pc}
 1698              	.LVL130:
 1699              	.L116:
 1700 004e 00BF     		.align	2
 1701              	.L115:
 1702 0050 00000000 		.word	.LANCHOR1
 1703              		.cfi_endproc
 1704              	.LFE82:
 1706              		.section	.text.usart_init_sync_slave,"ax",%progbits
 1707              		.align	2
 1708              		.global	usart_init_sync_slave
 1709              		.thumb
 1710              		.thumb_func
 1712              	usart_init_sync_slave:
 1713              	.LFB83:
 435:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 1714              		.loc 1 435 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 1718              	.LVL131:
 1719 0000 38B5     		push	{r3, r4, r5, lr}
 1720              		.cfi_def_cfa_offset 16
 1721              		.cfi_offset 3, -16
 1722              		.cfi_offset 4, -12
 1723              		.cfi_offset 5, -8
 1724              		.cfi_offset 14, -4
 1725 0002 0546     		mov	r5, r0
 1726 0004 0C46     		mov	r4, r1
 439:../src/usart/usart.c **** 
 1727              		.loc 1 439 0
 1728 0006 FFF7FEFF 		bl	usart_reset
 1729              	.LVL132:
 441:../src/usart/usart.c **** 	usart_set_sync_slave_baudrate(p_usart);
 1730              		.loc 1 441 0
 1731 000a 0022     		movs	r2, #0
 1732 000c 0B4B     		ldr	r3, .L121
 1733 000e 1A60     		str	r2, [r3]
 442:../src/usart/usart.c **** 
 1734              		.loc 1 442 0
 1735 0010 2846     		mov	r0, r5
 1736 0012 FFF7FEFF 		bl	usart_set_sync_slave_baudrate
 1737              	.LVL133:
 445:../src/usart/usart.c **** 		return 1;
 1738              		.loc 1 445 0
 1739 0016 7CB1     		cbz	r4, .L119
 450:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1740              		.loc 1 450 0
 1741 0018 6268     		ldr	r2, [r4, #4]
 1742 001a A368     		ldr	r3, [r4, #8]
 1743 001c 1A43     		orrs	r2, r2, r3
 451:../src/usart/usart.c **** 
 1744              		.loc 1 451 0
 1745 001e 2369     		ldr	r3, [r4, #16]
 450:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1746              		.loc 1 450 0
 1747 0020 1343     		orrs	r3, r3, r2
 451:../src/usart/usart.c **** 
 1748              		.loc 1 451 0
 1749 0022 E268     		ldr	r2, [r4, #12]
 1750 0024 1A43     		orrs	r2, r2, r3
 450:../src/usart/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1751              		.loc 1 450 0
 1752 0026 0549     		ldr	r1, .L121
 1753 0028 0B68     		ldr	r3, [r1]
 1754 002a 1343     		orrs	r3, r3, r2
 1755 002c 0B60     		str	r3, [r1]
 455:../src/usart/usart.c **** 
 1756              		.loc 1 455 0
 1757 002e 6A68     		ldr	r2, [r5, #4]
 1758 0030 1343     		orrs	r3, r3, r2
 1759 0032 6B60     		str	r3, [r5, #4]
 457:../src/usart/usart.c **** }
 1760              		.loc 1 457 0
 1761 0034 0020     		movs	r0, #0
 1762 0036 38BD     		pop	{r3, r4, r5, pc}
 1763              	.LVL134:
 1764              	.L119:
 446:../src/usart/usart.c **** 	}
 1765              		.loc 1 446 0
 1766 0038 0120     		movs	r0, #1
 458:../src/usart/usart.c **** 
 1767              		.loc 1 458 0
 1768 003a 38BD     		pop	{r3, r4, r5, pc}
 1769              	.LVL135:
 1770              	.L122:
 1771              		.align	2
 1772              	.L121:
 1773 003c 00000000 		.word	.LANCHOR2
 1774              		.cfi_endproc
 1775              	.LFE83:
 1777              		.section	.text.usart_init_iso7816,"ax",%progbits
 1778              		.align	2
 1779              		.global	usart_init_iso7816
 1780              		.thumb
 1781              		.thumb_func
 1783              	usart_init_iso7816:
 1784              	.LFB87:
 569:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 1785              		.loc 1 569 0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789              	.LVL136:
 1790 0000 70B5     		push	{r4, r5, r6, lr}
 1791              		.cfi_def_cfa_offset 16
 1792              		.cfi_offset 4, -16
 1793              		.cfi_offset 5, -12
 1794              		.cfi_offset 6, -8
 1795              		.cfi_offset 14, -4
 1796 0002 0546     		mov	r5, r0
 1797 0004 0C46     		mov	r4, r1
 1798 0006 1646     		mov	r6, r2
 573:../src/usart/usart.c **** 
 1799              		.loc 1 573 0
 1800 0008 FFF7FEFF 		bl	usart_reset
 1801              	.LVL137:
 575:../src/usart/usart.c **** 
 1802              		.loc 1 575 0
 1803 000c 0022     		movs	r2, #0
 1804 000e 264B     		ldr	r3, .L135
 1805 0010 1A60     		str	r2, [r3]
 578:../src/usart/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1806              		.loc 1 578 0
 1807 0012 002C     		cmp	r4, #0
 1808 0014 3FD0     		beq	.L130
 578:../src/usart/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1809              		.loc 1 578 0 is_stmt 0 discriminator 1
 1810 0016 A368     		ldr	r3, [r4, #8]
 1811 0018 13B1     		cbz	r3, .L125
 578:../src/usart/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1812              		.loc 1 578 0 discriminator 2
 1813 001a B3F5007F 		cmp	r3, #512
 1814 001e 3CD1     		bne	.L131
 1815              	.L125:
 583:../src/usart/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 1816              		.loc 1 583 0 is_stmt 1
 1817 0020 E369     		ldr	r3, [r4, #28]
 1818 0022 6BB9     		cbnz	r3, .L126
 585:../src/usart/usart.c **** 
 1819              		.loc 1 585 0
 1820 0024 6269     		ldr	r2, [r4, #20]
 584:../src/usart/usart.c **** 				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
 1821              		.loc 1 584 0
 1822 0026 42F20403 		movw	r3, #8196
 1823 002a 43EA0263 		orr	r3, r3, r2, lsl #24
 1824 002e 1E4A     		ldr	r2, .L135
 1825 0030 1360     		str	r3, [r2]
 587:../src/usart/usart.c **** 			ul_reg_val |= US_MR_MSBF;
 1826              		.loc 1 587 0
 1827 0032 A269     		ldr	r2, [r4, #24]
 1828 0034 72B1     		cbz	r2, .L127
 588:../src/usart/usart.c **** 		}
 1829              		.loc 1 588 0
 1830 0036 43F48033 		orr	r3, r3, #65536
 1831 003a 1B4A     		ldr	r2, .L135
 1832 003c 1360     		str	r3, [r2]
 1833 003e 09E0     		b	.L127
 1834              	.L126:
 590:../src/usart/usart.c **** 		/*
 1835              		.loc 1 590 0
 1836 0040 012B     		cmp	r3, #1
 1837 0042 2CD1     		bne	.L132
 595:../src/usart/usart.c **** 			return 1;
 1838              		.loc 1 595 0
 1839 0044 A269     		ldr	r2, [r4, #24]
 1840 0046 002A     		cmp	r2, #0
 1841 0048 2CD1     		bne	.L124
 595:../src/usart/usart.c **** 			return 1;
 1842              		.loc 1 595 0 is_stmt 0 discriminator 1
 1843 004a 6269     		ldr	r2, [r4, #20]
 1844 004c 52BB     		cbnz	r2, .L124
 600:../src/usart/usart.c **** 	} else {
 1845              		.loc 1 600 0 is_stmt 1
 1846 004e 0622     		movs	r2, #6
 1847 0050 154B     		ldr	r3, .L135
 1848 0052 1A60     		str	r2, [r3]
 1849              	.L127:
 606:../src/usart/usart.c **** 		return 1;
 1850              		.loc 1 606 0
 1851 0054 3246     		mov	r2, r6
 1852 0056 2168     		ldr	r1, [r4]
 1853 0058 2846     		mov	r0, r5
 1854 005a FFF7FEFF 		bl	usart_set_iso7816_clock
 1855              	.LVL138:
 1856 005e 0346     		mov	r3, r0
 1857 0060 F8B9     		cbnz	r0, .L133
 611:../src/usart/usart.c **** 
 1858              		.loc 1 611 0
 1859 0062 6268     		ldr	r2, [r4, #4]
 1860 0064 2A64     		str	r2, [r5, #64]
 614:../src/usart/usart.c **** 
 1861              		.loc 1 614 0
 1862 0066 A068     		ldr	r0, [r4, #8]
 1863 0068 0F49     		ldr	r1, .L135
 1864 006a 0A68     		ldr	r2, [r1]
 1865 006c 0243     		orrs	r2, r2, r0
 1866 006e 0A60     		str	r2, [r1]
 616:../src/usart/usart.c **** 		ul_reg_val |= US_MR_INACK;
 1867              		.loc 1 616 0
 1868 0070 E168     		ldr	r1, [r4, #12]
 1869 0072 19B1     		cbz	r1, .L128
 617:../src/usart/usart.c **** 	}
 1870              		.loc 1 617 0
 1871 0074 42F48012 		orr	r2, r2, #1048576
 1872 0078 0B49     		ldr	r1, .L135
 1873 007a 0A60     		str	r2, [r1]
 1874              	.L128:
 619:../src/usart/usart.c **** 		ul_reg_val |= US_MR_DSNACK;
 1875              		.loc 1 619 0
 1876 007c 2269     		ldr	r2, [r4, #16]
 1877 007e 22B1     		cbz	r2, .L129
 620:../src/usart/usart.c **** 	}
 1878              		.loc 1 620 0
 1879 0080 0949     		ldr	r1, .L135
 1880 0082 0A68     		ldr	r2, [r1]
 1881 0084 42F40012 		orr	r2, r2, #2097152
 1882 0088 0A60     		str	r2, [r1]
 1883              	.L129:
 623:../src/usart/usart.c **** 
 1884              		.loc 1 623 0
 1885 008a 6968     		ldr	r1, [r5, #4]
 1886 008c 064A     		ldr	r2, .L135
 1887 008e 1268     		ldr	r2, [r2]
 1888 0090 0A43     		orrs	r2, r2, r1
 1889 0092 6A60     		str	r2, [r5, #4]
 625:../src/usart/usart.c **** }
 1890              		.loc 1 625 0
 1891 0094 06E0     		b	.L124
 1892              	.L130:
 580:../src/usart/usart.c **** 	}
 1893              		.loc 1 580 0
 1894 0096 0123     		movs	r3, #1
 1895 0098 04E0     		b	.L124
 1896              	.L131:
 1897 009a 0123     		movs	r3, #1
 1898 009c 02E0     		b	.L124
 1899              	.L132:
 602:../src/usart/usart.c **** 	}
 1900              		.loc 1 602 0
 1901 009e 0123     		movs	r3, #1
 1902 00a0 00E0     		b	.L124
 1903              	.L133:
 607:../src/usart/usart.c **** 	}
 1904              		.loc 1 607 0
 1905 00a2 0123     		movs	r3, #1
 1906              	.L124:
 626:../src/usart/usart.c **** 
 1907              		.loc 1 626 0
 1908 00a4 1846     		mov	r0, r3
 1909 00a6 70BD     		pop	{r4, r5, r6, pc}
 1910              	.LVL139:
 1911              	.L136:
 1912              		.align	2
 1913              	.L135:
 1914 00a8 00000000 		.word	.LANCHOR3
 1915              		.cfi_endproc
 1916              	.LFE87:
 1918              		.section	.text.usart_init_spi_master,"ax",%progbits
 1919              		.align	2
 1920              		.global	usart_init_spi_master
 1921              		.thumb
 1922              		.thumb_func
 1924              	usart_init_spi_master:
 1925              	.LFB95:
 728:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 1926              		.loc 1 728 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              	.LVL140:
 1931 0000 70B5     		push	{r4, r5, r6, lr}
 1932              		.cfi_def_cfa_offset 16
 1933              		.cfi_offset 4, -16
 1934              		.cfi_offset 5, -12
 1935              		.cfi_offset 6, -8
 1936              		.cfi_offset 14, -4
 1937 0002 0546     		mov	r5, r0
 1938 0004 0C46     		mov	r4, r1
 1939 0006 1646     		mov	r6, r2
 732:../src/usart/usart.c **** 
 1940              		.loc 1 732 0
 1941 0008 FFF7FEFF 		bl	usart_reset
 1942              	.LVL141:
 734:../src/usart/usart.c **** 	/* Check whether the input values are legal. */
 1943              		.loc 1 734 0
 1944 000c 0022     		movs	r2, #0
 1945 000e 244B     		ldr	r3, .L149
 1946 0010 1A60     		str	r2, [r3]
 736:../src/usart/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1947              		.loc 1 736 0
 1948 0012 002C     		cmp	r4, #0
 1949 0014 3DD0     		beq	.L145
 736:../src/usart/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1950              		.loc 1 736 0 is_stmt 0 discriminator 1
 1951 0016 A368     		ldr	r3, [r4, #8]
 1952 0018 032B     		cmp	r3, #3
 1953 001a 3CD8     		bhi	.L146
 737:../src/usart/usart.c **** 			ul_mck)) {
 1954              		.loc 1 737 0 is_stmt 1 discriminator 2
 1955 001c 3246     		mov	r2, r6
 1956 001e 2168     		ldr	r1, [r4]
 1957 0020 2846     		mov	r0, r5
 1958 0022 FFF7FEFF 		bl	usart_set_spi_master_baudrate
 1959              	.LVL142:
 736:../src/usart/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1960              		.loc 1 736 0 discriminator 2
 1961 0026 0246     		mov	r2, r0
 1962 0028 0028     		cmp	r0, #0
 1963 002a 36D1     		bne	.L147
 743:../src/usart/usart.c **** 
 1964              		.loc 1 743 0
 1965 002c 6168     		ldr	r1, [r4, #4]
 1966 002e 1C48     		ldr	r0, .L149
 1967 0030 0368     		ldr	r3, [r0]
 1968 0032 1943     		orrs	r1, r1, r3
 747:../src/usart/usart.c **** 
 1969              		.loc 1 747 0
 1970 0034 E368     		ldr	r3, [r4, #12]
 746:../src/usart/usart.c **** 			p_usart_opt->channel_mode;
 1971              		.loc 1 746 0
 1972 0036 0B43     		orrs	r3, r3, r1
 1973 0038 43F48023 		orr	r3, r3, #262144
 1974 003c 43F00E03 		orr	r3, r3, #14
 1975 0040 0360     		str	r3, [r0]
 749:../src/usart/usart.c **** 	case SPI_MODE_0:
 1976              		.loc 1 749 0
 1977 0042 A168     		ldr	r1, [r4, #8]
 1978 0044 0329     		cmp	r1, #3
 1979 0046 1ED8     		bhi	.L139
 1980 0048 DFE801F0 		tbb	[pc, r1]
 1981              	.L141:
 1982 004c 02       		.byte	(.L140-.L141)/2
 1983 004d 09       		.byte	(.L142-.L141)/2
 1984 004e 10       		.byte	(.L143-.L141)/2
 1985 004f 17       		.byte	(.L144-.L141)/2
 1986              		.p2align 1
 1987              	.L140:
 751:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1988              		.loc 1 751 0
 1989 0050 43F48073 		orr	r3, r3, #256
 752:../src/usart/usart.c **** 		break;
 1990              		.loc 1 752 0
 1991 0054 23F48033 		bic	r3, r3, #65536
 1992 0058 1149     		ldr	r1, .L149
 1993 005a 0B60     		str	r3, [r1]
 753:../src/usart/usart.c **** 
 1994              		.loc 1 753 0
 1995 005c 13E0     		b	.L139
 1996              	.L142:
 757:../src/usart/usart.c **** 		break;
 1997              		.loc 1 757 0
 1998 005e 23F48033 		bic	r3, r3, #65536
 1999 0062 23F48073 		bic	r3, r3, #256
 2000 0066 0E49     		ldr	r1, .L149
 2001 0068 0B60     		str	r3, [r1]
 758:../src/usart/usart.c **** 
 2002              		.loc 1 758 0
 2003 006a 0CE0     		b	.L139
 2004              	.L143:
 762:../src/usart/usart.c **** 		break;
 2005              		.loc 1 762 0
 2006 006c 43F48033 		orr	r3, r3, #65536
 2007 0070 43F48073 		orr	r3, r3, #256
 2008 0074 0A49     		ldr	r1, .L149
 2009 0076 0B60     		str	r3, [r1]
 763:../src/usart/usart.c **** 
 2010              		.loc 1 763 0
 2011 0078 05E0     		b	.L139
 2012              	.L144:
 766:../src/usart/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 2013              		.loc 1 766 0
 2014 007a 23F48073 		bic	r3, r3, #256
 767:../src/usart/usart.c **** 		break;
 2015              		.loc 1 767 0
 2016 007e 43F48033 		orr	r3, r3, #65536
 2017 0082 0749     		ldr	r1, .L149
 2018 0084 0B60     		str	r3, [r1]
 2019              	.L139:
 774:../src/usart/usart.c **** 
 2020              		.loc 1 774 0
 2021 0086 6968     		ldr	r1, [r5, #4]
 2022 0088 054B     		ldr	r3, .L149
 2023 008a 1B68     		ldr	r3, [r3]
 2024 008c 0B43     		orrs	r3, r3, r1
 2025 008e 6B60     		str	r3, [r5, #4]
 776:../src/usart/usart.c **** }
 2026              		.loc 1 776 0
 2027 0090 04E0     		b	.L138
 2028              	.L145:
 739:../src/usart/usart.c **** 	}
 2029              		.loc 1 739 0
 2030 0092 0122     		movs	r2, #1
 2031 0094 02E0     		b	.L138
 2032              	.L146:
 2033 0096 0122     		movs	r2, #1
 2034 0098 00E0     		b	.L138
 2035              	.L147:
 2036 009a 0122     		movs	r2, #1
 2037              	.L138:
 777:../src/usart/usart.c **** 
 2038              		.loc 1 777 0
 2039 009c 1046     		mov	r0, r2
 2040 009e 70BD     		pop	{r4, r5, r6, pc}
 2041              	.LVL143:
 2042              	.L150:
 2043              		.align	2
 2044              	.L149:
 2045 00a0 00000000 		.word	.LANCHOR4
 2046              		.cfi_endproc
 2047              	.LFE95:
 2049              		.section	.text.usart_init_spi_slave,"ax",%progbits
 2050              		.align	2
 2051              		.global	usart_init_spi_slave
 2052              		.thumb
 2053              		.thumb_func
 2055              	usart_init_spi_slave:
 2056              	.LFB96:
 792:../src/usart/usart.c **** 	static uint32_t ul_reg_val;
 2057              		.loc 1 792 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              	.LVL144:
 2062 0000 38B5     		push	{r3, r4, r5, lr}
 2063              		.cfi_def_cfa_offset 16
 2064              		.cfi_offset 3, -16
 2065              		.cfi_offset 4, -12
 2066              		.cfi_offset 5, -8
 2067              		.cfi_offset 14, -4
 2068 0002 0446     		mov	r4, r0
 2069 0004 0D46     		mov	r5, r1
 796:../src/usart/usart.c **** 
 2070              		.loc 1 796 0
 2071 0006 FFF7FEFF 		bl	usart_reset
 2072              	.LVL145:
 798:../src/usart/usart.c **** 	usart_set_spi_slave_baudrate(p_usart);
 2073              		.loc 1 798 0
 2074 000a 0022     		movs	r2, #0
 2075 000c 1F4B     		ldr	r3, .L162
 2076 000e 1A60     		str	r2, [r3]
 799:../src/usart/usart.c **** 
 2077              		.loc 1 799 0
 2078 0010 2046     		mov	r0, r4
 2079 0012 FFF7FEFF 		bl	usart_set_spi_slave_baudrate
 2080              	.LVL146:
 802:../src/usart/usart.c **** 		return 1;
 2081              		.loc 1 802 0
 2082 0016 002D     		cmp	r5, #0
 2083 0018 33D0     		beq	.L159
 802:../src/usart/usart.c **** 		return 1;
 2084              		.loc 1 802 0 is_stmt 0 discriminator 1
 2085 001a A968     		ldr	r1, [r5, #8]
 2086 001c 0329     		cmp	r1, #3
 2087 001e 32D8     		bhi	.L160
 807:../src/usart/usart.c **** 
 2088              		.loc 1 807 0 is_stmt 1
 2089 0020 6A68     		ldr	r2, [r5, #4]
 2090 0022 1A48     		ldr	r0, .L162
 2091 0024 0368     		ldr	r3, [r0]
 2092 0026 1343     		orrs	r3, r3, r2
 810:../src/usart/usart.c **** 
 2093              		.loc 1 810 0
 2094 0028 EA68     		ldr	r2, [r5, #12]
 2095 002a 1343     		orrs	r3, r3, r2
 2096 002c 43F00F03 		orr	r3, r3, #15
 2097 0030 0360     		str	r3, [r0]
 812:../src/usart/usart.c **** 	case SPI_MODE_0:
 2098              		.loc 1 812 0
 2099 0032 0329     		cmp	r1, #3
 2100 0034 1ED8     		bhi	.L153
 2101 0036 DFE801F0 		tbb	[pc, r1]
 2102              	.L155:
 2103 003a 02       		.byte	(.L154-.L155)/2
 2104 003b 09       		.byte	(.L156-.L155)/2
 2105 003c 10       		.byte	(.L157-.L155)/2
 2106 003d 17       		.byte	(.L158-.L155)/2
 2107              		.p2align 1
 2108              	.L154:
 814:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 2109              		.loc 1 814 0
 2110 003e 43F48073 		orr	r3, r3, #256
 815:../src/usart/usart.c **** 		break;
 2111              		.loc 1 815 0
 2112 0042 23F48033 		bic	r3, r3, #65536
 2113 0046 114A     		ldr	r2, .L162
 2114 0048 1360     		str	r3, [r2]
 816:../src/usart/usart.c **** 
 2115              		.loc 1 816 0
 2116 004a 13E0     		b	.L153
 2117              	.L156:
 820:../src/usart/usart.c **** 		break;
 2118              		.loc 1 820 0
 2119 004c 23F48033 		bic	r3, r3, #65536
 2120 0050 23F48073 		bic	r3, r3, #256
 2121 0054 0D4A     		ldr	r2, .L162
 2122 0056 1360     		str	r3, [r2]
 821:../src/usart/usart.c **** 
 2123              		.loc 1 821 0
 2124 0058 0CE0     		b	.L153
 2125              	.L157:
 825:../src/usart/usart.c **** 		break;
 2126              		.loc 1 825 0
 2127 005a 43F48033 		orr	r3, r3, #65536
 2128 005e 43F48073 		orr	r3, r3, #256
 2129 0062 0A4A     		ldr	r2, .L162
 2130 0064 1360     		str	r3, [r2]
 826:../src/usart/usart.c **** 
 2131              		.loc 1 826 0
 2132 0066 05E0     		b	.L153
 2133              	.L158:
 829:../src/usart/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 2134              		.loc 1 829 0
 2135 0068 43F48033 		orr	r3, r3, #65536
 830:../src/usart/usart.c **** 		break;
 2136              		.loc 1 830 0
 2137 006c 23F48073 		bic	r3, r3, #256
 2138 0070 064A     		ldr	r2, .L162
 2139 0072 1360     		str	r3, [r2]
 2140              	.L153:
 837:../src/usart/usart.c **** 
 2141              		.loc 1 837 0
 2142 0074 6268     		ldr	r2, [r4, #4]
 2143 0076 054B     		ldr	r3, .L162
 2144 0078 1B68     		ldr	r3, [r3]
 2145 007a 1343     		orrs	r3, r3, r2
 2146 007c 6360     		str	r3, [r4, #4]
 839:../src/usart/usart.c **** }
 2147              		.loc 1 839 0
 2148 007e 0020     		movs	r0, #0
 2149 0080 38BD     		pop	{r3, r4, r5, pc}
 2150              	.LVL147:
 2151              	.L159:
 803:../src/usart/usart.c **** 	}
 2152              		.loc 1 803 0
 2153 0082 0120     		movs	r0, #1
 2154 0084 38BD     		pop	{r3, r4, r5, pc}
 2155              	.LVL148:
 2156              	.L160:
 2157 0086 0120     		movs	r0, #1
 840:../src/usart/usart.c **** 
 2158              		.loc 1 840 0
 2159 0088 38BD     		pop	{r3, r4, r5, pc}
 2160              	.LVL149:
 2161              	.L163:
 2162 008a 00BF     		.align	2
 2163              	.L162:
 2164 008c 00000000 		.word	.LANCHOR5
 2165              		.cfi_endproc
 2166              	.LFE96:
 2168              		.section	.text.usart_get_writeprotect_status,"ax",%progbits
 2169              		.align	2
 2170              		.global	usart_get_writeprotect_status
 2171              		.thumb
 2172              		.thumb_func
 2174              	usart_get_writeprotect_status:
 2175              	.LFB132:
1918:../src/usart/usart.c **** }
1919:../src/usart/usart.c **** 
1920:../src/usart/usart.c **** /**
1921:../src/usart/usart.c ****  * \brief Get write protect status.
1922:../src/usart/usart.c ****  *
1923:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1924:../src/usart/usart.c ****  *
1925:../src/usart/usart.c ****  * \return 0 if no write protect violation occurred, or 16-bit write protect
1926:../src/usart/usart.c ****  * violation source.
1927:../src/usart/usart.c ****  */
1928:../src/usart/usart.c **** uint32_t usart_get_writeprotect_status(Usart *p_usart)
1929:../src/usart/usart.c **** {
 2176              		.loc 1 1929 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180              		@ link register save eliminated.
 2181              	.LVL150:
1930:../src/usart/usart.c **** 	uint32_t reg_value;
1931:../src/usart/usart.c **** 
1932:../src/usart/usart.c **** 	reg_value = p_usart->US_WPSR;
 2182              		.loc 1 1932 0
 2183 0000 D0F8E830 		ldr	r3, [r0, #232]
 2184              	.LVL151:
1933:../src/usart/usart.c **** 	if (reg_value & US_WPSR_WPVS) {
 2185              		.loc 1 1933 0
 2186 0004 13F00100 		ands	r0, r3, #1
 2187              	.LVL152:
 2188 0008 01D0     		beq	.L165
1934:../src/usart/usart.c **** 		return (reg_value & US_WPSR_WPVSRC_Msk) >> US_WPSR_WPVSRC_Pos;
 2189              		.loc 1 1934 0
 2190 000a C3F30F20 		ubfx	r0, r3, #8, #16
 2191              	.L165:
1935:../src/usart/usart.c **** 	} else {
1936:../src/usart/usart.c **** 		return 0;
1937:../src/usart/usart.c **** 	}
1938:../src/usart/usart.c **** }
 2192              		.loc 1 1938 0
 2193 000e 7047     		bx	lr
 2194              		.cfi_endproc
 2195              	.LFE132:
 2197              		.section	.text.usart_man_set_tx_pre_len,"ax",%progbits
 2198              		.align	2
 2199              		.global	usart_man_set_tx_pre_len
 2200              		.thumb
 2201              		.thumb_func
 2203              	usart_man_set_tx_pre_len:
 2204              	.LFB133:
1939:../src/usart/usart.c **** 
1940:../src/usart/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM3XA || SAM4L || SAM4E || SAM4C || SAM4CP || SAM4CM)
1941:../src/usart/usart.c **** 
1942:../src/usart/usart.c **** /**
1943:../src/usart/usart.c ****  * \brief Configure the transmitter preamble length when the Manchester
1944:../src/usart/usart.c ****  * encode/decode is enabled.
1945:../src/usart/usart.c ****  *
1946:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1947:../src/usart/usart.c ****  * \param uc_len The transmitter preamble length, which should be 0 ~ 15.
1948:../src/usart/usart.c ****  */
1949:../src/usart/usart.c **** void usart_man_set_tx_pre_len(Usart *p_usart, uint8_t uc_len)
1950:../src/usart/usart.c **** {
 2205              		.loc 1 1950 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              		@ link register save eliminated.
 2210              	.LVL153:
1951:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 2211              		.loc 1 1951 0
 2212 0000 036D     		ldr	r3, [r0, #80]
 2213 0002 23F00F03 		bic	r3, r3, #15
 2214 0006 01F00F01 		and	r1, r1, #15
 2215              	.LVL154:
 2216 000a 0B43     		orrs	r3, r3, r1
 2217 000c 0365     		str	r3, [r0, #80]
 2218 000e 7047     		bx	lr
 2219              		.cfi_endproc
 2220              	.LFE133:
 2222              		.section	.text.usart_man_set_tx_pre_pattern,"ax",%progbits
 2223              		.align	2
 2224              		.global	usart_man_set_tx_pre_pattern
 2225              		.thumb
 2226              		.thumb_func
 2228              	usart_man_set_tx_pre_pattern:
 2229              	.LFB134:
1952:../src/usart/usart.c **** 			US_MAN_TX_PL(uc_len);
1953:../src/usart/usart.c **** }
1954:../src/usart/usart.c **** 
1955:../src/usart/usart.c **** /**
1956:../src/usart/usart.c ****  * \brief Configure the transmitter preamble pattern when the Manchester
1957:../src/usart/usart.c ****  * encode/decode is enabled, which should be 0 ~ 3.
1958:../src/usart/usart.c ****  *
1959:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1960:../src/usart/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
1961:../src/usart/usart.c ****  * 1 if the preamble is composed of '0's;
1962:../src/usart/usart.c ****  * 2 if the preamble is composed of '01's;
1963:../src/usart/usart.c ****  * 3 if the preamble is composed of '10's.
1964:../src/usart/usart.c ****  */
1965:../src/usart/usart.c **** void usart_man_set_tx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
1966:../src/usart/usart.c **** {
 2230              		.loc 1 1966 0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 0
 2233              		@ frame_needed = 0, uses_anonymous_args = 0
 2234              		@ link register save eliminated.
 2235              	.LVL155:
1967:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 2236              		.loc 1 1967 0
 2237 0000 036D     		ldr	r3, [r0, #80]
 2238 0002 23F44073 		bic	r3, r3, #768
 2239 0006 43EA0121 		orr	r1, r3, r1, lsl #8
 2240              	.LVL156:
 2241 000a 0165     		str	r1, [r0, #80]
 2242 000c 7047     		bx	lr
 2243              		.cfi_endproc
 2244              	.LFE134:
 2246 000e 00BF     		.section	.text.usart_man_set_tx_polarity,"ax",%progbits
 2247              		.align	2
 2248              		.global	usart_man_set_tx_polarity
 2249              		.thumb
 2250              		.thumb_func
 2252              	usart_man_set_tx_polarity:
 2253              	.LFB135:
1968:../src/usart/usart.c **** 			(uc_pattern << US_MAN_TX_PP_Pos);
1969:../src/usart/usart.c **** }
1970:../src/usart/usart.c **** 
1971:../src/usart/usart.c **** /**
1972:../src/usart/usart.c ****  * \brief Configure the transmitter Manchester polarity when the Manchester
1973:../src/usart/usart.c ****  * encode/decode is enabled.
1974:../src/usart/usart.c ****  *
1975:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1976:../src/usart/usart.c ****  * \param uc_polarity Indicate the transmitter Manchester polarity, which
1977:../src/usart/usart.c ****  * should be 0 or 1.
1978:../src/usart/usart.c ****  */
1979:../src/usart/usart.c **** void usart_man_set_tx_polarity(Usart *p_usart, uint8_t uc_polarity)
1980:../src/usart/usart.c **** {
 2254              		.loc 1 1980 0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 0
 2257              		@ frame_needed = 0, uses_anonymous_args = 0
 2258              		@ link register save eliminated.
 2259              	.LVL157:
1981:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 2260              		.loc 1 1981 0
 2261 0000 036D     		ldr	r3, [r0, #80]
 2262 0002 23F48053 		bic	r3, r3, #4096
 2263 0006 43EA0131 		orr	r1, r3, r1, lsl #12
 2264              	.LVL158:
 2265 000a 0165     		str	r1, [r0, #80]
 2266 000c 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE135:
 2270 000e 00BF     		.section	.text.usart_man_set_rx_pre_len,"ax",%progbits
 2271              		.align	2
 2272              		.global	usart_man_set_rx_pre_len
 2273              		.thumb
 2274              		.thumb_func
 2276              	usart_man_set_rx_pre_len:
 2277              	.LFB136:
1982:../src/usart/usart.c **** 			(uc_polarity << 12);
1983:../src/usart/usart.c **** }
1984:../src/usart/usart.c **** 
1985:../src/usart/usart.c **** /**
1986:../src/usart/usart.c ****  * \brief Configure the detected receiver preamble length when the Manchester
1987:../src/usart/usart.c ****  * encode/decode is enabled.
1988:../src/usart/usart.c ****  *
1989:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
1990:../src/usart/usart.c ****  * \param uc_len The detected receiver preamble length, which should be 0 ~ 15.
1991:../src/usart/usart.c ****  */
1992:../src/usart/usart.c **** void usart_man_set_rx_pre_len(Usart *p_usart, uint8_t uc_len)
1993:../src/usart/usart.c **** {
 2278              		.loc 1 1993 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 0, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
 2283              	.LVL159:
1994:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 2284              		.loc 1 1994 0
 2285 0000 036D     		ldr	r3, [r0, #80]
 2286 0002 23F47023 		bic	r3, r3, #983040
1995:../src/usart/usart.c **** 			US_MAN_RX_PL(uc_len);
 2287              		.loc 1 1995 0
 2288 0006 0904     		lsls	r1, r1, #16
 2289              	.LVL160:
1994:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 2290              		.loc 1 1994 0
 2291 0008 01F47021 		and	r1, r1, #983040
 2292 000c 0B43     		orrs	r3, r3, r1
 2293 000e 0365     		str	r3, [r0, #80]
 2294 0010 7047     		bx	lr
 2295              		.cfi_endproc
 2296              	.LFE136:
 2298 0012 00BF     		.section	.text.usart_man_set_rx_pre_pattern,"ax",%progbits
 2299              		.align	2
 2300              		.global	usart_man_set_rx_pre_pattern
 2301              		.thumb
 2302              		.thumb_func
 2304              	usart_man_set_rx_pre_pattern:
 2305              	.LFB137:
1996:../src/usart/usart.c **** }
1997:../src/usart/usart.c **** 
1998:../src/usart/usart.c **** /**
1999:../src/usart/usart.c ****  * \brief Configure the detected receiver preamble pattern when the Manchester
2000:../src/usart/usart.c ****  *  encode/decode is enabled, which should be 0 ~ 3.
2001:../src/usart/usart.c ****  *
2002:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
2003:../src/usart/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
2004:../src/usart/usart.c ****  * 1 if the preamble is composed of '0's;
2005:../src/usart/usart.c ****  * 2 if the preamble is composed of '01's;
2006:../src/usart/usart.c ****  * 3 if the preamble is composed of '10's.
2007:../src/usart/usart.c ****  */
2008:../src/usart/usart.c **** void usart_man_set_rx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
2009:../src/usart/usart.c **** {
 2306              		.loc 1 2009 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              		@ link register save eliminated.
 2311              	.LVL161:
2010:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 2312              		.loc 1 2010 0
 2313 0000 036D     		ldr	r3, [r0, #80]
 2314 0002 23F04073 		bic	r3, r3, #50331648
 2315 0006 43EA0161 		orr	r1, r3, r1, lsl #24
 2316              	.LVL162:
 2317 000a 0165     		str	r1, [r0, #80]
 2318 000c 7047     		bx	lr
 2319              		.cfi_endproc
 2320              	.LFE137:
 2322 000e 00BF     		.section	.text.usart_man_set_rx_polarity,"ax",%progbits
 2323              		.align	2
 2324              		.global	usart_man_set_rx_polarity
 2325              		.thumb
 2326              		.thumb_func
 2328              	usart_man_set_rx_polarity:
 2329              	.LFB138:
2011:../src/usart/usart.c **** 			(uc_pattern << US_MAN_RX_PP_Pos);
2012:../src/usart/usart.c **** }
2013:../src/usart/usart.c **** 
2014:../src/usart/usart.c **** /**
2015:../src/usart/usart.c ****  * \brief Configure the receiver Manchester polarity when the Manchester
2016:../src/usart/usart.c ****  * encode/decode is enabled.
2017:../src/usart/usart.c ****  *
2018:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
2019:../src/usart/usart.c ****  * \param uc_polarity Indicate the receiver Manchester polarity, which should
2020:../src/usart/usart.c ****  * be 0 or 1.
2021:../src/usart/usart.c ****  */
2022:../src/usart/usart.c **** void usart_man_set_rx_polarity(Usart *p_usart, uint8_t uc_polarity)
2023:../src/usart/usart.c **** {
 2330              		.loc 1 2023 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334              		@ link register save eliminated.
 2335              	.LVL163:
2024:../src/usart/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 2336              		.loc 1 2024 0
 2337 0000 036D     		ldr	r3, [r0, #80]
 2338 0002 23F08053 		bic	r3, r3, #268435456
 2339 0006 43EA0171 		orr	r1, r3, r1, lsl #28
 2340              	.LVL164:
 2341 000a 0165     		str	r1, [r0, #80]
 2342 000c 7047     		bx	lr
 2343              		.cfi_endproc
 2344              	.LFE138:
 2346 000e 00BF     		.section	.text.usart_man_enable_drift_compensation,"ax",%progbits
 2347              		.align	2
 2348              		.global	usart_man_enable_drift_compensation
 2349              		.thumb
 2350              		.thumb_func
 2352              	usart_man_enable_drift_compensation:
 2353              	.LFB139:
2025:../src/usart/usart.c **** 			(uc_polarity << 28);
2026:../src/usart/usart.c **** }
2027:../src/usart/usart.c **** 
2028:../src/usart/usart.c **** /**
2029:../src/usart/usart.c ****  * \brief Enable drift compensation.
2030:../src/usart/usart.c ****  *
2031:../src/usart/usart.c ****  * \note The 16X clock mode must be enabled.
2032:../src/usart/usart.c ****  *
2033:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
2034:../src/usart/usart.c ****  */
2035:../src/usart/usart.c **** void usart_man_enable_drift_compensation(Usart *p_usart)
2036:../src/usart/usart.c **** {
 2354              		.loc 1 2036 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 2359              	.LVL165:
2037:../src/usart/usart.c **** 	p_usart->US_MAN |= US_MAN_DRIFT;
 2360              		.loc 1 2037 0
 2361 0000 036D     		ldr	r3, [r0, #80]
 2362 0002 43F08043 		orr	r3, r3, #1073741824
 2363 0006 0365     		str	r3, [r0, #80]
 2364 0008 7047     		bx	lr
 2365              		.cfi_endproc
 2366              	.LFE139:
 2368 000a 00BF     		.section	.text.usart_man_disable_drift_compensation,"ax",%progbits
 2369              		.align	2
 2370              		.global	usart_man_disable_drift_compensation
 2371              		.thumb
 2372              		.thumb_func
 2374              	usart_man_disable_drift_compensation:
 2375              	.LFB140:
2038:../src/usart/usart.c **** }
2039:../src/usart/usart.c **** 
2040:../src/usart/usart.c **** /**
2041:../src/usart/usart.c ****  * \brief Disable drift compensation.
2042:../src/usart/usart.c ****  *
2043:../src/usart/usart.c ****  * \param p_usart Pointer to a USART instance.
2044:../src/usart/usart.c ****  */
2045:../src/usart/usart.c **** void usart_man_disable_drift_compensation(Usart *p_usart)
2046:../src/usart/usart.c **** {
 2376              		.loc 1 2046 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 0
 2379              		@ frame_needed = 0, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 2381              	.LVL166:
2047:../src/usart/usart.c **** 	p_usart->US_MAN &= ~US_MAN_DRIFT;
 2382              		.loc 1 2047 0
 2383 0000 036D     		ldr	r3, [r0, #80]
 2384 0002 23F08043 		bic	r3, r3, #1073741824
 2385 0006 0365     		str	r3, [r0, #80]
 2386 0008 7047     		bx	lr
 2387              		.cfi_endproc
 2388              	.LFE140:
 2390 000a 00BF     		.section	.bss.ul_reg_val.7244,"aw",%nobits
 2391              		.align	2
 2392              		.set	.LANCHOR3,. + 0
 2395              	ul_reg_val.7244:
 2396 0000 00000000 		.space	4
 2397              		.section	.bss.ul_reg_val.7201,"aw",%nobits
 2398              		.align	2
 2399              		.set	.LANCHOR0,. + 0
 2402              	ul_reg_val.7201:
 2403 0000 00000000 		.space	4
 2404              		.section	.bss.ul_reg_val.7222,"aw",%nobits
 2405              		.align	2
 2406              		.set	.LANCHOR2,. + 0
 2409              	ul_reg_val.7222:
 2410 0000 00000000 		.space	4
 2411              		.section	.bss.ul_reg_val.7271,"aw",%nobits
 2412              		.align	2
 2413              		.set	.LANCHOR4,. + 0
 2416              	ul_reg_val.7271:
 2417 0000 00000000 		.space	4
 2418              		.section	.bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 2421              	cpu_irq_prev_interrupt_state:
 2422 0000 00       		.space	1
 2423              		.section	.bss.ul_reg_val.7282,"aw",%nobits
 2424              		.align	2
 2425              		.set	.LANCHOR5,. + 0
 2428              	ul_reg_val.7282:
 2429 0000 00000000 		.space	4
 2430              		.section	.bss.ul_reg_val.7217,"aw",%nobits
 2431              		.align	2
 2432              		.set	.LANCHOR1,. + 0
 2435              	ul_reg_val.7217:
 2436 0000 00000000 		.space	4
 2437              		.section	.bss.cpu_irq_critical_section_counter,"aw",%nobits
 2438              		.align	2
 2441              	cpu_irq_critical_section_counter:
 2442 0000 00000000 		.space	4
 2443              		.text
 2444              	.Letext0:
 2445              		.file 2 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 2446              		.file 3 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 2447              		.file 4 "/home/bekeband/workspace/OLIMEX_Start/src/sam3s4b.h"
 2448              		.file 5 "/home/bekeband/workspace/OLIMEX_Start/src/component/component_pdc.h"
 2449              		.file 6 "/home/bekeband/workspace/OLIMEX_Start/src/component/component_usart.h"
 2450              		.file 7 "/home/bekeband/workspace/OLIMEX_Start/src/usart.h"
 2451              		.file 8 "/home/bekeband/workspace/OLIMEX_Start/src/interrupt/interrupt_sam_nvic.h"
 2452              		.file 9 "/home/bekeband/workspace/OLIMEX_Start/src/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/ccEwHMdH.s:20     .text.usart_set_sync_master_baudrate:00000000 $t
     /tmp/ccEwHMdH.s:24     .text.usart_set_sync_master_baudrate:00000000 usart_set_sync_master_baudrate
     /tmp/ccEwHMdH.s:67     .text.usart_set_sync_slave_baudrate:00000000 $t
     /tmp/ccEwHMdH.s:71     .text.usart_set_sync_slave_baudrate:00000000 usart_set_sync_slave_baudrate
     /tmp/ccEwHMdH.s:90     .text.usart_set_spi_master_baudrate:00000000 $t
     /tmp/ccEwHMdH.s:94     .text.usart_set_spi_master_baudrate:00000000 usart_set_spi_master_baudrate
     /tmp/ccEwHMdH.s:129    .text.usart_set_spi_slave_baudrate:00000000 $t
     /tmp/ccEwHMdH.s:133    .text.usart_set_spi_slave_baudrate:00000000 usart_set_spi_slave_baudrate
     /tmp/ccEwHMdH.s:154    .text.usart_set_iso7816_clock:00000000 $t
     /tmp/ccEwHMdH.s:158    .text.usart_set_iso7816_clock:00000000 usart_set_iso7816_clock
     /tmp/ccEwHMdH.s:201    .text.usart_set_async_baudrate:00000000 $t
     /tmp/ccEwHMdH.s:206    .text.usart_set_async_baudrate:00000000 usart_set_async_baudrate
     /tmp/ccEwHMdH.s:280    .text.usart_reset_iterations:00000000 $t
     /tmp/ccEwHMdH.s:285    .text.usart_reset_iterations:00000000 usart_reset_iterations
     /tmp/ccEwHMdH.s:301    .text.usart_reset_nack:00000000 $t
     /tmp/ccEwHMdH.s:306    .text.usart_reset_nack:00000000 usart_reset_nack
     /tmp/ccEwHMdH.s:322    .text.usart_is_rx_buf_end:00000000 $t
     /tmp/ccEwHMdH.s:327    .text.usart_is_rx_buf_end:00000000 usart_is_rx_buf_end
     /tmp/ccEwHMdH.s:345    .text.usart_is_tx_buf_end:00000000 $t
     /tmp/ccEwHMdH.s:350    .text.usart_is_tx_buf_end:00000000 usart_is_tx_buf_end
     /tmp/ccEwHMdH.s:368    .text.usart_is_rx_buf_full:00000000 $t
     /tmp/ccEwHMdH.s:373    .text.usart_is_rx_buf_full:00000000 usart_is_rx_buf_full
     /tmp/ccEwHMdH.s:391    .text.usart_is_tx_buf_empty:00000000 $t
     /tmp/ccEwHMdH.s:396    .text.usart_is_tx_buf_empty:00000000 usart_is_tx_buf_empty
     /tmp/ccEwHMdH.s:414    .text.usart_get_error_number:00000000 $t
     /tmp/ccEwHMdH.s:419    .text.usart_get_error_number:00000000 usart_get_error_number
     /tmp/ccEwHMdH.s:437    .text.usart_enable_tx:00000000 $t
     /tmp/ccEwHMdH.s:442    .text.usart_enable_tx:00000000 usart_enable_tx
     /tmp/ccEwHMdH.s:458    .text.usart_disable_tx:00000000 $t
     /tmp/ccEwHMdH.s:463    .text.usart_disable_tx:00000000 usart_disable_tx
     /tmp/ccEwHMdH.s:479    .text.usart_reset_tx:00000000 $t
     /tmp/ccEwHMdH.s:484    .text.usart_reset_tx:00000000 usart_reset_tx
     /tmp/ccEwHMdH.s:500    .text.usart_set_tx_timeguard:00000000 $t
     /tmp/ccEwHMdH.s:505    .text.usart_set_tx_timeguard:00000000 usart_set_tx_timeguard
     /tmp/ccEwHMdH.s:520    .text.usart_enable_rx:00000000 $t
     /tmp/ccEwHMdH.s:525    .text.usart_enable_rx:00000000 usart_enable_rx
     /tmp/ccEwHMdH.s:541    .text.usart_disable_rx:00000000 $t
     /tmp/ccEwHMdH.s:546    .text.usart_disable_rx:00000000 usart_disable_rx
     /tmp/ccEwHMdH.s:562    .text.usart_reset_rx:00000000 $t
     /tmp/ccEwHMdH.s:567    .text.usart_reset_rx:00000000 usart_reset_rx
     /tmp/ccEwHMdH.s:583    .text.usart_set_rx_timeout:00000000 $t
     /tmp/ccEwHMdH.s:588    .text.usart_set_rx_timeout:00000000 usart_set_rx_timeout
     /tmp/ccEwHMdH.s:603    .text.usart_enable_interrupt:00000000 $t
     /tmp/ccEwHMdH.s:608    .text.usart_enable_interrupt:00000000 usart_enable_interrupt
     /tmp/ccEwHMdH.s:623    .text.usart_disable_interrupt:00000000 $t
     /tmp/ccEwHMdH.s:628    .text.usart_disable_interrupt:00000000 usart_disable_interrupt
     /tmp/ccEwHMdH.s:643    .text.usart_get_interrupt_mask:00000000 $t
     /tmp/ccEwHMdH.s:648    .text.usart_get_interrupt_mask:00000000 usart_get_interrupt_mask
     /tmp/ccEwHMdH.s:665    .text.usart_get_status:00000000 $t
     /tmp/ccEwHMdH.s:670    .text.usart_get_status:00000000 usart_get_status
     /tmp/ccEwHMdH.s:687    .text.usart_reset_status:00000000 $t
     /tmp/ccEwHMdH.s:692    .text.usart_reset_status:00000000 usart_reset_status
     /tmp/ccEwHMdH.s:708    .text.usart_start_tx_break:00000000 $t
     /tmp/ccEwHMdH.s:713    .text.usart_start_tx_break:00000000 usart_start_tx_break
     /tmp/ccEwHMdH.s:729    .text.usart_stop_tx_break:00000000 $t
     /tmp/ccEwHMdH.s:734    .text.usart_stop_tx_break:00000000 usart_stop_tx_break
     /tmp/ccEwHMdH.s:750    .text.usart_start_rx_timeout:00000000 $t
     /tmp/ccEwHMdH.s:755    .text.usart_start_rx_timeout:00000000 usart_start_rx_timeout
     /tmp/ccEwHMdH.s:771    .text.usart_restart_rx_timeout:00000000 $t
     /tmp/ccEwHMdH.s:776    .text.usart_restart_rx_timeout:00000000 usart_restart_rx_timeout
     /tmp/ccEwHMdH.s:792    .text.usart_drive_DTR_pin_low:00000000 $t
     /tmp/ccEwHMdH.s:797    .text.usart_drive_DTR_pin_low:00000000 usart_drive_DTR_pin_low
     /tmp/ccEwHMdH.s:813    .text.usart_drive_DTR_pin_high:00000000 $t
     /tmp/ccEwHMdH.s:818    .text.usart_drive_DTR_pin_high:00000000 usart_drive_DTR_pin_high
     /tmp/ccEwHMdH.s:834    .text.usart_drive_RTS_pin_low:00000000 $t
     /tmp/ccEwHMdH.s:839    .text.usart_drive_RTS_pin_low:00000000 usart_drive_RTS_pin_low
     /tmp/ccEwHMdH.s:855    .text.usart_drive_RTS_pin_high:00000000 $t
     /tmp/ccEwHMdH.s:860    .text.usart_drive_RTS_pin_high:00000000 usart_drive_RTS_pin_high
     /tmp/ccEwHMdH.s:876    .text.usart_spi_force_chip_select:00000000 $t
     /tmp/ccEwHMdH.s:881    .text.usart_spi_force_chip_select:00000000 usart_spi_force_chip_select
     /tmp/ccEwHMdH.s:897    .text.usart_spi_release_chip_select:00000000 $t
     /tmp/ccEwHMdH.s:902    .text.usart_spi_release_chip_select:00000000 usart_spi_release_chip_select
     /tmp/ccEwHMdH.s:918    .text.usart_is_tx_ready:00000000 $t
     /tmp/ccEwHMdH.s:923    .text.usart_is_tx_ready:00000000 usart_is_tx_ready
     /tmp/ccEwHMdH.s:941    .text.usart_is_tx_empty:00000000 $t
     /tmp/ccEwHMdH.s:946    .text.usart_is_tx_empty:00000000 usart_is_tx_empty
     /tmp/ccEwHMdH.s:964    .text.usart_is_rx_ready:00000000 $t
     /tmp/ccEwHMdH.s:969    .text.usart_is_rx_ready:00000000 usart_is_rx_ready
     /tmp/ccEwHMdH.s:987    .text.usart_write:00000000 $t
     /tmp/ccEwHMdH.s:992    .text.usart_write:00000000 usart_write
     /tmp/ccEwHMdH.s:1023   .text.usart_send_address:00000000 $t
     /tmp/ccEwHMdH.s:1028   .text.usart_send_address:00000000 usart_send_address
     /tmp/ccEwHMdH.s:1068   .text.usart_putchar:00000000 $t
     /tmp/ccEwHMdH.s:1073   .text.usart_putchar:00000000 usart_putchar
     /tmp/ccEwHMdH.s:1098   .text.usart_write_line:00000000 $t
     /tmp/ccEwHMdH.s:1103   .text.usart_write_line:00000000 usart_write_line
     /tmp/ccEwHMdH.s:1140   .text.usart_read:00000000 $t
     /tmp/ccEwHMdH.s:1145   .text.usart_read:00000000 usart_read
     /tmp/ccEwHMdH.s:1176   .text.usart_getchar:00000000 $t
     /tmp/ccEwHMdH.s:1181   .text.usart_getchar:00000000 usart_getchar
     /tmp/ccEwHMdH.s:1206   .text.usart_get_pdc_base:00000000 $t
     /tmp/ccEwHMdH.s:1211   .text.usart_get_pdc_base:00000000 usart_get_pdc_base
     /tmp/ccEwHMdH.s:1247   .text.usart_get_pdc_base:0000001c $d
     /tmp/ccEwHMdH.s:1254   .text.usart_enable_writeprotect:00000000 $t
     /tmp/ccEwHMdH.s:1259   .text.usart_enable_writeprotect:00000000 usart_enable_writeprotect
     /tmp/ccEwHMdH.s:1274   .text.usart_enable_writeprotect:00000008 $d
     /tmp/ccEwHMdH.s:1279   .text.usart_disable_writeprotect:00000000 $t
     /tmp/ccEwHMdH.s:1284   .text.usart_disable_writeprotect:00000000 usart_disable_writeprotect
     /tmp/ccEwHMdH.s:1299   .text.usart_disable_writeprotect:00000008 $d
     /tmp/ccEwHMdH.s:1304   .text.usart_reset:00000000 $t
     /tmp/ccEwHMdH.s:1309   .text.usart_reset:00000000 usart_reset
     /tmp/ccEwHMdH.s:1356   .text.usart_init_rs232:00000000 $t
     /tmp/ccEwHMdH.s:1361   .text.usart_init_rs232:00000000 usart_init_rs232
     /tmp/ccEwHMdH.s:1430   .text.usart_init_rs232:0000004c $d
     /tmp/ccEwHMdH.s:1435   .text.usart_init_hw_handshaking:00000000 $t
     /tmp/ccEwHMdH.s:1440   .text.usart_init_hw_handshaking:00000000 usart_init_hw_handshaking
     /tmp/ccEwHMdH.s:1475   .text.usart_init_modem:00000000 $t
     /tmp/ccEwHMdH.s:1480   .text.usart_init_modem:00000000 usart_init_modem
     /tmp/ccEwHMdH.s:1535   .text.usart_init_modem:0000002c $d
     /tmp/ccEwHMdH.s:1540   .text.usart_init_rs485:00000000 $t
     /tmp/ccEwHMdH.s:1545   .text.usart_init_rs485:00000000 usart_init_rs485
     /tmp/ccEwHMdH.s:1580   .text.usart_init_irda:00000000 $t
     /tmp/ccEwHMdH.s:1585   .text.usart_init_irda:00000000 usart_init_irda
     /tmp/ccEwHMdH.s:1626   .text.usart_init_sync_master:00000000 $t
     /tmp/ccEwHMdH.s:1631   .text.usart_init_sync_master:00000000 usart_init_sync_master
     /tmp/ccEwHMdH.s:1702   .text.usart_init_sync_master:00000050 $d
     /tmp/ccEwHMdH.s:1707   .text.usart_init_sync_slave:00000000 $t
     /tmp/ccEwHMdH.s:1712   .text.usart_init_sync_slave:00000000 usart_init_sync_slave
     /tmp/ccEwHMdH.s:1773   .text.usart_init_sync_slave:0000003c $d
     /tmp/ccEwHMdH.s:1778   .text.usart_init_iso7816:00000000 $t
     /tmp/ccEwHMdH.s:1783   .text.usart_init_iso7816:00000000 usart_init_iso7816
     /tmp/ccEwHMdH.s:1914   .text.usart_init_iso7816:000000a8 $d
     /tmp/ccEwHMdH.s:1919   .text.usart_init_spi_master:00000000 $t
     /tmp/ccEwHMdH.s:1924   .text.usart_init_spi_master:00000000 usart_init_spi_master
     /tmp/ccEwHMdH.s:1982   .text.usart_init_spi_master:0000004c $d
     /tmp/ccEwHMdH.s:1986   .text.usart_init_spi_master:00000050 $t
     /tmp/ccEwHMdH.s:2045   .text.usart_init_spi_master:000000a0 $d
     /tmp/ccEwHMdH.s:2050   .text.usart_init_spi_slave:00000000 $t
     /tmp/ccEwHMdH.s:2055   .text.usart_init_spi_slave:00000000 usart_init_spi_slave
     /tmp/ccEwHMdH.s:2103   .text.usart_init_spi_slave:0000003a $d
     /tmp/ccEwHMdH.s:2107   .text.usart_init_spi_slave:0000003e $t
     /tmp/ccEwHMdH.s:2164   .text.usart_init_spi_slave:0000008c $d
     /tmp/ccEwHMdH.s:2169   .text.usart_get_writeprotect_status:00000000 $t
     /tmp/ccEwHMdH.s:2174   .text.usart_get_writeprotect_status:00000000 usart_get_writeprotect_status
     /tmp/ccEwHMdH.s:2198   .text.usart_man_set_tx_pre_len:00000000 $t
     /tmp/ccEwHMdH.s:2203   .text.usart_man_set_tx_pre_len:00000000 usart_man_set_tx_pre_len
     /tmp/ccEwHMdH.s:2223   .text.usart_man_set_tx_pre_pattern:00000000 $t
     /tmp/ccEwHMdH.s:2228   .text.usart_man_set_tx_pre_pattern:00000000 usart_man_set_tx_pre_pattern
     /tmp/ccEwHMdH.s:2247   .text.usart_man_set_tx_polarity:00000000 $t
     /tmp/ccEwHMdH.s:2252   .text.usart_man_set_tx_polarity:00000000 usart_man_set_tx_polarity
     /tmp/ccEwHMdH.s:2271   .text.usart_man_set_rx_pre_len:00000000 $t
     /tmp/ccEwHMdH.s:2276   .text.usart_man_set_rx_pre_len:00000000 usart_man_set_rx_pre_len
     /tmp/ccEwHMdH.s:2299   .text.usart_man_set_rx_pre_pattern:00000000 $t
     /tmp/ccEwHMdH.s:2304   .text.usart_man_set_rx_pre_pattern:00000000 usart_man_set_rx_pre_pattern
     /tmp/ccEwHMdH.s:2323   .text.usart_man_set_rx_polarity:00000000 $t
     /tmp/ccEwHMdH.s:2328   .text.usart_man_set_rx_polarity:00000000 usart_man_set_rx_polarity
     /tmp/ccEwHMdH.s:2347   .text.usart_man_enable_drift_compensation:00000000 $t
     /tmp/ccEwHMdH.s:2352   .text.usart_man_enable_drift_compensation:00000000 usart_man_enable_drift_compensation
     /tmp/ccEwHMdH.s:2369   .text.usart_man_disable_drift_compensation:00000000 $t
     /tmp/ccEwHMdH.s:2374   .text.usart_man_disable_drift_compensation:00000000 usart_man_disable_drift_compensation
     /tmp/ccEwHMdH.s:2391   .bss.ul_reg_val.7244:00000000 $d
     /tmp/ccEwHMdH.s:2395   .bss.ul_reg_val.7244:00000000 ul_reg_val.7244
     /tmp/ccEwHMdH.s:2398   .bss.ul_reg_val.7201:00000000 $d
     /tmp/ccEwHMdH.s:2402   .bss.ul_reg_val.7201:00000000 ul_reg_val.7201
     /tmp/ccEwHMdH.s:2405   .bss.ul_reg_val.7222:00000000 $d
     /tmp/ccEwHMdH.s:2409   .bss.ul_reg_val.7222:00000000 ul_reg_val.7222
     /tmp/ccEwHMdH.s:2412   .bss.ul_reg_val.7271:00000000 $d
     /tmp/ccEwHMdH.s:2416   .bss.ul_reg_val.7271:00000000 ul_reg_val.7271
     /tmp/ccEwHMdH.s:2421   .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
     /tmp/ccEwHMdH.s:2422   .bss.cpu_irq_prev_interrupt_state:00000000 $d
     /tmp/ccEwHMdH.s:2424   .bss.ul_reg_val.7282:00000000 $d
     /tmp/ccEwHMdH.s:2428   .bss.ul_reg_val.7282:00000000 ul_reg_val.7282
     /tmp/ccEwHMdH.s:2431   .bss.ul_reg_val.7217:00000000 $d
     /tmp/ccEwHMdH.s:2435   .bss.ul_reg_val.7217:00000000 ul_reg_val.7217
     /tmp/ccEwHMdH.s:2438   .bss.cpu_irq_critical_section_counter:00000000 $d
     /tmp/ccEwHMdH.s:2441   .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22b0b12aa5a71f1d303bb4102a500f20
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4.parts.h.48.e0e2ea619afac603c89fe3ed31aee15f
                           .group:00000000 wm4.tpaste.h.48.b41cf557065b1d02756f7dcff09d49b9
                           .group:00000000 wm4.stringz.h.48.ed3117824abe39c5e1281f5c5c443171
                           .group:00000000 wm4.mrepeat.h.62.d4f39ef966b631e185fbb702f9b80ecc
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.sam3s4b.h.226.24ac70e3db261e60e9d210f1232ad825
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cm3.h.160.e022dd848961f928eab0fbd8650d106b
                           .group:00000000 wm4.component_acc.h.46.865c75bb2e3a9d4f38652271e089b5c8
                           .group:00000000 wm4.component_adc.h.46.52ba0aeb0af22cb1f1d91b64dde93956
                           .group:00000000 wm4.component_chipid.h.46.43a273f46f4c32081dfee459ad8862da
                           .group:00000000 wm4.component_crccu.h.46.3d5d84ebcceb8af0782dcb99da35d7d0
                           .group:00000000 wm4.component_dacc.h.46.9b850907590bd31997b006351cf81000
                           .group:00000000 wm4.component_efc.h.46.5a9ec99498daf6c49989fb6d077d312d
                           .group:00000000 wm4.component_gpbr.h.46.1788b80e501f9df943793fa21cfbbe21
                           .group:00000000 wm4.component_hsmci.h.46.2dc64c4ca9a764fbaa2fd4fd1541de68
                           .group:00000000 wm4.component_matrix.h.46.2f4d70bb97c9923e855a3d0c5f56d95e
                           .group:00000000 wm4.component_pdc.h.46.dfd3350dd71c534e17334339feb77f7c
                           .group:00000000 wm4.component_pio.h.46.dc6628e5aa2d62d441a2f9edf013a75a
                           .group:00000000 wm4.component_pmc.h.46.3a13206d3ecf2f1946cf88c02281a26b
                           .group:00000000 wm4.component_pwm.h.46.89366ac40583cd8cd91a5fed13cff02c
                           .group:00000000 wm4.component_rstc.h.46.ef0fbefe4bc03f652c9f4a03bfd1ef46
                           .group:00000000 wm4.component_rtc.h.46.cb1a84d0ff4d043a12d4d2139109e615
                           .group:00000000 wm4.component_rtt.h.46.e35d95fd2652721ab93a68f868a14334
                           .group:00000000 wm4.component_spi.h.46.fbe616cc22048ae3dbe0157a75a200d2
                           .group:00000000 wm4.component_ssc.h.46.bf814ca321f25fab9ac26489e1dec9f0
                           .group:00000000 wm4.component_supc.h.46.013b2a48420cc402d8153de678272576
                           .group:00000000 wm4.component_tc.h.46.8ee6425921e5bd880a2aabd4ecd71522
                           .group:00000000 wm4.component_twi.h.46.1b26436f50ce08e4cbf79a4fdffbcc40
                           .group:00000000 wm4.component_uart.h.46.2ec10b01d23d880667901e3e18729356
                           .group:00000000 wm4.component_udp.h.46.817a2ee6a2f80ac39e7bfbe0ff852001
                           .group:00000000 wm4.component_usart.h.46.e73badf8b79b1144a5e58ae3c7f99afd
                           .group:00000000 wm4.component_wdt.h.46.9058aedbbe8c7f88e4bce28490af6b23
                           .group:00000000 wm4.instance_hsmci.h.46.0921b488c345ac98ef3ba7ad69508825
                           .group:00000000 wm4.instance_ssc.h.46.eebd23f2ef145a585a82c5cef060c7ea
                           .group:00000000 wm4.instance_spi.h.46.26621c46b178e9ca6762bb17a24ec410
                           .group:00000000 wm4.instance_tc0.h.46.ead4b45558da2f42ca95730d1beaaa00
                           .group:00000000 wm4.instance_twi0.h.46.cb546cfb1d37706d80f563947a14da44
                           .group:00000000 wm4.instance_twi1.h.46.5f1af4ccf4d6b33c96c4e388359796ac
                           .group:00000000 wm4.instance_pwm.h.46.76f280edd0f8b1bfcce61f4d903d0259
                           .group:00000000 wm4.instance_usart0.h.46.3c469d2b920fd3e12092b7294ca82da9
                           .group:00000000 wm4.instance_usart1.h.46.398f0294bdd8277ea274c7a419e95901
                           .group:00000000 wm4.instance_udp.h.46.40973cfe8c89095098371468c1887576
                           .group:00000000 wm4.instance_adc.h.46.63258f34d0c27b11736611a7b2b2f27b
                           .group:00000000 wm4.instance_dacc.h.46.5ae4a5035dc78df5a5c17d9d1e76e633
                           .group:00000000 wm4.instance_acc.h.46.2e4a9cb4cb3a92c914800b95f627dc57
                           .group:00000000 wm4.instance_crccu.h.46.184237fe1c77c165bb334c02320f869e
                           .group:00000000 wm4.instance_matrix.h.46.d111ad2ca1e7198ed94a2e1213aa58a3
                           .group:00000000 wm4.instance_pmc.h.46.d5d037bdb46a612e424292373f68d9f8
                           .group:00000000 wm4.instance_uart0.h.46.dc252f382de697c23724fa503782af1d
                           .group:00000000 wm4.instance_chipid.h.46.8f77c51e2ab9edf7d26da8400aab7875
                           .group:00000000 wm4.instance_uart1.h.46.283c4a1cf98fcb8466ac9bceadb0b677
                           .group:00000000 wm4.instance_efc.h.46.9f291aa734b1cb8d75fd144e72f97e2b
                           .group:00000000 wm4.instance_pioa.h.46.cf0f81cda67dc3776fe52603ff60a82f
                           .group:00000000 wm4.instance_piob.h.46.fd1caa7213e73c46d15f69de6af123fb
                           .group:00000000 wm4.instance_rstc.h.46.cb75da875c2442dd75e5a8799bd32e87
                           .group:00000000 wm4.instance_supc.h.46.90f370dafc0bdfb8646ce68458e514e6
                           .group:00000000 wm4.instance_rtt.h.46.5758ae3574a477219b8abb8fe940acb4
                           .group:00000000 wm4.instance_wdt.h.46.b7fdc89b044099cb92c28a2f305b0c66
                           .group:00000000 wm4.instance_rtc.h.46.9d6ddf34c4ffdc6eec5effd1b6d4f045
                           .group:00000000 wm4.instance_gpbr.h.46.672198928bf79182f671b278dd185af8
                           .group:00000000 wm4.sam3s4b.h.317.e7cdc49d5fdc97b75252ee6763540354
                           .group:00000000 wm4.pio_sam3s4b.h.46.b91cb9b5c8fcc478a4299e5df5dba6ff
                           .group:00000000 wm4.sam3s4b.h.452.d371283092f6029dc967aa8f16a63977
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.f5f8300e4d8e4fd74800d02abaf0cc79
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4._timeval.h.30.81d73a3eee9df6c17d94febfd4f5f751
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.31.43869e1a2488877c4cd47d2792524430
                           .group:00000000 wm4.types.h.91.482c289990230376cfd504a2907d47e7
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.8f3036bd0ed314ae051372ccc1fe8f02
                           .group:00000000 wm4.compiler.h.91.eeb6296462f96c51e8e0205ed94a5b09
                           .group:00000000 wm4.interrupt_sam_nvic.h.48.062d9b5b508e1df54b17551a6cd30aa3
                           .group:00000000 wm4.compiler.h.430.149e09620daad34df46237982e03ccfa
                           .group:00000000 wm4.usart.h.74.c8d0ee57e80deebb5aeeb47362b1a933

NO UNDEFINED SYMBOLS
