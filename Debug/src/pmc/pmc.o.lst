   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"pmc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.pmc_mck_set_prescaler,"ax",%progbits
  20              		.align	2
  21              		.global	pmc_mck_set_prescaler
  22              		.thumb
  23              		.thumb_func
  25              	pmc_mck_set_prescaler:
  26              	.LFB73:
  27              		.file 1 "../src/pmc/pmc.c"
   1:../src/pmc/pmc.c **** /**
   2:../src/pmc/pmc.c ****  * \file
   3:../src/pmc/pmc.c ****  *
   4:../src/pmc/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:../src/pmc/pmc.c ****  *
   6:../src/pmc/pmc.c ****  * Copyright (c) 2011-2015 Atmel Corporation. All rights reserved.
   7:../src/pmc/pmc.c ****  *
   8:../src/pmc/pmc.c ****  * \asf_license_start
   9:../src/pmc/pmc.c ****  *
  10:../src/pmc/pmc.c ****  * \page License
  11:../src/pmc/pmc.c ****  *
  12:../src/pmc/pmc.c ****  * Redistribution and use in source and binary forms, with or without
  13:../src/pmc/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  14:../src/pmc/pmc.c ****  *
  15:../src/pmc/pmc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:../src/pmc/pmc.c ****  *    this list of conditions and the following disclaimer.
  17:../src/pmc/pmc.c ****  *
  18:../src/pmc/pmc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../src/pmc/pmc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../src/pmc/pmc.c ****  *    and/or other materials provided with the distribution.
  21:../src/pmc/pmc.c ****  *
  22:../src/pmc/pmc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:../src/pmc/pmc.c ****  *    from this software without specific prior written permission.
  24:../src/pmc/pmc.c ****  *
  25:../src/pmc/pmc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:../src/pmc/pmc.c ****  *    Atmel microcontroller product.
  27:../src/pmc/pmc.c ****  *
  28:../src/pmc/pmc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:../src/pmc/pmc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:../src/pmc/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:../src/pmc/pmc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:../src/pmc/pmc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:../src/pmc/pmc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:../src/pmc/pmc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:../src/pmc/pmc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:../src/pmc/pmc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../src/pmc/pmc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../src/pmc/pmc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:../src/pmc/pmc.c ****  *
  40:../src/pmc/pmc.c ****  * \asf_license_stop
  41:../src/pmc/pmc.c ****  *
  42:../src/pmc/pmc.c ****  */
  43:../src/pmc/pmc.c **** /*
  44:../src/pmc/pmc.c ****  * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
  45:../src/pmc/pmc.c ****  */
  46:../src/pmc/pmc.c **** 
  47:../src/pmc/pmc.c **** #include "pmc.h"
  48:../src/pmc/pmc.c **** 
  49:../src/pmc/pmc.c **** #if (SAM3N)
  50:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    31
  51:../src/pmc/pmc.c **** #elif (SAM3XA)
  52:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    44
  53:../src/pmc/pmc.c **** #elif (SAM3U)
  54:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    29
  55:../src/pmc/pmc.c **** #elif (SAM3S || SAM4S)
  56:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    34
  57:../src/pmc/pmc.c **** #elif (SAM4E)
  58:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    47
  59:../src/pmc/pmc.c **** #elif (SAMV71)
  60:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    63
  61:../src/pmc/pmc.c **** #elif (SAMV70)
  62:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    63
  63:../src/pmc/pmc.c **** #elif (SAME70)
  64:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    63
  65:../src/pmc/pmc.c **** #elif (SAMS70)
  66:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    63
  67:../src/pmc/pmc.c **** #elif (SAM4N)
  68:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    31
  69:../src/pmc/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  70:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    43
  71:../src/pmc/pmc.c **** #elif (SAMG51)
  72:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    47
  73:../src/pmc/pmc.c **** #elif (SAMG53)
  74:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    47
  75:../src/pmc/pmc.c **** #elif (SAMG54)
  76:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    47
  77:../src/pmc/pmc.c **** #elif (SAMG55)
  78:../src/pmc/pmc.c **** # define MAX_PERIPH_ID    50
  79:../src/pmc/pmc.c **** #endif
  80:../src/pmc/pmc.c **** 
  81:../src/pmc/pmc.c **** /// @cond 0
  82:../src/pmc/pmc.c **** /**INDENT-OFF**/
  83:../src/pmc/pmc.c **** #ifdef __cplusplus
  84:../src/pmc/pmc.c **** extern "C" {
  85:../src/pmc/pmc.c **** #endif
  86:../src/pmc/pmc.c **** /**INDENT-ON**/
  87:../src/pmc/pmc.c **** /// @endcond
  88:../src/pmc/pmc.c **** 
  89:../src/pmc/pmc.c **** /**
  90:../src/pmc/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  91:../src/pmc/pmc.c ****  *
  92:../src/pmc/pmc.c ****  * \par Purpose
  93:../src/pmc/pmc.c ****  *
  94:../src/pmc/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  95:../src/pmc/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  96:../src/pmc/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  97:../src/pmc/pmc.c ****  *
  98:../src/pmc/pmc.c ****  * @{
  99:../src/pmc/pmc.c ****  */
 100:../src/pmc/pmc.c **** 
 101:../src/pmc/pmc.c **** /**
 102:../src/pmc/pmc.c ****  * \brief Set the prescaler of the MCK.
 103:../src/pmc/pmc.c ****  *
 104:../src/pmc/pmc.c ****  * \param ul_pres Prescaler value.
 105:../src/pmc/pmc.c ****  */
 106:../src/pmc/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
 107:../src/pmc/pmc.c **** {
  28              		.loc 1 107 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 108:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
 109:../src/pmc/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  34              		.loc 1 109 0
  35 0000 054A     		ldr	r2, .L3
  36 0002 136B     		ldr	r3, [r2, #48]
  37 0004 23F07003 		bic	r3, r3, #112
  38 0008 1843     		orrs	r0, r0, r3
  39              	.LVL1:
 108:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
  40              		.loc 1 108 0
  41 000a 1063     		str	r0, [r2, #48]
  42              	.L2:
 110:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  43              		.loc 1 110 0 discriminator 1
  44 000c 024B     		ldr	r3, .L3
  45 000e 9B6E     		ldr	r3, [r3, #104]
  46 0010 13F0080F 		tst	r3, #8
  47 0014 FAD0     		beq	.L2
 111:../src/pmc/pmc.c **** }
  48              		.loc 1 111 0
  49 0016 7047     		bx	lr
  50              	.L4:
  51              		.align	2
  52              	.L3:
  53 0018 00040E40 		.word	1074660352
  54              		.cfi_endproc
  55              	.LFE73:
  57              		.section	.text.pmc_mck_set_source,"ax",%progbits
  58              		.align	2
  59              		.global	pmc_mck_set_source
  60              		.thumb
  61              		.thumb_func
  63              	pmc_mck_set_source:
  64              	.LFB74:
 112:../src/pmc/pmc.c **** 
 113:../src/pmc/pmc.c **** #if SAMV71 || SAMV70 || SAME70 || SAMS70
 114:../src/pmc/pmc.c **** /**
 115:../src/pmc/pmc.c ****  * \brief Set the division of the MCK.
 116:../src/pmc/pmc.c ****  *
 117:../src/pmc/pmc.c ****  * \param ul_div Division value.
 118:../src/pmc/pmc.c ****  */
 119:../src/pmc/pmc.c **** void pmc_mck_set_division(uint32_t ul_div)
 120:../src/pmc/pmc.c **** {
 121:../src/pmc/pmc.c **** 	switch (ul_div) {
 122:../src/pmc/pmc.c **** 		case 1:
 123:../src/pmc/pmc.c **** 			ul_div = PMC_MCKR_MDIV_EQ_PCK;
 124:../src/pmc/pmc.c **** 			break;
 125:../src/pmc/pmc.c **** 		case 2:
 126:../src/pmc/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
 127:../src/pmc/pmc.c **** 			break;
 128:../src/pmc/pmc.c **** 		case 3:
 129:../src/pmc/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
 130:../src/pmc/pmc.c **** 			break;
 131:../src/pmc/pmc.c **** 		case 4:
 132:../src/pmc/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
 133:../src/pmc/pmc.c **** 			break;
 134:../src/pmc/pmc.c **** 		default:
 135:../src/pmc/pmc.c **** 			ul_div = PMC_MCKR_MDIV_EQ_PCK;
 136:../src/pmc/pmc.c **** 			break;
 137:../src/pmc/pmc.c **** 	}
 138:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
 139:../src/pmc/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
 140:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 141:../src/pmc/pmc.c **** }
 142:../src/pmc/pmc.c **** #endif
 143:../src/pmc/pmc.c **** 
 144:../src/pmc/pmc.c **** /**
 145:../src/pmc/pmc.c ****  * \brief Set the source of the MCK.
 146:../src/pmc/pmc.c ****  *
 147:../src/pmc/pmc.c ****  * \param ul_source Source selection value.
 148:../src/pmc/pmc.c ****  */
 149:../src/pmc/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 150:../src/pmc/pmc.c **** {
  65              		.loc 1 150 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.LVL2:
 151:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
 152:../src/pmc/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
  71              		.loc 1 152 0
  72 0000 054A     		ldr	r2, .L7
  73 0002 136B     		ldr	r3, [r2, #48]
  74 0004 23F00303 		bic	r3, r3, #3
  75 0008 1843     		orrs	r0, r0, r3
  76              	.LVL3:
 151:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
  77              		.loc 1 151 0
  78 000a 1063     		str	r0, [r2, #48]
  79              	.L6:
 153:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  80              		.loc 1 153 0 discriminator 1
  81 000c 024B     		ldr	r3, .L7
  82 000e 9B6E     		ldr	r3, [r3, #104]
  83 0010 13F0080F 		tst	r3, #8
  84 0014 FAD0     		beq	.L6
 154:../src/pmc/pmc.c **** }
  85              		.loc 1 154 0
  86 0016 7047     		bx	lr
  87              	.L8:
  88              		.align	2
  89              	.L7:
  90 0018 00040E40 		.word	1074660352
  91              		.cfi_endproc
  92              	.LFE74:
  94              		.section	.text.pmc_switch_mck_to_sclk,"ax",%progbits
  95              		.align	2
  96              		.global	pmc_switch_mck_to_sclk
  97              		.thumb
  98              		.thumb_func
 100              	pmc_switch_mck_to_sclk:
 101              	.LFB75:
 155:../src/pmc/pmc.c **** 
 156:../src/pmc/pmc.c **** /**
 157:../src/pmc/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 158:../src/pmc/pmc.c ****  *
 159:../src/pmc/pmc.c ****  * \param ul_pres Processor clock prescaler.
 160:../src/pmc/pmc.c ****  *
 161:../src/pmc/pmc.c ****  * \retval 0 Success.
 162:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 163:../src/pmc/pmc.c ****  */
 164:../src/pmc/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 165:../src/pmc/pmc.c **** {
 102              		.loc 1 165 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.LVL4:
 166:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 167:../src/pmc/pmc.c **** 
 168:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 108              		.loc 1 168 0
 109 0000 124A     		ldr	r2, .L17
 110 0002 136B     		ldr	r3, [r2, #48]
 111 0004 23F00303 		bic	r3, r3, #3
 112 0008 1363     		str	r3, [r2, #48]
 113              	.LVL5:
 169:../src/pmc/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 170:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 114              		.loc 1 170 0
 115 000a 4FF40063 		mov	r3, #2048
 116 000e 01E0     		b	.L10
 117              	.LVL6:
 118              	.L12:
 171:../src/pmc/pmc.c **** 			--ul_timeout) {
 172:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 119              		.loc 1 172 0
 120 0010 BBB1     		cbz	r3, .L15
 171:../src/pmc/pmc.c **** 			--ul_timeout) {
 121              		.loc 1 171 0
 122 0012 013B     		subs	r3, r3, #1
 123              	.LVL7:
 124              	.L10:
 170:../src/pmc/pmc.c **** 			--ul_timeout) {
 125              		.loc 1 170 0 discriminator 1
 126 0014 0D4A     		ldr	r2, .L17
 127 0016 926E     		ldr	r2, [r2, #104]
 128 0018 12F0080F 		tst	r2, #8
 129 001c F8D0     		beq	.L12
 173:../src/pmc/pmc.c **** 			return 1;
 174:../src/pmc/pmc.c **** 		}
 175:../src/pmc/pmc.c **** 	}
 176:../src/pmc/pmc.c **** 
 177:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 130              		.loc 1 177 0
 131 001e 0B4A     		ldr	r2, .L17
 132 0020 136B     		ldr	r3, [r2, #48]
 133              	.LVL8:
 134 0022 23F07003 		bic	r3, r3, #112
 135 0026 1843     		orrs	r0, r0, r3
 136              	.LVL9:
 137 0028 1063     		str	r0, [r2, #48]
 138              	.LVL10:
 178:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 139              		.loc 1 178 0
 140 002a 4FF40063 		mov	r3, #2048
 141 002e 01E0     		b	.L13
 142              	.LVL11:
 143              	.L14:
 179:../src/pmc/pmc.c **** 			--ul_timeout) {
 180:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 144              		.loc 1 180 0
 145 0030 4BB1     		cbz	r3, .L16
 179:../src/pmc/pmc.c **** 			--ul_timeout) {
 146              		.loc 1 179 0
 147 0032 013B     		subs	r3, r3, #1
 148              	.LVL12:
 149              	.L13:
 178:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 150              		.loc 1 178 0 discriminator 1
 151 0034 054A     		ldr	r2, .L17
 152 0036 926E     		ldr	r2, [r2, #104]
 153 0038 12F0080F 		tst	r2, #8
 154 003c F8D0     		beq	.L14
 181:../src/pmc/pmc.c **** 			return 1;
 182:../src/pmc/pmc.c **** 		}
 183:../src/pmc/pmc.c **** 	}
 184:../src/pmc/pmc.c **** 
 185:../src/pmc/pmc.c **** 	return 0;
 155              		.loc 1 185 0
 156 003e 0020     		movs	r0, #0
 157 0040 7047     		bx	lr
 158              	.LVL13:
 159              	.L15:
 173:../src/pmc/pmc.c **** 		}
 160              		.loc 1 173 0
 161 0042 0120     		movs	r0, #1
 162              	.LVL14:
 163 0044 7047     		bx	lr
 164              	.L16:
 181:../src/pmc/pmc.c **** 			return 1;
 165              		.loc 1 181 0
 166 0046 0120     		movs	r0, #1
 186:../src/pmc/pmc.c **** }
 167              		.loc 1 186 0
 168 0048 7047     		bx	lr
 169              	.L18:
 170 004a 00BF     		.align	2
 171              	.L17:
 172 004c 00040E40 		.word	1074660352
 173              		.cfi_endproc
 174              	.LFE75:
 176              		.section	.text.pmc_switch_mck_to_mainck,"ax",%progbits
 177              		.align	2
 178              		.global	pmc_switch_mck_to_mainck
 179              		.thumb
 180              		.thumb_func
 182              	pmc_switch_mck_to_mainck:
 183              	.LFB76:
 187:../src/pmc/pmc.c **** 
 188:../src/pmc/pmc.c **** /**
 189:../src/pmc/pmc.c ****  * \brief Switch master clock source selection to main clock.
 190:../src/pmc/pmc.c ****  *
 191:../src/pmc/pmc.c ****  * \param ul_pres Processor clock prescaler.
 192:../src/pmc/pmc.c ****  *
 193:../src/pmc/pmc.c ****  * \retval 0 Success.
 194:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 195:../src/pmc/pmc.c ****  */
 196:../src/pmc/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 197:../src/pmc/pmc.c **** {
 184              		.loc 1 197 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL15:
 198:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 199:../src/pmc/pmc.c **** 
 200:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 190              		.loc 1 200 0
 191 0000 134A     		ldr	r2, .L27
 192 0002 136B     		ldr	r3, [r2, #48]
 193 0004 23F00303 		bic	r3, r3, #3
 194 0008 43F00103 		orr	r3, r3, #1
 195 000c 1363     		str	r3, [r2, #48]
 196              	.LVL16:
 201:../src/pmc/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 202:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 197              		.loc 1 202 0
 198 000e 4FF40063 		mov	r3, #2048
 199 0012 01E0     		b	.L20
 200              	.LVL17:
 201              	.L22:
 203:../src/pmc/pmc.c **** 			--ul_timeout) {
 204:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 202              		.loc 1 204 0
 203 0014 BBB1     		cbz	r3, .L25
 203:../src/pmc/pmc.c **** 			--ul_timeout) {
 204              		.loc 1 203 0
 205 0016 013B     		subs	r3, r3, #1
 206              	.LVL18:
 207              	.L20:
 202:../src/pmc/pmc.c **** 			--ul_timeout) {
 208              		.loc 1 202 0 discriminator 1
 209 0018 0D4A     		ldr	r2, .L27
 210 001a 926E     		ldr	r2, [r2, #104]
 211 001c 12F0080F 		tst	r2, #8
 212 0020 F8D0     		beq	.L22
 205:../src/pmc/pmc.c **** 			return 1;
 206:../src/pmc/pmc.c **** 		}
 207:../src/pmc/pmc.c **** 	}
 208:../src/pmc/pmc.c **** 
 209:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 213              		.loc 1 209 0
 214 0022 0B4A     		ldr	r2, .L27
 215 0024 136B     		ldr	r3, [r2, #48]
 216              	.LVL19:
 217 0026 23F07003 		bic	r3, r3, #112
 218 002a 1843     		orrs	r0, r0, r3
 219              	.LVL20:
 220 002c 1063     		str	r0, [r2, #48]
 221              	.LVL21:
 210:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 222              		.loc 1 210 0
 223 002e 4FF40063 		mov	r3, #2048
 224 0032 01E0     		b	.L23
 225              	.LVL22:
 226              	.L24:
 211:../src/pmc/pmc.c **** 			--ul_timeout) {
 212:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 227              		.loc 1 212 0
 228 0034 4BB1     		cbz	r3, .L26
 211:../src/pmc/pmc.c **** 			--ul_timeout) {
 229              		.loc 1 211 0
 230 0036 013B     		subs	r3, r3, #1
 231              	.LVL23:
 232              	.L23:
 210:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 233              		.loc 1 210 0 discriminator 1
 234 0038 054A     		ldr	r2, .L27
 235 003a 926E     		ldr	r2, [r2, #104]
 236 003c 12F0080F 		tst	r2, #8
 237 0040 F8D0     		beq	.L24
 213:../src/pmc/pmc.c **** 			return 1;
 214:../src/pmc/pmc.c **** 		}
 215:../src/pmc/pmc.c **** 	}
 216:../src/pmc/pmc.c **** 
 217:../src/pmc/pmc.c **** 	return 0;
 238              		.loc 1 217 0
 239 0042 0020     		movs	r0, #0
 240 0044 7047     		bx	lr
 241              	.LVL24:
 242              	.L25:
 205:../src/pmc/pmc.c **** 		}
 243              		.loc 1 205 0
 244 0046 0120     		movs	r0, #1
 245              	.LVL25:
 246 0048 7047     		bx	lr
 247              	.L26:
 213:../src/pmc/pmc.c **** 			return 1;
 248              		.loc 1 213 0
 249 004a 0120     		movs	r0, #1
 218:../src/pmc/pmc.c **** }
 250              		.loc 1 218 0
 251 004c 7047     		bx	lr
 252              	.L28:
 253 004e 00BF     		.align	2
 254              	.L27:
 255 0050 00040E40 		.word	1074660352
 256              		.cfi_endproc
 257              	.LFE76:
 259              		.section	.text.pmc_switch_mck_to_pllack,"ax",%progbits
 260              		.align	2
 261              		.global	pmc_switch_mck_to_pllack
 262              		.thumb
 263              		.thumb_func
 265              	pmc_switch_mck_to_pllack:
 266              	.LFB77:
 219:../src/pmc/pmc.c **** 
 220:../src/pmc/pmc.c **** /**
 221:../src/pmc/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 222:../src/pmc/pmc.c ****  *
 223:../src/pmc/pmc.c ****  * \param ul_pres Processor clock prescaler.
 224:../src/pmc/pmc.c ****  *
 225:../src/pmc/pmc.c ****  * \retval 0 Success.
 226:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 227:../src/pmc/pmc.c ****  */
 228:../src/pmc/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 229:../src/pmc/pmc.c **** {
 267              		.loc 1 229 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272              	.LVL26:
 230:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 231:../src/pmc/pmc.c **** 
 232:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 273              		.loc 1 232 0
 274 0000 134A     		ldr	r2, .L37
 275 0002 136B     		ldr	r3, [r2, #48]
 276 0004 23F07003 		bic	r3, r3, #112
 277 0008 1843     		orrs	r0, r0, r3
 278              	.LVL27:
 279 000a 1063     		str	r0, [r2, #48]
 280              	.LVL28:
 233:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 281              		.loc 1 233 0
 282 000c 4FF40063 		mov	r3, #2048
 283 0010 01E0     		b	.L30
 284              	.LVL29:
 285              	.L32:
 234:../src/pmc/pmc.c **** 			--ul_timeout) {
 235:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 286              		.loc 1 235 0
 287 0012 C3B1     		cbz	r3, .L35
 234:../src/pmc/pmc.c **** 			--ul_timeout) {
 288              		.loc 1 234 0
 289 0014 013B     		subs	r3, r3, #1
 290              	.LVL30:
 291              	.L30:
 233:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 292              		.loc 1 233 0 discriminator 1
 293 0016 0E4A     		ldr	r2, .L37
 294 0018 926E     		ldr	r2, [r2, #104]
 295 001a 12F0080F 		tst	r2, #8
 296 001e F8D0     		beq	.L32
 236:../src/pmc/pmc.c **** 			return 1;
 237:../src/pmc/pmc.c **** 		}
 238:../src/pmc/pmc.c **** 	}
 239:../src/pmc/pmc.c **** 
 240:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 297              		.loc 1 240 0
 298 0020 0B4A     		ldr	r2, .L37
 299 0022 136B     		ldr	r3, [r2, #48]
 300              	.LVL31:
 301 0024 23F00303 		bic	r3, r3, #3
 302 0028 43F00203 		orr	r3, r3, #2
 303 002c 1363     		str	r3, [r2, #48]
 304              	.LVL32:
 241:../src/pmc/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 242:../src/pmc/pmc.c **** 
 243:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 305              		.loc 1 243 0
 306 002e 4FF40063 		mov	r3, #2048
 307 0032 01E0     		b	.L33
 308              	.LVL33:
 309              	.L34:
 244:../src/pmc/pmc.c **** 			--ul_timeout) {
 245:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 310              		.loc 1 245 0
 311 0034 4BB1     		cbz	r3, .L36
 244:../src/pmc/pmc.c **** 			--ul_timeout) {
 312              		.loc 1 244 0
 313 0036 013B     		subs	r3, r3, #1
 314              	.LVL34:
 315              	.L33:
 243:../src/pmc/pmc.c **** 			--ul_timeout) {
 316              		.loc 1 243 0 discriminator 1
 317 0038 054A     		ldr	r2, .L37
 318 003a 926E     		ldr	r2, [r2, #104]
 319 003c 12F0080F 		tst	r2, #8
 320 0040 F8D0     		beq	.L34
 246:../src/pmc/pmc.c **** 			return 1;
 247:../src/pmc/pmc.c **** 		}
 248:../src/pmc/pmc.c **** 	}
 249:../src/pmc/pmc.c **** 
 250:../src/pmc/pmc.c **** 	return 0;
 321              		.loc 1 250 0
 322 0042 0020     		movs	r0, #0
 323 0044 7047     		bx	lr
 324              	.L35:
 236:../src/pmc/pmc.c **** 		}
 325              		.loc 1 236 0
 326 0046 0120     		movs	r0, #1
 327 0048 7047     		bx	lr
 328              	.L36:
 246:../src/pmc/pmc.c **** 			return 1;
 329              		.loc 1 246 0
 330 004a 0120     		movs	r0, #1
 251:../src/pmc/pmc.c **** }
 331              		.loc 1 251 0
 332 004c 7047     		bx	lr
 333              	.L38:
 334 004e 00BF     		.align	2
 335              	.L37:
 336 0050 00040E40 		.word	1074660352
 337              		.cfi_endproc
 338              	.LFE77:
 340              		.section	.text.pmc_switch_mck_to_pllbck,"ax",%progbits
 341              		.align	2
 342              		.global	pmc_switch_mck_to_pllbck
 343              		.thumb
 344              		.thumb_func
 346              	pmc_switch_mck_to_pllbck:
 347              	.LFB78:
 252:../src/pmc/pmc.c **** 
 253:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 254:../src/pmc/pmc.c **** /**
 255:../src/pmc/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 256:../src/pmc/pmc.c ****  *
 257:../src/pmc/pmc.c ****  * \param ul_pres Processor clock prescaler.
 258:../src/pmc/pmc.c ****  *
 259:../src/pmc/pmc.c ****  * \retval 0 Success.
 260:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 261:../src/pmc/pmc.c ****  */
 262:../src/pmc/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 263:../src/pmc/pmc.c **** {
 348              		.loc 1 263 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL35:
 264:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 265:../src/pmc/pmc.c **** 
 266:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 354              		.loc 1 266 0
 355 0000 124A     		ldr	r2, .L47
 356 0002 136B     		ldr	r3, [r2, #48]
 357 0004 23F07003 		bic	r3, r3, #112
 358 0008 1843     		orrs	r0, r0, r3
 359              	.LVL36:
 360 000a 1063     		str	r0, [r2, #48]
 361              	.LVL37:
 267:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 362              		.loc 1 267 0
 363 000c 4FF40063 		mov	r3, #2048
 364 0010 01E0     		b	.L40
 365              	.LVL38:
 366              	.L42:
 268:../src/pmc/pmc.c **** 			--ul_timeout) {
 269:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 367              		.loc 1 269 0
 368 0012 B3B1     		cbz	r3, .L45
 268:../src/pmc/pmc.c **** 			--ul_timeout) {
 369              		.loc 1 268 0
 370 0014 013B     		subs	r3, r3, #1
 371              	.LVL39:
 372              	.L40:
 267:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 373              		.loc 1 267 0 discriminator 1
 374 0016 0D4A     		ldr	r2, .L47
 375 0018 926E     		ldr	r2, [r2, #104]
 376 001a 12F0080F 		tst	r2, #8
 377 001e F8D0     		beq	.L42
 270:../src/pmc/pmc.c **** 			return 1;
 271:../src/pmc/pmc.c **** 		}
 272:../src/pmc/pmc.c **** 	}
 273:../src/pmc/pmc.c **** 
 274:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 378              		.loc 1 274 0
 379 0020 0A4A     		ldr	r2, .L47
 380 0022 136B     		ldr	r3, [r2, #48]
 381              	.LVL40:
 382 0024 43F00303 		orr	r3, r3, #3
 383 0028 1363     		str	r3, [r2, #48]
 384              	.LVL41:
 275:../src/pmc/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 276:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 385              		.loc 1 276 0
 386 002a 4FF40063 		mov	r3, #2048
 387 002e 01E0     		b	.L43
 388              	.LVL42:
 389              	.L44:
 277:../src/pmc/pmc.c **** 			--ul_timeout) {
 278:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 390              		.loc 1 278 0
 391 0030 4BB1     		cbz	r3, .L46
 277:../src/pmc/pmc.c **** 			--ul_timeout) {
 392              		.loc 1 277 0
 393 0032 013B     		subs	r3, r3, #1
 394              	.LVL43:
 395              	.L43:
 276:../src/pmc/pmc.c **** 			--ul_timeout) {
 396              		.loc 1 276 0 discriminator 1
 397 0034 054A     		ldr	r2, .L47
 398 0036 926E     		ldr	r2, [r2, #104]
 399 0038 12F0080F 		tst	r2, #8
 400 003c F8D0     		beq	.L44
 279:../src/pmc/pmc.c **** 			return 1;
 280:../src/pmc/pmc.c **** 		}
 281:../src/pmc/pmc.c **** 	}
 282:../src/pmc/pmc.c **** 
 283:../src/pmc/pmc.c **** 	return 0;
 401              		.loc 1 283 0
 402 003e 0020     		movs	r0, #0
 403 0040 7047     		bx	lr
 404              	.L45:
 270:../src/pmc/pmc.c **** 		}
 405              		.loc 1 270 0
 406 0042 0120     		movs	r0, #1
 407 0044 7047     		bx	lr
 408              	.L46:
 279:../src/pmc/pmc.c **** 			return 1;
 409              		.loc 1 279 0
 410 0046 0120     		movs	r0, #1
 284:../src/pmc/pmc.c **** }
 411              		.loc 1 284 0
 412 0048 7047     		bx	lr
 413              	.L48:
 414 004a 00BF     		.align	2
 415              	.L47:
 416 004c 00040E40 		.word	1074660352
 417              		.cfi_endproc
 418              	.LFE78:
 420              		.section	.text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 421              		.align	2
 422              		.global	pmc_switch_sclk_to_32kxtal
 423              		.thumb
 424              		.thumb_func
 426              	pmc_switch_sclk_to_32kxtal:
 427              	.LFB79:
 285:../src/pmc/pmc.c **** #endif
 286:../src/pmc/pmc.c **** 
 287:../src/pmc/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 288:../src/pmc/pmc.c **** /**
 289:../src/pmc/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 290:../src/pmc/pmc.c ****  *
 291:../src/pmc/pmc.c ****  * \param ul_pres Processor clock prescaler.
 292:../src/pmc/pmc.c ****  *
 293:../src/pmc/pmc.c ****  * \retval 0 Success.
 294:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 295:../src/pmc/pmc.c ****  */
 296:../src/pmc/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 297:../src/pmc/pmc.c **** {
 298:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 299:../src/pmc/pmc.c **** 
 300:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 301:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 302:../src/pmc/pmc.c **** 			--ul_timeout) {
 303:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 304:../src/pmc/pmc.c **** 			return 1;
 305:../src/pmc/pmc.c **** 		}
 306:../src/pmc/pmc.c **** 	}
 307:../src/pmc/pmc.c **** 
 308:../src/pmc/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 309:../src/pmc/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 310:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 311:../src/pmc/pmc.c **** 			--ul_timeout) {
 312:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 313:../src/pmc/pmc.c **** 			return 1;
 314:../src/pmc/pmc.c **** 		}
 315:../src/pmc/pmc.c **** 	}
 316:../src/pmc/pmc.c **** 
 317:../src/pmc/pmc.c **** 	return 0;
 318:../src/pmc/pmc.c **** }
 319:../src/pmc/pmc.c **** #endif
 320:../src/pmc/pmc.c **** 
 321:../src/pmc/pmc.c **** /**
 322:../src/pmc/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 323:../src/pmc/pmc.c ****  *
 324:../src/pmc/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 325:../src/pmc/pmc.c ****  *       VDDIO power supply.
 326:../src/pmc/pmc.c ****  *
 327:../src/pmc/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 328:../src/pmc/pmc.c ****  */
 329:../src/pmc/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 330:../src/pmc/pmc.c **** {
 428              		.loc 1 330 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433              	.LVL44:
 331:../src/pmc/pmc.c **** 	/* Set Bypass mode if required */
 332:../src/pmc/pmc.c **** 	if (ul_bypass == 1) {
 434              		.loc 1 332 0
 435 0000 0128     		cmp	r0, #1
 436 0002 06D1     		bne	.L50
 333:../src/pmc/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 437              		.loc 1 333 0
 438 0004 054A     		ldr	r2, .L51
 439 0006 9368     		ldr	r3, [r2, #8]
 440 0008 43F02543 		orr	r3, r3, #-1526726656
 441 000c 43F48013 		orr	r3, r3, #1048576
 442 0010 9360     		str	r3, [r2, #8]
 443              	.L50:
 334:../src/pmc/pmc.c **** 			SUPC_MR_OSCBYPASS;
 335:../src/pmc/pmc.c **** 	}
 336:../src/pmc/pmc.c **** 
 337:../src/pmc/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 444              		.loc 1 337 0
 445 0012 034A     		ldr	r2, .L51+4
 446 0014 014B     		ldr	r3, .L51
 447 0016 1A60     		str	r2, [r3]
 448 0018 7047     		bx	lr
 449              	.L52:
 450 001a 00BF     		.align	2
 451              	.L51:
 452 001c 10140E40 		.word	1074664464
 453 0020 080000A5 		.word	-1526726648
 454              		.cfi_endproc
 455              	.LFE79:
 457              		.section	.text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 458              		.align	2
 459              		.global	pmc_osc_is_ready_32kxtal
 460              		.thumb
 461              		.thumb_func
 463              	pmc_osc_is_ready_32kxtal:
 464              	.LFB80:
 338:../src/pmc/pmc.c **** }
 339:../src/pmc/pmc.c **** 
 340:../src/pmc/pmc.c **** /**
 341:../src/pmc/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 342:../src/pmc/pmc.c ****  *
 343:../src/pmc/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 344:../src/pmc/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 345:../src/pmc/pmc.c ****  */
 346:../src/pmc/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 347:../src/pmc/pmc.c **** {
 465              		.loc 1 347 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 348:../src/pmc/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 470              		.loc 1 348 0
 471 0000 074B     		ldr	r3, .L57
 472 0002 5B69     		ldr	r3, [r3, #20]
 349:../src/pmc/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 473              		.loc 1 349 0
 474 0004 13F0800F 		tst	r3, #128
 475 0008 06D0     		beq	.L55
 476              		.loc 1 349 0 is_stmt 0 discriminator 1
 477 000a 064B     		ldr	r3, .L57+4
 478 000c 9B6E     		ldr	r3, [r3, #104]
 479 000e 13F0800F 		tst	r3, #128
 480 0012 03D1     		bne	.L56
 481              		.loc 1 349 0
 482 0014 0020     		movs	r0, #0
 483 0016 7047     		bx	lr
 484              	.L55:
 485 0018 0020     		movs	r0, #0
 486 001a 7047     		bx	lr
 487              	.L56:
 488 001c 0120     		movs	r0, #1
 350:../src/pmc/pmc.c **** }
 489              		.loc 1 350 0 is_stmt 1
 490 001e 7047     		bx	lr
 491              	.L58:
 492              		.align	2
 493              	.L57:
 494 0020 10140E40 		.word	1074664464
 495 0024 00040E40 		.word	1074660352
 496              		.cfi_endproc
 497              	.LFE80:
 499              		.section	.text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 500              		.align	2
 501              		.global	pmc_switch_mainck_to_fastrc
 502              		.thumb
 503              		.thumb_func
 505              	pmc_switch_mainck_to_fastrc:
 506              	.LFB81:
 351:../src/pmc/pmc.c **** 
 352:../src/pmc/pmc.c **** /**
 353:../src/pmc/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 354:../src/pmc/pmc.c ****  *
 355:../src/pmc/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 356:../src/pmc/pmc.c ****  *
 357:../src/pmc/pmc.c ****  * \retval 0 Success.
 358:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 359:../src/pmc/pmc.c ****  * \retval 2 Invalid frequency.
 360:../src/pmc/pmc.c ****  */
 361:../src/pmc/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 362:../src/pmc/pmc.c **** {
 507              		.loc 1 362 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512              	.LVL45:
 363:../src/pmc/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 364:../src/pmc/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 513              		.loc 1 364 0
 514 0000 124A     		ldr	r2, .L62
 515 0002 136A     		ldr	r3, [r2, #32]
 516 0004 43F45C13 		orr	r3, r3, #3604480
 517 0008 43F00803 		orr	r3, r3, #8
 518 000c 1362     		str	r3, [r2, #32]
 519              	.L60:
 365:../src/pmc/pmc.c **** 
 366:../src/pmc/pmc.c **** 	/* Wait the Fast RC to stabilize */
 367:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 520              		.loc 1 367 0 discriminator 1
 521 000e 0F4B     		ldr	r3, .L62
 522 0010 9B6E     		ldr	r3, [r3, #104]
 523 0012 13F4003F 		tst	r3, #131072
 524 0016 FAD0     		beq	.L60
 368:../src/pmc/pmc.c **** 
 369:../src/pmc/pmc.c **** 	/* Change Fast RC oscillator frequency */
 370:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 525              		.loc 1 370 0
 526 0018 0C4A     		ldr	r2, .L62
 527 001a 136A     		ldr	r3, [r2, #32]
 528 001c 23F45C13 		bic	r3, r3, #3604480
 529 0020 23F07003 		bic	r3, r3, #112
 371:../src/pmc/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 530              		.loc 1 371 0
 531 0024 1843     		orrs	r0, r0, r3
 532              	.LVL46:
 533 0026 40F45C10 		orr	r0, r0, #3604480
 370:../src/pmc/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 534              		.loc 1 370 0
 535 002a 1062     		str	r0, [r2, #32]
 536              	.L61:
 372:../src/pmc/pmc.c **** 
 373:../src/pmc/pmc.c **** 	/* Wait the Fast RC to stabilize */
 374:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 537              		.loc 1 374 0 discriminator 1
 538 002c 074B     		ldr	r3, .L62
 539 002e 9B6E     		ldr	r3, [r3, #104]
 540 0030 13F4003F 		tst	r3, #131072
 541 0034 FAD0     		beq	.L61
 375:../src/pmc/pmc.c **** 
 376:../src/pmc/pmc.c **** 	/* Switch to Fast RC */
 377:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 542              		.loc 1 377 0
 543 0036 054A     		ldr	r2, .L62
 544 0038 136A     		ldr	r3, [r2, #32]
 545 003a 23F09B73 		bic	r3, r3, #20316160
 546 003e 23F48033 		bic	r3, r3, #65536
 547 0042 43F45C13 		orr	r3, r3, #3604480
 548 0046 1362     		str	r3, [r2, #32]
 549 0048 7047     		bx	lr
 550              	.L63:
 551 004a 00BF     		.align	2
 552              	.L62:
 553 004c 00040E40 		.word	1074660352
 554              		.cfi_endproc
 555              	.LFE81:
 557              		.section	.text.pmc_osc_enable_fastrc,"ax",%progbits
 558              		.align	2
 559              		.global	pmc_osc_enable_fastrc
 560              		.thumb
 561              		.thumb_func
 563              	pmc_osc_enable_fastrc:
 564              	.LFB82:
 378:../src/pmc/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 379:../src/pmc/pmc.c **** }
 380:../src/pmc/pmc.c **** 
 381:../src/pmc/pmc.c **** /**
 382:../src/pmc/pmc.c ****  * \brief Enable fast RC oscillator.
 383:../src/pmc/pmc.c ****  *
 384:../src/pmc/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 385:../src/pmc/pmc.c ****  */
 386:../src/pmc/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 387:../src/pmc/pmc.c **** {
 565              		.loc 1 387 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 570              	.LVL47:
 388:../src/pmc/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 389:../src/pmc/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 571              		.loc 1 389 0
 572 0000 0D4A     		ldr	r2, .L67
 573 0002 136A     		ldr	r3, [r2, #32]
 574 0004 43F45C13 		orr	r3, r3, #3604480
 575 0008 43F00803 		orr	r3, r3, #8
 576 000c 1362     		str	r3, [r2, #32]
 577              	.L65:
 390:../src/pmc/pmc.c **** 	/* Wait the Fast RC to stabilize */
 391:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 578              		.loc 1 391 0 discriminator 1
 579 000e 0A4B     		ldr	r3, .L67
 580 0010 9B6E     		ldr	r3, [r3, #104]
 581 0012 13F4003F 		tst	r3, #131072
 582 0016 FAD0     		beq	.L65
 392:../src/pmc/pmc.c **** 
 393:../src/pmc/pmc.c **** 	/* Change Fast RC oscillator frequency */
 394:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 583              		.loc 1 394 0
 584 0018 074A     		ldr	r2, .L67
 585 001a 136A     		ldr	r3, [r2, #32]
 586 001c 23F45C13 		bic	r3, r3, #3604480
 587 0020 23F07003 		bic	r3, r3, #112
 395:../src/pmc/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 588              		.loc 1 395 0
 589 0024 1843     		orrs	r0, r0, r3
 590              	.LVL48:
 591 0026 40F45C10 		orr	r0, r0, #3604480
 394:../src/pmc/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 592              		.loc 1 394 0
 593 002a 1062     		str	r0, [r2, #32]
 594              	.L66:
 396:../src/pmc/pmc.c **** 	/* Wait the Fast RC to stabilize */
 397:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 595              		.loc 1 397 0 discriminator 1
 596 002c 024B     		ldr	r3, .L67
 597 002e 9B6E     		ldr	r3, [r3, #104]
 598 0030 13F4003F 		tst	r3, #131072
 599 0034 FAD0     		beq	.L66
 398:../src/pmc/pmc.c **** }
 600              		.loc 1 398 0
 601 0036 7047     		bx	lr
 602              	.L68:
 603              		.align	2
 604              	.L67:
 605 0038 00040E40 		.word	1074660352
 606              		.cfi_endproc
 607              	.LFE82:
 609              		.section	.text.pmc_osc_disable_fastrc,"ax",%progbits
 610              		.align	2
 611              		.global	pmc_osc_disable_fastrc
 612              		.thumb
 613              		.thumb_func
 615              	pmc_osc_disable_fastrc:
 616              	.LFB83:
 399:../src/pmc/pmc.c **** 
 400:../src/pmc/pmc.c **** /**
 401:../src/pmc/pmc.c ****  * \brief Disable the internal fast RC.
 402:../src/pmc/pmc.c ****  */
 403:../src/pmc/pmc.c **** void pmc_osc_disable_fastrc(void)
 404:../src/pmc/pmc.c **** {
 617              		.loc 1 404 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 405:../src/pmc/pmc.c **** 	/* Disable Fast RC oscillator */
 406:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 622              		.loc 1 406 0
 623 0000 044A     		ldr	r2, .L70
 624 0002 136A     		ldr	r3, [r2, #32]
 407:../src/pmc/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 408:../src/pmc/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 625              		.loc 1 408 0
 626 0004 23F45C13 		bic	r3, r3, #3604480
 627 0008 23F07803 		bic	r3, r3, #120
 628 000c 43F45C13 		orr	r3, r3, #3604480
 406:../src/pmc/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 629              		.loc 1 406 0
 630 0010 1362     		str	r3, [r2, #32]
 631 0012 7047     		bx	lr
 632              	.L71:
 633              		.align	2
 634              	.L70:
 635 0014 00040E40 		.word	1074660352
 636              		.cfi_endproc
 637              	.LFE83:
 639              		.section	.text.pmc_osc_is_ready_fastrc,"ax",%progbits
 640              		.align	2
 641              		.global	pmc_osc_is_ready_fastrc
 642              		.thumb
 643              		.thumb_func
 645              	pmc_osc_is_ready_fastrc:
 646              	.LFB84:
 409:../src/pmc/pmc.c **** }
 410:../src/pmc/pmc.c **** 
 411:../src/pmc/pmc.c **** /**
 412:../src/pmc/pmc.c ****  * \brief Check if the main fastrc is ready.
 413:../src/pmc/pmc.c ****  *
 414:../src/pmc/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 415:../src/pmc/pmc.c ****  */
 416:../src/pmc/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 417:../src/pmc/pmc.c **** {
 647              		.loc 1 417 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 418:../src/pmc/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 652              		.loc 1 418 0
 653 0000 024B     		ldr	r3, .L73
 654 0002 986E     		ldr	r0, [r3, #104]
 419:../src/pmc/pmc.c **** }
 655              		.loc 1 419 0
 656 0004 00F40030 		and	r0, r0, #131072
 657 0008 7047     		bx	lr
 658              	.L74:
 659 000a 00BF     		.align	2
 660              	.L73:
 661 000c 00040E40 		.word	1074660352
 662              		.cfi_endproc
 663              	.LFE84:
 665              		.section	.text.pmc_osc_enable_main_xtal,"ax",%progbits
 666              		.align	2
 667              		.global	pmc_osc_enable_main_xtal
 668              		.thumb
 669              		.thumb_func
 671              	pmc_osc_enable_main_xtal:
 672              	.LFB85:
 420:../src/pmc/pmc.c **** 
 421:../src/pmc/pmc.c **** /**
 422:../src/pmc/pmc.c ****  * \brief Enable main XTAL oscillator.
 423:../src/pmc/pmc.c ****  *
 424:../src/pmc/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 425:../src/pmc/pmc.c ****  */
 426:../src/pmc/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 427:../src/pmc/pmc.c **** {
 673              		.loc 1 427 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678              	.LVL49:
 428:../src/pmc/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 679              		.loc 1 428 0
 680 0000 084A     		ldr	r2, .L77
 681 0002 136A     		ldr	r3, [r2, #32]
 682              	.LVL50:
 429:../src/pmc/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 683              		.loc 1 429 0
 684 0004 23F00303 		bic	r3, r3, #3
 685              	.LVL51:
 430:../src/pmc/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 431:../src/pmc/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 686              		.loc 1 431 0
 687 0008 0002     		lsls	r0, r0, #8
 688              	.LVL52:
 689 000a 80B2     		uxth	r0, r0
 430:../src/pmc/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 690              		.loc 1 430 0
 691 000c 0343     		orrs	r3, r3, r0
 692              	.LVL53:
 693 000e 43F45C13 		orr	r3, r3, #3604480
 694 0012 43F00103 		orr	r3, r3, #1
 695              	.LVL54:
 432:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = mor;
 696              		.loc 1 432 0
 697 0016 1362     		str	r3, [r2, #32]
 698              	.LVL55:
 699              	.L76:
 433:../src/pmc/pmc.c **** 	/* Wait the main Xtal to stabilize */
 434:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 700              		.loc 1 434 0 discriminator 1
 701 0018 024B     		ldr	r3, .L77
 702 001a 9B6E     		ldr	r3, [r3, #104]
 703 001c 13F0010F 		tst	r3, #1
 704 0020 FAD0     		beq	.L76
 435:../src/pmc/pmc.c **** }
 705              		.loc 1 435 0
 706 0022 7047     		bx	lr
 707              	.L78:
 708              		.align	2
 709              	.L77:
 710 0024 00040E40 		.word	1074660352
 711              		.cfi_endproc
 712              	.LFE85:
 714              		.section	.text.pmc_osc_bypass_main_xtal,"ax",%progbits
 715              		.align	2
 716              		.global	pmc_osc_bypass_main_xtal
 717              		.thumb
 718              		.thumb_func
 720              	pmc_osc_bypass_main_xtal:
 721              	.LFB86:
 436:../src/pmc/pmc.c **** 
 437:../src/pmc/pmc.c **** /**
 438:../src/pmc/pmc.c ****  * \brief Bypass main XTAL.
 439:../src/pmc/pmc.c ****  */
 440:../src/pmc/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 441:../src/pmc/pmc.c **** {
 722              		.loc 1 441 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 442:../src/pmc/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 727              		.loc 1 442 0
 728 0000 044A     		ldr	r2, .L80
 729 0002 136A     		ldr	r3, [r2, #32]
 730              	.LVL56:
 443:../src/pmc/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 731              		.loc 1 443 0
 732 0004 23F00303 		bic	r3, r3, #3
 733              	.LVL57:
 444:../src/pmc/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 734              		.loc 1 444 0
 735 0008 43F45C13 		orr	r3, r3, #3604480
 736              	.LVL58:
 737 000c 43F00203 		orr	r3, r3, #2
 738              	.LVL59:
 445:../src/pmc/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 446:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = mor;
 739              		.loc 1 446 0
 740 0010 1362     		str	r3, [r2, #32]
 741 0012 7047     		bx	lr
 742              	.L81:
 743              		.align	2
 744              	.L80:
 745 0014 00040E40 		.word	1074660352
 746              		.cfi_endproc
 747              	.LFE86:
 749              		.section	.text.pmc_osc_disable_main_xtal,"ax",%progbits
 750              		.align	2
 751              		.global	pmc_osc_disable_main_xtal
 752              		.thumb
 753              		.thumb_func
 755              	pmc_osc_disable_main_xtal:
 756              	.LFB87:
 447:../src/pmc/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 448:../src/pmc/pmc.c **** }
 449:../src/pmc/pmc.c **** 
 450:../src/pmc/pmc.c **** /**
 451:../src/pmc/pmc.c ****  * \brief Disable the main Xtal.
 452:../src/pmc/pmc.c ****  */
 453:../src/pmc/pmc.c **** void pmc_osc_disable_main_xtal(void)
 454:../src/pmc/pmc.c **** {
 757              		.loc 1 454 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              		@ link register save eliminated.
 455:../src/pmc/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 762              		.loc 1 455 0
 763 0000 034A     		ldr	r2, .L83
 764 0002 136A     		ldr	r3, [r2, #32]
 765              	.LVL60:
 456:../src/pmc/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 766              		.loc 1 456 0
 767 0004 23F00303 		bic	r3, r3, #3
 768              	.LVL61:
 457:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 769              		.loc 1 457 0
 770 0008 43F45C13 		orr	r3, r3, #3604480
 771              	.LVL62:
 772 000c 1362     		str	r3, [r2, #32]
 773 000e 7047     		bx	lr
 774              	.L84:
 775              		.align	2
 776              	.L83:
 777 0010 00040E40 		.word	1074660352
 778              		.cfi_endproc
 779              	.LFE87:
 781              		.section	.text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 782              		.align	2
 783              		.global	pmc_osc_is_bypassed_main_xtal
 784              		.thumb
 785              		.thumb_func
 787              	pmc_osc_is_bypassed_main_xtal:
 788              	.LFB88:
 458:../src/pmc/pmc.c **** }
 459:../src/pmc/pmc.c **** 
 460:../src/pmc/pmc.c **** /**
 461:../src/pmc/pmc.c ****  * \brief Check if the main crystal is bypassed.
 462:../src/pmc/pmc.c ****  *
 463:../src/pmc/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 464:../src/pmc/pmc.c ****  */
 465:../src/pmc/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 466:../src/pmc/pmc.c **** {
 789              		.loc 1 466 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 467:../src/pmc/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 794              		.loc 1 467 0
 795 0000 024B     		ldr	r3, .L86
 796 0002 186A     		ldr	r0, [r3, #32]
 468:../src/pmc/pmc.c **** }
 797              		.loc 1 468 0
 798 0004 00F00200 		and	r0, r0, #2
 799 0008 7047     		bx	lr
 800              	.L87:
 801 000a 00BF     		.align	2
 802              	.L86:
 803 000c 00040E40 		.word	1074660352
 804              		.cfi_endproc
 805              	.LFE88:
 807              		.section	.text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 808              		.align	2
 809              		.global	pmc_osc_is_ready_main_xtal
 810              		.thumb
 811              		.thumb_func
 813              	pmc_osc_is_ready_main_xtal:
 814              	.LFB89:
 469:../src/pmc/pmc.c **** 
 470:../src/pmc/pmc.c **** /**
 471:../src/pmc/pmc.c ****  * \brief Check if the main crystal is ready.
 472:../src/pmc/pmc.c ****  *
 473:../src/pmc/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 474:../src/pmc/pmc.c ****  *
 475:../src/pmc/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 476:../src/pmc/pmc.c ****  */
 477:../src/pmc/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 478:../src/pmc/pmc.c **** {
 815              		.loc 1 478 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 479:../src/pmc/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 820              		.loc 1 479 0
 821 0000 024B     		ldr	r3, .L89
 822 0002 986E     		ldr	r0, [r3, #104]
 480:../src/pmc/pmc.c **** }
 823              		.loc 1 480 0
 824 0004 00F00100 		and	r0, r0, #1
 825 0008 7047     		bx	lr
 826              	.L90:
 827 000a 00BF     		.align	2
 828              	.L89:
 829 000c 00040E40 		.word	1074660352
 830              		.cfi_endproc
 831              	.LFE89:
 833              		.section	.text.pmc_switch_mainck_to_xtal,"ax",%progbits
 834              		.align	2
 835              		.global	pmc_switch_mainck_to_xtal
 836              		.thumb
 837              		.thumb_func
 839              	pmc_switch_mainck_to_xtal:
 840              	.LFB90:
 481:../src/pmc/pmc.c **** 
 482:../src/pmc/pmc.c **** /**
 483:../src/pmc/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 484:../src/pmc/pmc.c ****  *
 485:../src/pmc/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 486:../src/pmc/pmc.c ****  *       any system crash.
 487:../src/pmc/pmc.c ****  *
 488:../src/pmc/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 489:../src/pmc/pmc.c ****  *
 490:../src/pmc/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 491:../src/pmc/pmc.c ****  *
 492:../src/pmc/pmc.c ****  * \retval 0 Success.
 493:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 494:../src/pmc/pmc.c ****  */
 495:../src/pmc/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 496:../src/pmc/pmc.c **** 		uint32_t ul_xtal_startup_time)
 497:../src/pmc/pmc.c **** {
 841              		.loc 1 497 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL63:
 498:../src/pmc/pmc.c **** 	/* Enable Main Xtal oscillator */
 499:../src/pmc/pmc.c **** 	if (ul_bypass) {
 847              		.loc 1 499 0
 848 0000 38B1     		cbz	r0, .L92
 500:../src/pmc/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 849              		.loc 1 500 0
 850 0002 1149     		ldr	r1, .L95
 851              	.LVL64:
 852 0004 0B6A     		ldr	r3, [r1, #32]
 501:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 853              		.loc 1 501 0
 854 0006 114A     		ldr	r2, .L95+4
 855 0008 1A40     		ands	r2, r2, r3
 856 000a 114B     		ldr	r3, .L95+8
 857 000c 1343     		orrs	r3, r3, r2
 500:../src/pmc/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 858              		.loc 1 500 0
 859 000e 0B62     		str	r3, [r1, #32]
 860 0010 7047     		bx	lr
 861              	.LVL65:
 862              	.L92:
 502:../src/pmc/pmc.c **** 				CKGR_MOR_MOSCSEL;
 503:../src/pmc/pmc.c **** 	} else {
 504:../src/pmc/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 863              		.loc 1 504 0
 864 0012 0D4A     		ldr	r2, .L95
 865 0014 136A     		ldr	r3, [r2, #32]
 505:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 866              		.loc 1 505 0
 867 0016 23F45C13 		bic	r3, r3, #3604480
 868 001a 23F00303 		bic	r3, r3, #3
 506:../src/pmc/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 869              		.loc 1 506 0
 870 001e 0902     		lsls	r1, r1, #8
 871              	.LVL66:
 872 0020 89B2     		uxth	r1, r1
 505:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 873              		.loc 1 505 0
 874 0022 0B43     		orrs	r3, r3, r1
 875 0024 43F45C13 		orr	r3, r3, #3604480
 876 0028 43F00103 		orr	r3, r3, #1
 504:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 877              		.loc 1 504 0
 878 002c 1362     		str	r3, [r2, #32]
 879              	.L94:
 507:../src/pmc/pmc.c **** 		/* Wait the Xtal to stabilize */
 508:../src/pmc/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 880              		.loc 1 508 0 discriminator 1
 881 002e 064B     		ldr	r3, .L95
 882 0030 9B6E     		ldr	r3, [r3, #104]
 883 0032 13F0010F 		tst	r3, #1
 884 0036 FAD0     		beq	.L94
 509:../src/pmc/pmc.c **** 
 510:../src/pmc/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 885              		.loc 1 510 0
 886 0038 034A     		ldr	r2, .L95
 887 003a 136A     		ldr	r3, [r2, #32]
 888 003c 43F09B73 		orr	r3, r3, #20316160
 889 0040 43F48033 		orr	r3, r3, #65536
 890 0044 1362     		str	r3, [r2, #32]
 891 0046 7047     		bx	lr
 892              	.L96:
 893              		.align	2
 894              	.L95:
 895 0048 00040E40 		.word	1074660352
 896 004c FCFFC8FE 		.word	-20381700
 897 0050 02003701 		.word	20381698
 898              		.cfi_endproc
 899              	.LFE90:
 901              		.section	.text.pmc_osc_disable_xtal,"ax",%progbits
 902              		.align	2
 903              		.global	pmc_osc_disable_xtal
 904              		.thumb
 905              		.thumb_func
 907              	pmc_osc_disable_xtal:
 908              	.LFB91:
 511:../src/pmc/pmc.c **** 	}
 512:../src/pmc/pmc.c **** }
 513:../src/pmc/pmc.c **** 
 514:../src/pmc/pmc.c **** /**
 515:../src/pmc/pmc.c ****  * \brief Disable the external Xtal.
 516:../src/pmc/pmc.c ****  *
 517:../src/pmc/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 518:../src/pmc/pmc.c ****  */
 519:../src/pmc/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 520:../src/pmc/pmc.c **** {
 909              		.loc 1 520 0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              		@ link register save eliminated.
 914              	.LVL67:
 521:../src/pmc/pmc.c **** 	/* Disable xtal oscillator */
 522:../src/pmc/pmc.c **** 	if (ul_bypass) {
 915              		.loc 1 522 0
 916 0000 48B1     		cbz	r0, .L98
 523:../src/pmc/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 917              		.loc 1 523 0
 918 0002 0A4A     		ldr	r2, .L100
 919 0004 136A     		ldr	r3, [r2, #32]
 920 0006 23F45C13 		bic	r3, r3, #3604480
 921 000a 23F00203 		bic	r3, r3, #2
 922 000e 43F45C13 		orr	r3, r3, #3604480
 923 0012 1362     		str	r3, [r2, #32]
 924 0014 7047     		bx	lr
 925              	.L98:
 524:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 525:../src/pmc/pmc.c **** 	} else {
 526:../src/pmc/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 926              		.loc 1 526 0
 927 0016 054A     		ldr	r2, .L100
 928 0018 136A     		ldr	r3, [r2, #32]
 929 001a 23F45C13 		bic	r3, r3, #3604480
 930 001e 23F00103 		bic	r3, r3, #1
 931 0022 43F45C13 		orr	r3, r3, #3604480
 932 0026 1362     		str	r3, [r2, #32]
 933 0028 7047     		bx	lr
 934              	.L101:
 935 002a 00BF     		.align	2
 936              	.L100:
 937 002c 00040E40 		.word	1074660352
 938              		.cfi_endproc
 939              	.LFE91:
 941              		.section	.text.pmc_osc_is_ready_mainck,"ax",%progbits
 942              		.align	2
 943              		.global	pmc_osc_is_ready_mainck
 944              		.thumb
 945              		.thumb_func
 947              	pmc_osc_is_ready_mainck:
 948              	.LFB92:
 527:../src/pmc/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 528:../src/pmc/pmc.c **** 	}
 529:../src/pmc/pmc.c **** }
 530:../src/pmc/pmc.c **** 
 531:../src/pmc/pmc.c **** /**
 532:../src/pmc/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 533:../src/pmc/pmc.c ****  * of Xtal, bypass or internal RC.
 534:../src/pmc/pmc.c ****  *
 535:../src/pmc/pmc.c ****  * \retval 1 Xtal is ready.
 536:../src/pmc/pmc.c ****  * \retval 0 Xtal is not ready.
 537:../src/pmc/pmc.c ****  */
 538:../src/pmc/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 539:../src/pmc/pmc.c **** {
 949              		.loc 1 539 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              		@ link register save eliminated.
 540:../src/pmc/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 954              		.loc 1 540 0
 955 0000 024B     		ldr	r3, .L103
 956 0002 986E     		ldr	r0, [r3, #104]
 541:../src/pmc/pmc.c **** }
 957              		.loc 1 541 0
 958 0004 00F48030 		and	r0, r0, #65536
 959 0008 7047     		bx	lr
 960              	.L104:
 961 000a 00BF     		.align	2
 962              	.L103:
 963 000c 00040E40 		.word	1074660352
 964              		.cfi_endproc
 965              	.LFE92:
 967              		.section	.text.pmc_mainck_osc_select,"ax",%progbits
 968              		.align	2
 969              		.global	pmc_mainck_osc_select
 970              		.thumb
 971              		.thumb_func
 973              	pmc_mainck_osc_select:
 974              	.LFB93:
 542:../src/pmc/pmc.c **** 
 543:../src/pmc/pmc.c **** /**
 544:../src/pmc/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 545:../src/pmc/pmc.c ****  *
 546:../src/pmc/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 547:../src/pmc/pmc.c ****  *
 548:../src/pmc/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 549:../src/pmc/pmc.c ****  */
 550:../src/pmc/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 551:../src/pmc/pmc.c **** {
 975              		.loc 1 551 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980              	.LVL68:
 552:../src/pmc/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 981              		.loc 1 552 0
 982 0000 064B     		ldr	r3, .L108
 983 0002 1B6A     		ldr	r3, [r3, #32]
 984              	.LVL69:
 553:../src/pmc/pmc.c **** 	if (ul_xtal_rc) {
 985              		.loc 1 553 0
 986 0004 10B1     		cbz	r0, .L106
 554:../src/pmc/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 987              		.loc 1 554 0
 988 0006 43F08073 		orr	r3, r3, #16777216
 989              	.LVL70:
 990 000a 01E0     		b	.L107
 991              	.L106:
 555:../src/pmc/pmc.c **** 	} else {
 556:../src/pmc/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 992              		.loc 1 556 0
 993 000c 23F08073 		bic	r3, r3, #16777216
 994              	.LVL71:
 995              	.L107:
 557:../src/pmc/pmc.c **** 	}
 558:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 996              		.loc 1 558 0
 997 0010 43F45C13 		orr	r3, r3, #3604480
 998              	.LVL72:
 999 0014 014A     		ldr	r2, .L108
 1000 0016 1362     		str	r3, [r2, #32]
 1001 0018 7047     		bx	lr
 1002              	.L109:
 1003 001a 00BF     		.align	2
 1004              	.L108:
 1005 001c 00040E40 		.word	1074660352
 1006              		.cfi_endproc
 1007              	.LFE93:
 1009              		.section	.text.pmc_disable_pllack,"ax",%progbits
 1010              		.align	2
 1011              		.global	pmc_disable_pllack
 1012              		.thumb
 1013              		.thumb_func
 1015              	pmc_disable_pllack:
 1016              	.LFB95:
 559:../src/pmc/pmc.c **** }
 560:../src/pmc/pmc.c **** 
 561:../src/pmc/pmc.c **** /**
 562:../src/pmc/pmc.c ****  * \brief Enable PLLA clock.
 563:../src/pmc/pmc.c ****  *
 564:../src/pmc/pmc.c ****  * \param mula PLLA multiplier.
 565:../src/pmc/pmc.c ****  * \param pllacount PLLA counter.
 566:../src/pmc/pmc.c ****  * \param diva Divider.
 567:../src/pmc/pmc.c ****  */
 568:../src/pmc/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 569:../src/pmc/pmc.c **** {
 570:../src/pmc/pmc.c **** 	/* first disable the PLL to unlock the lock */
 571:../src/pmc/pmc.c **** 	pmc_disable_pllack();
 572:../src/pmc/pmc.c **** 
 573:../src/pmc/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 574:../src/pmc/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 575:../src/pmc/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 576:../src/pmc/pmc.c **** #else
 577:../src/pmc/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 578:../src/pmc/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 579:../src/pmc/pmc.c **** #endif
 580:../src/pmc/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 581:../src/pmc/pmc.c **** }
 582:../src/pmc/pmc.c **** 
 583:../src/pmc/pmc.c **** /**
 584:../src/pmc/pmc.c ****  * \brief Disable PLLA clock.
 585:../src/pmc/pmc.c ****  */
 586:../src/pmc/pmc.c **** void pmc_disable_pllack(void)
 587:../src/pmc/pmc.c **** {
 1017              		.loc 1 587 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 588:../src/pmc/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 589:../src/pmc/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 590:../src/pmc/pmc.c **** #else
 591:../src/pmc/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1022              		.loc 1 591 0
 1023 0000 4FF00052 		mov	r2, #536870912
 1024 0004 014B     		ldr	r3, .L111
 1025 0006 9A62     		str	r2, [r3, #40]
 1026 0008 7047     		bx	lr
 1027              	.L112:
 1028 000a 00BF     		.align	2
 1029              	.L111:
 1030 000c 00040E40 		.word	1074660352
 1031              		.cfi_endproc
 1032              	.LFE95:
 1034              		.section	.text.pmc_enable_pllack,"ax",%progbits
 1035              		.align	2
 1036              		.global	pmc_enable_pllack
 1037              		.thumb
 1038              		.thumb_func
 1040              	pmc_enable_pllack:
 1041              	.LFB94:
 569:../src/pmc/pmc.c **** 	/* first disable the PLL to unlock the lock */
 1042              		.loc 1 569 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              	.LVL73:
 1047 0000 70B5     		push	{r4, r5, r6, lr}
 1048              		.cfi_def_cfa_offset 16
 1049              		.cfi_offset 4, -16
 1050              		.cfi_offset 5, -12
 1051              		.cfi_offset 6, -8
 1052              		.cfi_offset 14, -4
 1053 0002 0646     		mov	r6, r0
 1054 0004 0C46     		mov	r4, r1
 1055 0006 1546     		mov	r5, r2
 571:../src/pmc/pmc.c **** 
 1056              		.loc 1 571 0
 1057 0008 FFF7FEFF 		bl	pmc_disable_pllack
 1058              	.LVL74:
 577:../src/pmc/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1059              		.loc 1 577 0
 1060 000c EBB2     		uxtb	r3, r5
 578:../src/pmc/pmc.c **** #endif
 1061              		.loc 1 578 0
 1062 000e 2402     		lsls	r4, r4, #8
 1063              	.LVL75:
 1064 0010 04F47C54 		and	r4, r4, #16128
 577:../src/pmc/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1065              		.loc 1 577 0
 1066 0014 2343     		orrs	r3, r3, r4
 578:../src/pmc/pmc.c **** #endif
 1067              		.loc 1 578 0
 1068 0016 0748     		ldr	r0, .L116
 1069 0018 00EA0640 		and	r0, r0, r6, lsl #16
 1070 001c 0343     		orrs	r3, r3, r0
 1071 001e 43F00053 		orr	r3, r3, #536870912
 577:../src/pmc/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1072              		.loc 1 577 0
 1073 0022 054A     		ldr	r2, .L116+4
 1074 0024 9362     		str	r3, [r2, #40]
 1075              	.L114:
 580:../src/pmc/pmc.c **** }
 1076              		.loc 1 580 0 discriminator 1
 1077 0026 044B     		ldr	r3, .L116+4
 1078 0028 9B6E     		ldr	r3, [r3, #104]
 1079 002a 13F0020F 		tst	r3, #2
 1080 002e FAD0     		beq	.L114
 581:../src/pmc/pmc.c **** 
 1081              		.loc 1 581 0
 1082 0030 70BD     		pop	{r4, r5, r6, pc}
 1083              	.LVL76:
 1084              	.L117:
 1085 0032 00BF     		.align	2
 1086              	.L116:
 1087 0034 0000FF07 		.word	134152192
 1088 0038 00040E40 		.word	1074660352
 1089              		.cfi_endproc
 1090              	.LFE94:
 1092              		.section	.text.pmc_is_locked_pllack,"ax",%progbits
 1093              		.align	2
 1094              		.global	pmc_is_locked_pllack
 1095              		.thumb
 1096              		.thumb_func
 1098              	pmc_is_locked_pllack:
 1099              	.LFB96:
 592:../src/pmc/pmc.c **** #endif
 593:../src/pmc/pmc.c **** }
 594:../src/pmc/pmc.c **** 
 595:../src/pmc/pmc.c **** /**
 596:../src/pmc/pmc.c ****  * \brief Is PLLA locked?
 597:../src/pmc/pmc.c ****  *
 598:../src/pmc/pmc.c ****  * \retval 0 Not locked.
 599:../src/pmc/pmc.c ****  * \retval 1 Locked.
 600:../src/pmc/pmc.c ****  */
 601:../src/pmc/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 602:../src/pmc/pmc.c **** {
 1100              		.loc 1 602 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 603:../src/pmc/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1105              		.loc 1 603 0
 1106 0000 024B     		ldr	r3, .L119
 1107 0002 986E     		ldr	r0, [r3, #104]
 604:../src/pmc/pmc.c **** }
 1108              		.loc 1 604 0
 1109 0004 00F00200 		and	r0, r0, #2
 1110 0008 7047     		bx	lr
 1111              	.L120:
 1112 000a 00BF     		.align	2
 1113              	.L119:
 1114 000c 00040E40 		.word	1074660352
 1115              		.cfi_endproc
 1116              	.LFE96:
 1118              		.section	.text.pmc_disable_pllbck,"ax",%progbits
 1119              		.align	2
 1120              		.global	pmc_disable_pllbck
 1121              		.thumb
 1122              		.thumb_func
 1124              	pmc_disable_pllbck:
 1125              	.LFB98:
 605:../src/pmc/pmc.c **** 
 606:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 607:../src/pmc/pmc.c **** /**
 608:../src/pmc/pmc.c ****  * \brief Enable PLLB clock.
 609:../src/pmc/pmc.c ****  *
 610:../src/pmc/pmc.c ****  * \param mulb PLLB multiplier.
 611:../src/pmc/pmc.c ****  * \param pllbcount PLLB counter.
 612:../src/pmc/pmc.c ****  * \param divb Divider.
 613:../src/pmc/pmc.c ****  */
 614:../src/pmc/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 615:../src/pmc/pmc.c **** {
 616:../src/pmc/pmc.c **** 	/* first disable the PLL to unlock the lock */
 617:../src/pmc/pmc.c **** 	pmc_disable_pllbck();
 618:../src/pmc/pmc.c **** 
 619:../src/pmc/pmc.c **** #if SAMG55
 620:../src/pmc/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 621:../src/pmc/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 622:../src/pmc/pmc.c **** #else
 623:../src/pmc/pmc.c **** 	PMC->CKGR_PLLBR =
 624:../src/pmc/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 625:../src/pmc/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 626:../src/pmc/pmc.c **** #endif
 627:../src/pmc/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 628:../src/pmc/pmc.c **** }
 629:../src/pmc/pmc.c **** 
 630:../src/pmc/pmc.c **** /**
 631:../src/pmc/pmc.c ****  * \brief Disable PLLB clock.
 632:../src/pmc/pmc.c ****  */
 633:../src/pmc/pmc.c **** void pmc_disable_pllbck(void)
 634:../src/pmc/pmc.c **** {
 1126              		.loc 1 634 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 635:../src/pmc/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 1131              		.loc 1 635 0
 1132 0000 0022     		movs	r2, #0
 1133 0002 014B     		ldr	r3, .L122
 1134 0004 DA62     		str	r2, [r3, #44]
 1135 0006 7047     		bx	lr
 1136              	.L123:
 1137              		.align	2
 1138              	.L122:
 1139 0008 00040E40 		.word	1074660352
 1140              		.cfi_endproc
 1141              	.LFE98:
 1143              		.section	.text.pmc_enable_pllbck,"ax",%progbits
 1144              		.align	2
 1145              		.global	pmc_enable_pllbck
 1146              		.thumb
 1147              		.thumb_func
 1149              	pmc_enable_pllbck:
 1150              	.LFB97:
 615:../src/pmc/pmc.c **** 	/* first disable the PLL to unlock the lock */
 1151              		.loc 1 615 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              	.LVL77:
 1156 0000 70B5     		push	{r4, r5, r6, lr}
 1157              		.cfi_def_cfa_offset 16
 1158              		.cfi_offset 4, -16
 1159              		.cfi_offset 5, -12
 1160              		.cfi_offset 6, -8
 1161              		.cfi_offset 14, -4
 1162 0002 0646     		mov	r6, r0
 1163 0004 0C46     		mov	r4, r1
 1164 0006 1546     		mov	r5, r2
 617:../src/pmc/pmc.c **** 
 1165              		.loc 1 617 0
 1166 0008 FFF7FEFF 		bl	pmc_disable_pllbck
 1167              	.LVL78:
 624:../src/pmc/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 1168              		.loc 1 624 0
 1169 000c EAB2     		uxtb	r2, r5
 1170 000e 2402     		lsls	r4, r4, #8
 1171              	.LVL79:
 1172 0010 04F47C54 		and	r4, r4, #16128
 1173 0014 2243     		orrs	r2, r2, r4
 625:../src/pmc/pmc.c **** #endif
 1174              		.loc 1 625 0
 1175 0016 0648     		ldr	r0, .L127
 1176 0018 00EA0640 		and	r0, r0, r6, lsl #16
 1177 001c 0243     		orrs	r2, r2, r0
 623:../src/pmc/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 1178              		.loc 1 623 0
 1179 001e 054B     		ldr	r3, .L127+4
 1180 0020 DA62     		str	r2, [r3, #44]
 1181              	.L125:
 627:../src/pmc/pmc.c **** }
 1182              		.loc 1 627 0 discriminator 1
 1183 0022 044B     		ldr	r3, .L127+4
 1184 0024 9B6E     		ldr	r3, [r3, #104]
 1185 0026 13F0040F 		tst	r3, #4
 1186 002a FAD0     		beq	.L125
 628:../src/pmc/pmc.c **** 
 1187              		.loc 1 628 0
 1188 002c 70BD     		pop	{r4, r5, r6, pc}
 1189              	.LVL80:
 1190              	.L128:
 1191 002e 00BF     		.align	2
 1192              	.L127:
 1193 0030 0000FF07 		.word	134152192
 1194 0034 00040E40 		.word	1074660352
 1195              		.cfi_endproc
 1196              	.LFE97:
 1198              		.section	.text.pmc_is_locked_pllbck,"ax",%progbits
 1199              		.align	2
 1200              		.global	pmc_is_locked_pllbck
 1201              		.thumb
 1202              		.thumb_func
 1204              	pmc_is_locked_pllbck:
 1205              	.LFB99:
 636:../src/pmc/pmc.c **** }
 637:../src/pmc/pmc.c **** 
 638:../src/pmc/pmc.c **** /**
 639:../src/pmc/pmc.c ****  * \brief Is PLLB locked?
 640:../src/pmc/pmc.c ****  *
 641:../src/pmc/pmc.c ****  * \retval 0 Not locked.
 642:../src/pmc/pmc.c ****  * \retval 1 Locked.
 643:../src/pmc/pmc.c ****  */
 644:../src/pmc/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 645:../src/pmc/pmc.c **** {
 1206              		.loc 1 645 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 646:../src/pmc/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 1211              		.loc 1 646 0
 1212 0000 024B     		ldr	r3, .L130
 1213 0002 986E     		ldr	r0, [r3, #104]
 647:../src/pmc/pmc.c **** }
 1214              		.loc 1 647 0
 1215 0004 00F00400 		and	r0, r0, #4
 1216 0008 7047     		bx	lr
 1217              	.L131:
 1218 000a 00BF     		.align	2
 1219              	.L130:
 1220 000c 00040E40 		.word	1074660352
 1221              		.cfi_endproc
 1222              	.LFE99:
 1224              		.section	.text.pmc_enable_periph_clk,"ax",%progbits
 1225              		.align	2
 1226              		.global	pmc_enable_periph_clk
 1227              		.thumb
 1228              		.thumb_func
 1230              	pmc_enable_periph_clk:
 1231              	.LFB100:
 648:../src/pmc/pmc.c **** #endif
 649:../src/pmc/pmc.c **** 
 650:../src/pmc/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 651:../src/pmc/pmc.c **** /**
 652:../src/pmc/pmc.c ****  * \brief Enable UPLL clock.
 653:../src/pmc/pmc.c ****  */
 654:../src/pmc/pmc.c **** void pmc_enable_upll_clock(void)
 655:../src/pmc/pmc.c **** {
 656:../src/pmc/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 657:../src/pmc/pmc.c **** 
 658:../src/pmc/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 659:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 660:../src/pmc/pmc.c **** }
 661:../src/pmc/pmc.c **** 
 662:../src/pmc/pmc.c **** /**
 663:../src/pmc/pmc.c ****  * \brief Disable UPLL clock.
 664:../src/pmc/pmc.c ****  */
 665:../src/pmc/pmc.c **** void pmc_disable_upll_clock(void)
 666:../src/pmc/pmc.c **** {
 667:../src/pmc/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 668:../src/pmc/pmc.c **** }
 669:../src/pmc/pmc.c **** 
 670:../src/pmc/pmc.c **** /**
 671:../src/pmc/pmc.c ****  * \brief Is UPLL locked?
 672:../src/pmc/pmc.c ****  *
 673:../src/pmc/pmc.c ****  * \retval 0 Not locked.
 674:../src/pmc/pmc.c ****  * \retval 1 Locked.
 675:../src/pmc/pmc.c ****  */
 676:../src/pmc/pmc.c **** uint32_t pmc_is_locked_upll(void)
 677:../src/pmc/pmc.c **** {
 678:../src/pmc/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 679:../src/pmc/pmc.c **** }
 680:../src/pmc/pmc.c **** #endif
 681:../src/pmc/pmc.c **** 
 682:../src/pmc/pmc.c **** /**
 683:../src/pmc/pmc.c ****  * \brief Enable the specified peripheral clock.
 684:../src/pmc/pmc.c ****  *
 685:../src/pmc/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 686:../src/pmc/pmc.c ****  *
 687:../src/pmc/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 688:../src/pmc/pmc.c ****  *
 689:../src/pmc/pmc.c ****  * \retval 0 Success.
 690:../src/pmc/pmc.c ****  * \retval 1 Invalid parameter.
 691:../src/pmc/pmc.c ****  */
 692:../src/pmc/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 693:../src/pmc/pmc.c **** {
 1232              		.loc 1 693 0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              		@ link register save eliminated.
 1237              	.LVL81:
 694:../src/pmc/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1238              		.loc 1 694 0
 1239 0000 2228     		cmp	r0, #34
 1240 0002 1ED8     		bhi	.L135
 695:../src/pmc/pmc.c **** 		return 1;
 696:../src/pmc/pmc.c **** 	}
 697:../src/pmc/pmc.c **** 
 698:../src/pmc/pmc.c **** 	if (ul_id < 32) {
 1241              		.loc 1 698 0
 1242 0004 1F28     		cmp	r0, #31
 1243 0006 0CD8     		bhi	.L134
 699:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 1244              		.loc 1 699 0
 1245 0008 114B     		ldr	r3, .L138
 1246 000a 9A69     		ldr	r2, [r3, #24]
 1247 000c 0123     		movs	r3, #1
 1248 000e 8340     		lsls	r3, r3, r0
 1249 0010 9343     		bics	r3, r3, r2
 1250 0012 18D0     		beq	.L136
 700:../src/pmc/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 1251              		.loc 1 700 0
 1252 0014 0123     		movs	r3, #1
 1253 0016 03FA00F0 		lsl	r0, r3, r0
 1254              	.LVL82:
 1255 001a 0D4B     		ldr	r3, .L138
 1256 001c 1861     		str	r0, [r3, #16]
 701:../src/pmc/pmc.c **** 		}
 702:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 |
 703:../src/pmc/pmc.c **** 	} else {
 704:../src/pmc/pmc.c **** 		ul_id -= 32;
 705:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 706:../src/pmc/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 707:../src/pmc/pmc.c **** 		}
 708:../src/pmc/pmc.c **** #endif
 709:../src/pmc/pmc.c **** 	}
 710:../src/pmc/pmc.c **** 
 711:../src/pmc/pmc.c **** 	return 0;
 1257              		.loc 1 711 0
 1258 001e 0020     		movs	r0, #0
 1259 0020 7047     		bx	lr
 1260              	.LVL83:
 1261              	.L134:
 704:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 1262              		.loc 1 704 0
 1263 0022 2038     		subs	r0, r0, #32
 1264              	.LVL84:
 705:../src/pmc/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 1265              		.loc 1 705 0
 1266 0024 0A4B     		ldr	r3, .L138
 1267 0026 D3F80821 		ldr	r2, [r3, #264]
 1268 002a 0123     		movs	r3, #1
 1269 002c 8340     		lsls	r3, r3, r0
 1270 002e 9343     		bics	r3, r3, r2
 1271 0030 0BD0     		beq	.L137
 706:../src/pmc/pmc.c **** 		}
 1272              		.loc 1 706 0
 1273 0032 0123     		movs	r3, #1
 1274 0034 03FA00F0 		lsl	r0, r3, r0
 1275              	.LVL85:
 1276 0038 054B     		ldr	r3, .L138
 1277 003a C3F80001 		str	r0, [r3, #256]
 1278              		.loc 1 711 0
 1279 003e 0020     		movs	r0, #0
 1280 0040 7047     		bx	lr
 1281              	.LVL86:
 1282              	.L135:
 695:../src/pmc/pmc.c **** 	}
 1283              		.loc 1 695 0
 1284 0042 0120     		movs	r0, #1
 1285              	.LVL87:
 1286 0044 7047     		bx	lr
 1287              	.LVL88:
 1288              	.L136:
 1289              		.loc 1 711 0
 1290 0046 0020     		movs	r0, #0
 1291              	.LVL89:
 1292 0048 7047     		bx	lr
 1293              	.LVL90:
 1294              	.L137:
 1295 004a 0020     		movs	r0, #0
 1296              	.LVL91:
 712:../src/pmc/pmc.c **** }
 1297              		.loc 1 712 0
 1298 004c 7047     		bx	lr
 1299              	.L139:
 1300 004e 00BF     		.align	2
 1301              	.L138:
 1302 0050 00040E40 		.word	1074660352
 1303              		.cfi_endproc
 1304              	.LFE100:
 1306              		.section	.text.pmc_disable_periph_clk,"ax",%progbits
 1307              		.align	2
 1308              		.global	pmc_disable_periph_clk
 1309              		.thumb
 1310              		.thumb_func
 1312              	pmc_disable_periph_clk:
 1313              	.LFB101:
 713:../src/pmc/pmc.c **** 
 714:../src/pmc/pmc.c **** /**
 715:../src/pmc/pmc.c ****  * \brief Disable the specified peripheral clock.
 716:../src/pmc/pmc.c ****  *
 717:../src/pmc/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 718:../src/pmc/pmc.c ****  *
 719:../src/pmc/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 720:../src/pmc/pmc.c ****  *
 721:../src/pmc/pmc.c ****  * \retval 0 Success.
 722:../src/pmc/pmc.c ****  * \retval 1 Invalid parameter.
 723:../src/pmc/pmc.c ****  */
 724:../src/pmc/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 725:../src/pmc/pmc.c **** {
 1314              		.loc 1 725 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 1318              		@ link register save eliminated.
 1319              	.LVL92:
 726:../src/pmc/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1320              		.loc 1 726 0
 1321 0000 2228     		cmp	r0, #34
 1322 0002 1ED8     		bhi	.L143
 727:../src/pmc/pmc.c **** 		return 1;
 728:../src/pmc/pmc.c **** 	}
 729:../src/pmc/pmc.c **** 
 730:../src/pmc/pmc.c **** 	if (ul_id < 32) {
 1323              		.loc 1 730 0
 1324 0004 1F28     		cmp	r0, #31
 1325 0006 0CD8     		bhi	.L142
 731:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 1326              		.loc 1 731 0
 1327 0008 114B     		ldr	r3, .L146
 1328 000a 9A69     		ldr	r2, [r3, #24]
 1329 000c 0123     		movs	r3, #1
 1330 000e 8340     		lsls	r3, r3, r0
 1331 0010 9343     		bics	r3, r3, r2
 1332 0012 18D1     		bne	.L144
 732:../src/pmc/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 1333              		.loc 1 732 0
 1334 0014 0123     		movs	r3, #1
 1335 0016 03FA00F0 		lsl	r0, r3, r0
 1336              	.LVL93:
 1337 001a 0D4B     		ldr	r3, .L146
 1338 001c 5861     		str	r0, [r3, #20]
 733:../src/pmc/pmc.c **** 		}
 734:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
 735:../src/pmc/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 736:../src/pmc/pmc.c **** 	} else {
 737:../src/pmc/pmc.c **** 		ul_id -= 32;
 738:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 739:../src/pmc/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 740:../src/pmc/pmc.c **** 		}
 741:../src/pmc/pmc.c **** #endif
 742:../src/pmc/pmc.c **** 	}
 743:../src/pmc/pmc.c **** 	return 0;
 1339              		.loc 1 743 0
 1340 001e 0020     		movs	r0, #0
 1341 0020 7047     		bx	lr
 1342              	.LVL94:
 1343              	.L142:
 737:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 1344              		.loc 1 737 0
 1345 0022 2038     		subs	r0, r0, #32
 1346              	.LVL95:
 738:../src/pmc/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 1347              		.loc 1 738 0
 1348 0024 0A4B     		ldr	r3, .L146
 1349 0026 D3F80821 		ldr	r2, [r3, #264]
 1350 002a 0123     		movs	r3, #1
 1351 002c 8340     		lsls	r3, r3, r0
 1352 002e 9343     		bics	r3, r3, r2
 1353 0030 0BD1     		bne	.L145
 739:../src/pmc/pmc.c **** 		}
 1354              		.loc 1 739 0
 1355 0032 0123     		movs	r3, #1
 1356 0034 03FA00F0 		lsl	r0, r3, r0
 1357              	.LVL96:
 1358 0038 054B     		ldr	r3, .L146
 1359 003a C3F80401 		str	r0, [r3, #260]
 1360              		.loc 1 743 0
 1361 003e 0020     		movs	r0, #0
 1362 0040 7047     		bx	lr
 1363              	.LVL97:
 1364              	.L143:
 727:../src/pmc/pmc.c **** 	}
 1365              		.loc 1 727 0
 1366 0042 0120     		movs	r0, #1
 1367              	.LVL98:
 1368 0044 7047     		bx	lr
 1369              	.LVL99:
 1370              	.L144:
 1371              		.loc 1 743 0
 1372 0046 0020     		movs	r0, #0
 1373              	.LVL100:
 1374 0048 7047     		bx	lr
 1375              	.LVL101:
 1376              	.L145:
 1377 004a 0020     		movs	r0, #0
 1378              	.LVL102:
 744:../src/pmc/pmc.c **** }
 1379              		.loc 1 744 0
 1380 004c 7047     		bx	lr
 1381              	.L147:
 1382 004e 00BF     		.align	2
 1383              	.L146:
 1384 0050 00040E40 		.word	1074660352
 1385              		.cfi_endproc
 1386              	.LFE101:
 1388              		.section	.text.pmc_enable_all_periph_clk,"ax",%progbits
 1389              		.align	2
 1390              		.global	pmc_enable_all_periph_clk
 1391              		.thumb
 1392              		.thumb_func
 1394              	pmc_enable_all_periph_clk:
 1395              	.LFB102:
 745:../src/pmc/pmc.c **** 
 746:../src/pmc/pmc.c **** /**
 747:../src/pmc/pmc.c ****  * \brief Enable all peripheral clocks.
 748:../src/pmc/pmc.c ****  */
 749:../src/pmc/pmc.c **** void pmc_enable_all_periph_clk(void)
 750:../src/pmc/pmc.c **** {
 1396              		.loc 1 750 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 751:../src/pmc/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 1401              		.loc 1 751 0
 1402 0000 6FF00302 		mvn	r2, #3
 1403 0004 0A4B     		ldr	r3, .L151
 1404 0006 1A61     		str	r2, [r3, #16]
 1405              	.L149:
 752:../src/pmc/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 1406              		.loc 1 752 0 discriminator 1
 1407 0008 094B     		ldr	r3, .L151
 1408 000a 9B69     		ldr	r3, [r3, #24]
 1409 000c 23F00303 		bic	r3, r3, #3
 1410 0010 13F1040F 		cmn	r3, #4
 1411 0014 F8D1     		bne	.L149
 753:../src/pmc/pmc.c **** 
 754:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71  \
 755:../src/pmc/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 756:../src/pmc/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 1412              		.loc 1 756 0
 1413 0016 4FF0FF32 		mov	r2, #-1
 1414 001a 054B     		ldr	r3, .L151
 1415 001c C3F80021 		str	r2, [r3, #256]
 1416              	.L150:
 757:../src/pmc/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 1417              		.loc 1 757 0 discriminator 1
 1418 0020 034B     		ldr	r3, .L151
 1419 0022 D3F80831 		ldr	r3, [r3, #264]
 1420 0026 B3F1FF3F 		cmp	r3, #-1
 1421 002a F9D1     		bne	.L150
 758:../src/pmc/pmc.c **** #endif
 759:../src/pmc/pmc.c **** }
 1422              		.loc 1 759 0
 1423 002c 7047     		bx	lr
 1424              	.L152:
 1425 002e 00BF     		.align	2
 1426              	.L151:
 1427 0030 00040E40 		.word	1074660352
 1428              		.cfi_endproc
 1429              	.LFE102:
 1431              		.section	.text.pmc_disable_all_periph_clk,"ax",%progbits
 1432              		.align	2
 1433              		.global	pmc_disable_all_periph_clk
 1434              		.thumb
 1435              		.thumb_func
 1437              	pmc_disable_all_periph_clk:
 1438              	.LFB103:
 760:../src/pmc/pmc.c **** 
 761:../src/pmc/pmc.c **** /**
 762:../src/pmc/pmc.c ****  * \brief Disable all peripheral clocks.
 763:../src/pmc/pmc.c ****  */
 764:../src/pmc/pmc.c **** void pmc_disable_all_periph_clk(void)
 765:../src/pmc/pmc.c **** {
 1439              		.loc 1 765 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              		@ link register save eliminated.
 766:../src/pmc/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 1444              		.loc 1 766 0
 1445 0000 6FF00302 		mvn	r2, #3
 1446 0004 084B     		ldr	r3, .L156
 1447 0006 5A61     		str	r2, [r3, #20]
 1448              	.L154:
 767:../src/pmc/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 1449              		.loc 1 767 0 discriminator 1
 1450 0008 074B     		ldr	r3, .L156
 1451 000a 9B69     		ldr	r3, [r3, #24]
 1452 000c 33F00303 		bics	r3, r3, #3
 1453 0010 FAD1     		bne	.L154
 768:../src/pmc/pmc.c **** 
 769:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 770:../src/pmc/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 771:../src/pmc/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 1454              		.loc 1 771 0
 1455 0012 4FF0FF32 		mov	r2, #-1
 1456 0016 044B     		ldr	r3, .L156
 1457 0018 C3F80421 		str	r2, [r3, #260]
 1458              	.L155:
 772:../src/pmc/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 1459              		.loc 1 772 0 discriminator 1
 1460 001c 024B     		ldr	r3, .L156
 1461 001e D3F80831 		ldr	r3, [r3, #264]
 1462 0022 002B     		cmp	r3, #0
 1463 0024 FAD1     		bne	.L155
 773:../src/pmc/pmc.c **** #endif
 774:../src/pmc/pmc.c **** }
 1464              		.loc 1 774 0
 1465 0026 7047     		bx	lr
 1466              	.L157:
 1467              		.align	2
 1468              	.L156:
 1469 0028 00040E40 		.word	1074660352
 1470              		.cfi_endproc
 1471              	.LFE103:
 1473              		.section	.text.pmc_is_periph_clk_enabled,"ax",%progbits
 1474              		.align	2
 1475              		.global	pmc_is_periph_clk_enabled
 1476              		.thumb
 1477              		.thumb_func
 1479              	pmc_is_periph_clk_enabled:
 1480              	.LFB104:
 775:../src/pmc/pmc.c **** 
 776:../src/pmc/pmc.c **** /**
 777:../src/pmc/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 778:../src/pmc/pmc.c ****  *
 779:../src/pmc/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 780:../src/pmc/pmc.c ****  *
 781:../src/pmc/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 782:../src/pmc/pmc.c ****  *
 783:../src/pmc/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 784:../src/pmc/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 785:../src/pmc/pmc.c ****  */
 786:../src/pmc/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 787:../src/pmc/pmc.c **** {
 1481              		.loc 1 787 0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 0, uses_anonymous_args = 0
 1485              		@ link register save eliminated.
 1486              	.LVL103:
 788:../src/pmc/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1487              		.loc 1 788 0
 1488 0000 2228     		cmp	r0, #34
 1489 0002 15D8     		bhi	.L161
 789:../src/pmc/pmc.c **** 		return 0;
 790:../src/pmc/pmc.c **** 	}
 791:../src/pmc/pmc.c **** 
 792:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 793:../src/pmc/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 794:../src/pmc/pmc.c **** 	if (ul_id < 32) {
 1490              		.loc 1 794 0
 1491 0004 1F28     		cmp	r0, #31
 1492 0006 08D8     		bhi	.L160
 795:../src/pmc/pmc.c **** #endif
 796:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 1493              		.loc 1 796 0
 1494 0008 0A4B     		ldr	r3, .L162
 1495 000a 9B69     		ldr	r3, [r3, #24]
 1496 000c 0122     		movs	r2, #1
 1497 000e 02FA00F0 		lsl	r0, r2, r0
 1498              	.LVL104:
 1499 0012 1840     		ands	r0, r3, r0
 1500 0014 0DD0     		beq	.L159
 797:../src/pmc/pmc.c **** 			return 1;
 1501              		.loc 1 797 0
 1502 0016 1046     		mov	r0, r2
 1503 0018 7047     		bx	lr
 1504              	.LVL105:
 1505              	.L160:
 798:../src/pmc/pmc.c **** 		} else {
 799:../src/pmc/pmc.c **** 			return 0;
 800:../src/pmc/pmc.c **** 		}
 801:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 802:../src/pmc/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 803:../src/pmc/pmc.c **** 	} else {
 804:../src/pmc/pmc.c **** 		ul_id -= 32;
 1506              		.loc 1 804 0
 1507 001a 2038     		subs	r0, r0, #32
 1508              	.LVL106:
 805:../src/pmc/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 1509              		.loc 1 805 0
 1510 001c 054B     		ldr	r3, .L162
 1511 001e D3F80831 		ldr	r3, [r3, #264]
 1512 0022 0122     		movs	r2, #1
 1513 0024 02FA00F0 		lsl	r0, r2, r0
 1514              	.LVL107:
 1515 0028 1840     		ands	r0, r3, r0
 1516 002a 02D0     		beq	.L159
 806:../src/pmc/pmc.c **** 			return 1;
 1517              		.loc 1 806 0
 1518 002c 1046     		mov	r0, r2
 1519 002e 7047     		bx	lr
 1520              	.LVL108:
 1521              	.L161:
 789:../src/pmc/pmc.c **** 	}
 1522              		.loc 1 789 0
 1523 0030 0020     		movs	r0, #0
 1524              	.LVL109:
 1525              	.L159:
 807:../src/pmc/pmc.c **** 		} else {
 808:../src/pmc/pmc.c **** 			return 0;
 809:../src/pmc/pmc.c **** 		}
 810:../src/pmc/pmc.c **** 	}
 811:../src/pmc/pmc.c **** #endif
 812:../src/pmc/pmc.c **** }
 1526              		.loc 1 812 0
 1527 0032 7047     		bx	lr
 1528              	.L163:
 1529              		.align	2
 1530              	.L162:
 1531 0034 00040E40 		.word	1074660352
 1532              		.cfi_endproc
 1533              	.LFE104:
 1535              		.section	.text.pmc_pck_set_prescaler,"ax",%progbits
 1536              		.align	2
 1537              		.global	pmc_pck_set_prescaler
 1538              		.thumb
 1539              		.thumb_func
 1541              	pmc_pck_set_prescaler:
 1542              	.LFB105:
 813:../src/pmc/pmc.c **** 
 814:../src/pmc/pmc.c **** /**
 815:../src/pmc/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 816:../src/pmc/pmc.c ****  *
 817:../src/pmc/pmc.c ****  * \param ul_id Peripheral ID.
 818:../src/pmc/pmc.c ****  * \param ul_pres Prescaler value.
 819:../src/pmc/pmc.c ****  */
 820:../src/pmc/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 821:../src/pmc/pmc.c **** {
 1543              		.loc 1 821 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              		@ link register save eliminated.
 1548              	.LVL110:
 1549 0000 10B4     		push	{r4}
 1550              		.cfi_def_cfa_offset 4
 1551              		.cfi_offset 4, -4
 822:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 823:../src/pmc/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 1552              		.loc 1 823 0
 1553 0002 0B4A     		ldr	r2, .L168
 1554 0004 00F11004 		add	r4, r0, #16
 1555 0008 52F82430 		ldr	r3, [r2, r4, lsl #2]
 1556 000c 23F07003 		bic	r3, r3, #112
 1557 0010 1943     		orrs	r1, r1, r3
 1558              	.LVL111:
 822:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1559              		.loc 1 822 0
 1560 0012 42F82410 		str	r1, [r2, r4, lsl #2]
 1561              	.L166:
 824:../src/pmc/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1562              		.loc 1 824 0
 1563 0016 064B     		ldr	r3, .L168
 1564 0018 1A68     		ldr	r2, [r3]
 1565 001a 4FF48073 		mov	r3, #256
 1566 001e 8340     		lsls	r3, r3, r0
 1567 0020 1A42     		tst	r2, r3
 1568 0022 03D0     		beq	.L164
 825:../src/pmc/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 1569              		.loc 1 825 0
 1570 0024 024A     		ldr	r2, .L168
 1571 0026 926E     		ldr	r2, [r2, #104]
 1572 0028 1342     		tst	r3, r2
 1573 002a F4D0     		beq	.L166
 1574              	.L164:
 826:../src/pmc/pmc.c **** }
 1575              		.loc 1 826 0
 1576 002c 10BC     		pop	{r4}
 1577              		.cfi_restore 4
 1578              		.cfi_def_cfa_offset 0
 1579 002e 7047     		bx	lr
 1580              	.L169:
 1581              		.align	2
 1582              	.L168:
 1583 0030 00040E40 		.word	1074660352
 1584              		.cfi_endproc
 1585              	.LFE105:
 1587              		.section	.text.pmc_pck_set_source,"ax",%progbits
 1588              		.align	2
 1589              		.global	pmc_pck_set_source
 1590              		.thumb
 1591              		.thumb_func
 1593              	pmc_pck_set_source:
 1594              	.LFB106:
 827:../src/pmc/pmc.c **** 
 828:../src/pmc/pmc.c **** /**
 829:../src/pmc/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 830:../src/pmc/pmc.c ****  *
 831:../src/pmc/pmc.c ****  * \param ul_id Peripheral ID.
 832:../src/pmc/pmc.c ****  * \param ul_source Source selection value.
 833:../src/pmc/pmc.c ****  */
 834:../src/pmc/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 835:../src/pmc/pmc.c **** {
 1595              		.loc 1 835 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599              		@ link register save eliminated.
 1600              	.LVL112:
 1601 0000 10B4     		push	{r4}
 1602              		.cfi_def_cfa_offset 4
 1603              		.cfi_offset 4, -4
 836:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 837:../src/pmc/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 1604              		.loc 1 837 0
 1605 0002 0B4A     		ldr	r2, .L174
 1606 0004 00F11004 		add	r4, r0, #16
 1607 0008 52F82430 		ldr	r3, [r2, r4, lsl #2]
 1608 000c 23F00703 		bic	r3, r3, #7
 1609 0010 1943     		orrs	r1, r1, r3
 1610              	.LVL113:
 836:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1611              		.loc 1 836 0
 1612 0012 42F82410 		str	r1, [r2, r4, lsl #2]
 1613              	.L172:
 838:../src/pmc/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1614              		.loc 1 838 0
 1615 0016 064B     		ldr	r3, .L174
 1616 0018 1A68     		ldr	r2, [r3]
 1617 001a 4FF48073 		mov	r3, #256
 1618 001e 8340     		lsls	r3, r3, r0
 1619 0020 1A42     		tst	r2, r3
 1620 0022 03D0     		beq	.L170
 839:../src/pmc/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 1621              		.loc 1 839 0
 1622 0024 024A     		ldr	r2, .L174
 1623 0026 926E     		ldr	r2, [r2, #104]
 1624 0028 1342     		tst	r3, r2
 1625 002a F4D0     		beq	.L172
 1626              	.L170:
 840:../src/pmc/pmc.c **** }
 1627              		.loc 1 840 0
 1628 002c 10BC     		pop	{r4}
 1629              		.cfi_restore 4
 1630              		.cfi_def_cfa_offset 0
 1631 002e 7047     		bx	lr
 1632              	.L175:
 1633              		.align	2
 1634              	.L174:
 1635 0030 00040E40 		.word	1074660352
 1636              		.cfi_endproc
 1637              	.LFE106:
 1639              		.section	.text.pmc_switch_pck_to_sclk,"ax",%progbits
 1640              		.align	2
 1641              		.global	pmc_switch_pck_to_sclk
 1642              		.thumb
 1643              		.thumb_func
 1645              	pmc_switch_pck_to_sclk:
 1646              	.LFB107:
 841:../src/pmc/pmc.c **** 
 842:../src/pmc/pmc.c **** /**
 843:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 844:../src/pmc/pmc.c ****  *
 845:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 846:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 847:../src/pmc/pmc.c ****  *
 848:../src/pmc/pmc.c ****  * \retval 0 Success.
 849:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 850:../src/pmc/pmc.c ****  */
 851:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 852:../src/pmc/pmc.c **** {
 1647              		.loc 1 852 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 1651              		@ link register save eliminated.
 1652              	.LVL114:
 853:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 854:../src/pmc/pmc.c **** 
 855:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 1653              		.loc 1 855 0
 1654 0000 00F11002 		add	r2, r0, #16
 1655 0004 094B     		ldr	r3, .L181
 1656 0006 43F82210 		str	r1, [r3, r2, lsl #2]
 1657              	.LVL115:
 856:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1658              		.loc 1 856 0
 1659 000a 4FF40062 		mov	r2, #2048
 1660 000e 01E0     		b	.L177
 1661              	.LVL116:
 1662              	.L179:
 857:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 858:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1663              		.loc 1 858 0
 1664 0010 4AB1     		cbz	r2, .L180
 857:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1665              		.loc 1 857 0 discriminator 1
 1666 0012 013A     		subs	r2, r2, #1
 1667              	.LVL117:
 1668              	.L177:
 1669 0014 054B     		ldr	r3, .L181
 1670              	.LVL118:
 1671 0016 996E     		ldr	r1, [r3, #104]
 1672 0018 4FF48073 		mov	r3, #256
 1673              	.LVL119:
 1674 001c 8340     		lsls	r3, r3, r0
 856:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1675              		.loc 1 856 0 discriminator 1
 1676 001e 1942     		tst	r1, r3
 1677 0020 F6D0     		beq	.L179
 859:../src/pmc/pmc.c **** 			return 1;
 860:../src/pmc/pmc.c **** 		}
 861:../src/pmc/pmc.c **** 	}
 862:../src/pmc/pmc.c **** 
 863:../src/pmc/pmc.c **** 	return 0;
 1678              		.loc 1 863 0
 1679 0022 0020     		movs	r0, #0
 1680              	.LVL120:
 1681 0024 7047     		bx	lr
 1682              	.LVL121:
 1683              	.L180:
 859:../src/pmc/pmc.c **** 			return 1;
 1684              		.loc 1 859 0
 1685 0026 0120     		movs	r0, #1
 1686              	.LVL122:
 864:../src/pmc/pmc.c **** }
 1687              		.loc 1 864 0
 1688 0028 7047     		bx	lr
 1689              	.L182:
 1690 002a 00BF     		.align	2
 1691              	.L181:
 1692 002c 00040E40 		.word	1074660352
 1693              		.cfi_endproc
 1694              	.LFE107:
 1696              		.section	.text.pmc_switch_pck_to_mainck,"ax",%progbits
 1697              		.align	2
 1698              		.global	pmc_switch_pck_to_mainck
 1699              		.thumb
 1700              		.thumb_func
 1702              	pmc_switch_pck_to_mainck:
 1703              	.LFB108:
 865:../src/pmc/pmc.c **** 
 866:../src/pmc/pmc.c **** /**
 867:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 868:../src/pmc/pmc.c ****  *
 869:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 870:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 871:../src/pmc/pmc.c ****  *
 872:../src/pmc/pmc.c ****  * \retval 0 Success.
 873:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 874:../src/pmc/pmc.c ****  */
 875:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 876:../src/pmc/pmc.c **** {
 1704              		.loc 1 876 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              		@ link register save eliminated.
 1709              	.LVL123:
 877:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 878:../src/pmc/pmc.c **** 
 879:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 1710              		.loc 1 879 0
 1711 0000 41F00101 		orr	r1, r1, #1
 1712              	.LVL124:
 1713 0004 00F11002 		add	r2, r0, #16
 1714 0008 094B     		ldr	r3, .L188
 1715 000a 43F82210 		str	r1, [r3, r2, lsl #2]
 1716              	.LVL125:
 880:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1717              		.loc 1 880 0
 1718 000e 4FF40062 		mov	r2, #2048
 1719 0012 01E0     		b	.L184
 1720              	.LVL126:
 1721              	.L186:
 881:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 882:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1722              		.loc 1 882 0
 1723 0014 4AB1     		cbz	r2, .L187
 881:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1724              		.loc 1 881 0 discriminator 1
 1725 0016 013A     		subs	r2, r2, #1
 1726              	.LVL127:
 1727              	.L184:
 1728 0018 054B     		ldr	r3, .L188
 1729 001a 996E     		ldr	r1, [r3, #104]
 1730 001c 4FF48073 		mov	r3, #256
 1731 0020 8340     		lsls	r3, r3, r0
 880:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1732              		.loc 1 880 0 discriminator 1
 1733 0022 1942     		tst	r1, r3
 1734 0024 F6D0     		beq	.L186
 883:../src/pmc/pmc.c **** 			return 1;
 884:../src/pmc/pmc.c **** 		}
 885:../src/pmc/pmc.c **** 	}
 886:../src/pmc/pmc.c **** 
 887:../src/pmc/pmc.c **** 	return 0;
 1735              		.loc 1 887 0
 1736 0026 0020     		movs	r0, #0
 1737              	.LVL128:
 1738 0028 7047     		bx	lr
 1739              	.LVL129:
 1740              	.L187:
 883:../src/pmc/pmc.c **** 			return 1;
 1741              		.loc 1 883 0
 1742 002a 0120     		movs	r0, #1
 1743              	.LVL130:
 888:../src/pmc/pmc.c **** }
 1744              		.loc 1 888 0
 1745 002c 7047     		bx	lr
 1746              	.L189:
 1747 002e 00BF     		.align	2
 1748              	.L188:
 1749 0030 00040E40 		.word	1074660352
 1750              		.cfi_endproc
 1751              	.LFE108:
 1753              		.section	.text.pmc_switch_pck_to_pllack,"ax",%progbits
 1754              		.align	2
 1755              		.global	pmc_switch_pck_to_pllack
 1756              		.thumb
 1757              		.thumb_func
 1759              	pmc_switch_pck_to_pllack:
 1760              	.LFB109:
 889:../src/pmc/pmc.c **** 
 890:../src/pmc/pmc.c **** /**
 891:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 892:../src/pmc/pmc.c ****  *
 893:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 894:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 895:../src/pmc/pmc.c ****  *
 896:../src/pmc/pmc.c ****  * \retval 0 Success.
 897:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 898:../src/pmc/pmc.c ****  */
 899:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 900:../src/pmc/pmc.c **** {
 1761              		.loc 1 900 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 0
 1764              		@ frame_needed = 0, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766              	.LVL131:
 901:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 902:../src/pmc/pmc.c **** 
 903:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 1767              		.loc 1 903 0
 1768 0000 41F00201 		orr	r1, r1, #2
 1769              	.LVL132:
 1770 0004 00F11002 		add	r2, r0, #16
 1771 0008 094B     		ldr	r3, .L195
 1772 000a 43F82210 		str	r1, [r3, r2, lsl #2]
 1773              	.LVL133:
 904:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1774              		.loc 1 904 0
 1775 000e 4FF40062 		mov	r2, #2048
 1776 0012 01E0     		b	.L191
 1777              	.LVL134:
 1778              	.L193:
 905:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 906:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1779              		.loc 1 906 0
 1780 0014 4AB1     		cbz	r2, .L194
 905:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1781              		.loc 1 905 0 discriminator 1
 1782 0016 013A     		subs	r2, r2, #1
 1783              	.LVL135:
 1784              	.L191:
 1785 0018 054B     		ldr	r3, .L195
 1786 001a 996E     		ldr	r1, [r3, #104]
 1787 001c 4FF48073 		mov	r3, #256
 1788 0020 8340     		lsls	r3, r3, r0
 904:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1789              		.loc 1 904 0 discriminator 1
 1790 0022 1942     		tst	r1, r3
 1791 0024 F6D0     		beq	.L193
 907:../src/pmc/pmc.c **** 			return 1;
 908:../src/pmc/pmc.c **** 		}
 909:../src/pmc/pmc.c **** 	}
 910:../src/pmc/pmc.c **** 
 911:../src/pmc/pmc.c **** 	return 0;
 1792              		.loc 1 911 0
 1793 0026 0020     		movs	r0, #0
 1794              	.LVL136:
 1795 0028 7047     		bx	lr
 1796              	.LVL137:
 1797              	.L194:
 907:../src/pmc/pmc.c **** 			return 1;
 1798              		.loc 1 907 0
 1799 002a 0120     		movs	r0, #1
 1800              	.LVL138:
 912:../src/pmc/pmc.c **** }
 1801              		.loc 1 912 0
 1802 002c 7047     		bx	lr
 1803              	.L196:
 1804 002e 00BF     		.align	2
 1805              	.L195:
 1806 0030 00040E40 		.word	1074660352
 1807              		.cfi_endproc
 1808              	.LFE109:
 1810              		.section	.text.pmc_switch_pck_to_pllbck,"ax",%progbits
 1811              		.align	2
 1812              		.global	pmc_switch_pck_to_pllbck
 1813              		.thumb
 1814              		.thumb_func
 1816              	pmc_switch_pck_to_pllbck:
 1817              	.LFB110:
 913:../src/pmc/pmc.c **** 
 914:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 915:../src/pmc/pmc.c **** /**
 916:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 917:../src/pmc/pmc.c ****  *
 918:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 919:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 920:../src/pmc/pmc.c ****  *
 921:../src/pmc/pmc.c ****  * \retval 0 Success.
 922:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 923:../src/pmc/pmc.c ****  */
 924:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 925:../src/pmc/pmc.c **** {
 1818              		.loc 1 925 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
 1823              	.LVL139:
 926:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 927:../src/pmc/pmc.c **** 
 928:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 1824              		.loc 1 928 0
 1825 0000 41F00301 		orr	r1, r1, #3
 1826              	.LVL140:
 1827 0004 00F11002 		add	r2, r0, #16
 1828 0008 094B     		ldr	r3, .L202
 1829 000a 43F82210 		str	r1, [r3, r2, lsl #2]
 1830              	.LVL141:
 929:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1831              		.loc 1 929 0
 1832 000e 4FF40062 		mov	r2, #2048
 1833 0012 01E0     		b	.L198
 1834              	.LVL142:
 1835              	.L200:
 930:../src/pmc/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 931:../src/pmc/pmc.c **** 			--ul_timeout) {
 932:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1836              		.loc 1 932 0
 1837 0014 4AB1     		cbz	r2, .L201
 931:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1838              		.loc 1 931 0
 1839 0016 013A     		subs	r2, r2, #1
 1840              	.LVL143:
 1841              	.L198:
 930:../src/pmc/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 1842              		.loc 1 930 0 discriminator 1
 1843 0018 054B     		ldr	r3, .L202
 1844 001a 996E     		ldr	r1, [r3, #104]
 1845 001c 4FF48073 		mov	r3, #256
 1846 0020 8340     		lsls	r3, r3, r0
 929:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1847              		.loc 1 929 0 discriminator 1
 1848 0022 1942     		tst	r1, r3
 1849 0024 F6D0     		beq	.L200
 933:../src/pmc/pmc.c **** 			return 1;
 934:../src/pmc/pmc.c **** 		}
 935:../src/pmc/pmc.c **** 	}
 936:../src/pmc/pmc.c **** 
 937:../src/pmc/pmc.c **** 	return 0;
 1850              		.loc 1 937 0
 1851 0026 0020     		movs	r0, #0
 1852              	.LVL144:
 1853 0028 7047     		bx	lr
 1854              	.LVL145:
 1855              	.L201:
 933:../src/pmc/pmc.c **** 			return 1;
 1856              		.loc 1 933 0
 1857 002a 0120     		movs	r0, #1
 1858              	.LVL146:
 938:../src/pmc/pmc.c **** }
 1859              		.loc 1 938 0
 1860 002c 7047     		bx	lr
 1861              	.L203:
 1862 002e 00BF     		.align	2
 1863              	.L202:
 1864 0030 00040E40 		.word	1074660352
 1865              		.cfi_endproc
 1866              	.LFE110:
 1868              		.section	.text.pmc_switch_pck_to_mck,"ax",%progbits
 1869              		.align	2
 1870              		.global	pmc_switch_pck_to_mck
 1871              		.thumb
 1872              		.thumb_func
 1874              	pmc_switch_pck_to_mck:
 1875              	.LFB111:
 939:../src/pmc/pmc.c **** #endif
 940:../src/pmc/pmc.c **** 
 941:../src/pmc/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 942:../src/pmc/pmc.c **** /**
 943:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 944:../src/pmc/pmc.c ****  *
 945:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 946:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 947:../src/pmc/pmc.c ****  *
 948:../src/pmc/pmc.c ****  * \retval 0 Success.
 949:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 950:../src/pmc/pmc.c ****  */
 951:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 952:../src/pmc/pmc.c **** {
 953:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 954:../src/pmc/pmc.c **** 
 955:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 956:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 957:../src/pmc/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 958:../src/pmc/pmc.c **** 			--ul_timeout) {
 959:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 960:../src/pmc/pmc.c **** 			return 1;
 961:../src/pmc/pmc.c **** 		}
 962:../src/pmc/pmc.c **** 	}
 963:../src/pmc/pmc.c **** 
 964:../src/pmc/pmc.c **** 	return 0;
 965:../src/pmc/pmc.c **** }
 966:../src/pmc/pmc.c **** #endif
 967:../src/pmc/pmc.c **** 
 968:../src/pmc/pmc.c **** /**
 969:../src/pmc/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 970:../src/pmc/pmc.c ****  *
 971:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 972:../src/pmc/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 973:../src/pmc/pmc.c ****  *
 974:../src/pmc/pmc.c ****  * \retval 0 Success.
 975:../src/pmc/pmc.c ****  * \retval 1 Timeout error.
 976:../src/pmc/pmc.c ****  */
 977:../src/pmc/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
 978:../src/pmc/pmc.c **** {
 1876              		.loc 1 978 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881              	.LVL147:
 979:../src/pmc/pmc.c **** 	uint32_t ul_timeout;
 980:../src/pmc/pmc.c **** 
 981:../src/pmc/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 1882              		.loc 1 981 0
 1883 0000 41F00401 		orr	r1, r1, #4
 1884              	.LVL148:
 1885 0004 00F11002 		add	r2, r0, #16
 1886 0008 094B     		ldr	r3, .L209
 1887 000a 43F82210 		str	r1, [r3, r2, lsl #2]
 1888              	.LVL149:
 982:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1889              		.loc 1 982 0
 1890 000e 4FF40062 		mov	r2, #2048
 1891 0012 01E0     		b	.L205
 1892              	.LVL150:
 1893              	.L207:
 983:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 984:../src/pmc/pmc.c **** 		if (ul_timeout == 0) {
 1894              		.loc 1 984 0
 1895 0014 4AB1     		cbz	r2, .L208
 983:../src/pmc/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1896              		.loc 1 983 0 discriminator 1
 1897 0016 013A     		subs	r2, r2, #1
 1898              	.LVL151:
 1899              	.L205:
 1900 0018 054B     		ldr	r3, .L209
 1901 001a 996E     		ldr	r1, [r3, #104]
 1902 001c 4FF48073 		mov	r3, #256
 1903 0020 8340     		lsls	r3, r3, r0
 982:../src/pmc/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1904              		.loc 1 982 0 discriminator 1
 1905 0022 1942     		tst	r1, r3
 1906 0024 F6D0     		beq	.L207
 985:../src/pmc/pmc.c **** 			return 1;
 986:../src/pmc/pmc.c **** 		}
 987:../src/pmc/pmc.c **** 	}
 988:../src/pmc/pmc.c **** 
 989:../src/pmc/pmc.c **** 	return 0;
 1907              		.loc 1 989 0
 1908 0026 0020     		movs	r0, #0
 1909              	.LVL152:
 1910 0028 7047     		bx	lr
 1911              	.LVL153:
 1912              	.L208:
 985:../src/pmc/pmc.c **** 			return 1;
 1913              		.loc 1 985 0
 1914 002a 0120     		movs	r0, #1
 1915              	.LVL154:
 990:../src/pmc/pmc.c **** }
 1916              		.loc 1 990 0
 1917 002c 7047     		bx	lr
 1918              	.L210:
 1919 002e 00BF     		.align	2
 1920              	.L209:
 1921 0030 00040E40 		.word	1074660352
 1922              		.cfi_endproc
 1923              	.LFE111:
 1925              		.section	.text.pmc_enable_pck,"ax",%progbits
 1926              		.align	2
 1927              		.global	pmc_enable_pck
 1928              		.thumb
 1929              		.thumb_func
 1931              	pmc_enable_pck:
 1932              	.LFB112:
 991:../src/pmc/pmc.c **** 
 992:../src/pmc/pmc.c **** /**
 993:../src/pmc/pmc.c ****  * \brief Enable the specified programmable clock.
 994:../src/pmc/pmc.c ****  *
 995:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
 996:../src/pmc/pmc.c ****  */
 997:../src/pmc/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
 998:../src/pmc/pmc.c **** {
 1933              		.loc 1 998 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 0
 1936              		@ frame_needed = 0, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938              	.LVL155:
 999:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 1939              		.loc 1 999 0
 1940 0000 4FF48073 		mov	r3, #256
 1941 0004 03FA00F0 		lsl	r0, r3, r0
 1942              	.LVL156:
 1943 0008 014B     		ldr	r3, .L212
 1944 000a 1860     		str	r0, [r3]
 1945 000c 7047     		bx	lr
 1946              	.L213:
 1947 000e 00BF     		.align	2
 1948              	.L212:
 1949 0010 00040E40 		.word	1074660352
 1950              		.cfi_endproc
 1951              	.LFE112:
 1953              		.section	.text.pmc_disable_pck,"ax",%progbits
 1954              		.align	2
 1955              		.global	pmc_disable_pck
 1956              		.thumb
 1957              		.thumb_func
 1959              	pmc_disable_pck:
 1960              	.LFB113:
1000:../src/pmc/pmc.c **** }
1001:../src/pmc/pmc.c **** 
1002:../src/pmc/pmc.c **** /**
1003:../src/pmc/pmc.c ****  * \brief Disable the specified programmable clock.
1004:../src/pmc/pmc.c ****  *
1005:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
1006:../src/pmc/pmc.c ****  */
1007:../src/pmc/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
1008:../src/pmc/pmc.c **** {
 1961              		.loc 1 1008 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966              	.LVL157:
1009:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 1967              		.loc 1 1009 0
 1968 0000 4FF48073 		mov	r3, #256
 1969 0004 03FA00F0 		lsl	r0, r3, r0
 1970              	.LVL158:
 1971 0008 014B     		ldr	r3, .L215
 1972 000a 5860     		str	r0, [r3, #4]
 1973 000c 7047     		bx	lr
 1974              	.L216:
 1975 000e 00BF     		.align	2
 1976              	.L215:
 1977 0010 00040E40 		.word	1074660352
 1978              		.cfi_endproc
 1979              	.LFE113:
 1981              		.section	.text.pmc_enable_all_pck,"ax",%progbits
 1982              		.align	2
 1983              		.global	pmc_enable_all_pck
 1984              		.thumb
 1985              		.thumb_func
 1987              	pmc_enable_all_pck:
 1988              	.LFB114:
1010:../src/pmc/pmc.c **** }
1011:../src/pmc/pmc.c **** 
1012:../src/pmc/pmc.c **** /**
1013:../src/pmc/pmc.c ****  * \brief Enable all programmable clocks.
1014:../src/pmc/pmc.c ****  */
1015:../src/pmc/pmc.c **** void pmc_enable_all_pck(void)
1016:../src/pmc/pmc.c **** {
 1989              		.loc 1 1016 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993              		@ link register save eliminated.
1017:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 1994              		.loc 1 1017 0
 1995 0000 4FF4E062 		mov	r2, #1792
 1996 0004 014B     		ldr	r3, .L218
 1997 0006 1A60     		str	r2, [r3]
 1998 0008 7047     		bx	lr
 1999              	.L219:
 2000 000a 00BF     		.align	2
 2001              	.L218:
 2002 000c 00040E40 		.word	1074660352
 2003              		.cfi_endproc
 2004              	.LFE114:
 2006              		.section	.text.pmc_disable_all_pck,"ax",%progbits
 2007              		.align	2
 2008              		.global	pmc_disable_all_pck
 2009              		.thumb
 2010              		.thumb_func
 2012              	pmc_disable_all_pck:
 2013              	.LFB115:
1018:../src/pmc/pmc.c **** }
1019:../src/pmc/pmc.c **** 
1020:../src/pmc/pmc.c **** /**
1021:../src/pmc/pmc.c ****  * \brief Disable all programmable clocks.
1022:../src/pmc/pmc.c ****  */
1023:../src/pmc/pmc.c **** void pmc_disable_all_pck(void)
1024:../src/pmc/pmc.c **** {
 2014              		.loc 1 1024 0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 2018              		@ link register save eliminated.
1025:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 2019              		.loc 1 1025 0
 2020 0000 4FF4E062 		mov	r2, #1792
 2021 0004 014B     		ldr	r3, .L221
 2022 0006 5A60     		str	r2, [r3, #4]
 2023 0008 7047     		bx	lr
 2024              	.L222:
 2025 000a 00BF     		.align	2
 2026              	.L221:
 2027 000c 00040E40 		.word	1074660352
 2028              		.cfi_endproc
 2029              	.LFE115:
 2031              		.section	.text.pmc_is_pck_enabled,"ax",%progbits
 2032              		.align	2
 2033              		.global	pmc_is_pck_enabled
 2034              		.thumb
 2035              		.thumb_func
 2037              	pmc_is_pck_enabled:
 2038              	.LFB116:
1026:../src/pmc/pmc.c **** }
1027:../src/pmc/pmc.c **** 
1028:../src/pmc/pmc.c **** /**
1029:../src/pmc/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
1030:../src/pmc/pmc.c ****  *
1031:../src/pmc/pmc.c ****  * \param ul_id Id of the programmable clock.
1032:../src/pmc/pmc.c ****  *
1033:../src/pmc/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
1034:../src/pmc/pmc.c ****  * \retval 1 Programmable clock is enabled.
1035:../src/pmc/pmc.c ****  */
1036:../src/pmc/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
1037:../src/pmc/pmc.c **** {
 2039              		.loc 1 1037 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              		@ link register save eliminated.
 2044              	.LVL159:
1038:../src/pmc/pmc.c **** 	if (ul_id > 2) {
 2045              		.loc 1 1038 0
 2046 0000 0228     		cmp	r0, #2
 2047 0002 07D8     		bhi	.L225
1039:../src/pmc/pmc.c **** 		return 0;
1040:../src/pmc/pmc.c **** 	}
1041:../src/pmc/pmc.c **** 
1042:../src/pmc/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 2048              		.loc 1 1042 0
 2049 0004 044B     		ldr	r3, .L226
 2050 0006 9A68     		ldr	r2, [r3, #8]
 2051 0008 4FF48073 		mov	r3, #256
 2052 000c 03FA00F0 		lsl	r0, r3, r0
 2053              	.LVL160:
 2054 0010 1040     		ands	r0, r0, r2
 2055 0012 7047     		bx	lr
 2056              	.LVL161:
 2057              	.L225:
1039:../src/pmc/pmc.c **** 		return 0;
 2058              		.loc 1 1039 0
 2059 0014 0020     		movs	r0, #0
 2060              	.LVL162:
1043:../src/pmc/pmc.c **** }
 2061              		.loc 1 1043 0
 2062 0016 7047     		bx	lr
 2063              	.L227:
 2064              		.align	2
 2065              	.L226:
 2066 0018 00040E40 		.word	1074660352
 2067              		.cfi_endproc
 2068              	.LFE116:
 2070              		.section	.text.pmc_switch_udpck_to_pllack,"ax",%progbits
 2071              		.align	2
 2072              		.global	pmc_switch_udpck_to_pllack
 2073              		.thumb
 2074              		.thumb_func
 2076              	pmc_switch_udpck_to_pllack:
 2077              	.LFB117:
1044:../src/pmc/pmc.c **** 
1045:../src/pmc/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1046:../src/pmc/pmc.c **** /**
1047:../src/pmc/pmc.c ****  * \brief Enable Coprocessor Clocks.
1048:../src/pmc/pmc.c ****  */
1049:../src/pmc/pmc.c **** void pmc_enable_cpck(void)
1050:../src/pmc/pmc.c **** {
1051:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1052:../src/pmc/pmc.c **** }
1053:../src/pmc/pmc.c **** 
1054:../src/pmc/pmc.c **** /**
1055:../src/pmc/pmc.c ****  * \brief Disable Coprocessor Clocks.
1056:../src/pmc/pmc.c ****  */
1057:../src/pmc/pmc.c **** void pmc_disable_cpck(void)
1058:../src/pmc/pmc.c **** {
1059:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1060:../src/pmc/pmc.c **** }
1061:../src/pmc/pmc.c **** 
1062:../src/pmc/pmc.c **** /**
1063:../src/pmc/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1064:../src/pmc/pmc.c ****  *
1065:../src/pmc/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1066:../src/pmc/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1067:../src/pmc/pmc.c ****  */
1068:../src/pmc/pmc.c **** bool pmc_is_cpck_enabled(void)
1069:../src/pmc/pmc.c **** {
1070:../src/pmc/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1071:../src/pmc/pmc.c **** 		return 1;
1072:../src/pmc/pmc.c **** 	} else {
1073:../src/pmc/pmc.c **** 		return 0;
1074:../src/pmc/pmc.c **** 	}
1075:../src/pmc/pmc.c **** }
1076:../src/pmc/pmc.c **** 
1077:../src/pmc/pmc.c **** /**
1078:../src/pmc/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1079:../src/pmc/pmc.c ****  */
1080:../src/pmc/pmc.c **** void pmc_enable_cpbmck(void)
1081:../src/pmc/pmc.c **** {
1082:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1083:../src/pmc/pmc.c **** }
1084:../src/pmc/pmc.c **** 
1085:../src/pmc/pmc.c **** /**
1086:../src/pmc/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1087:../src/pmc/pmc.c ****  */
1088:../src/pmc/pmc.c **** void pmc_disable_cpbmck(void)
1089:../src/pmc/pmc.c **** {
1090:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1091:../src/pmc/pmc.c **** }
1092:../src/pmc/pmc.c **** 
1093:../src/pmc/pmc.c **** /**
1094:../src/pmc/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1095:../src/pmc/pmc.c ****  *
1096:../src/pmc/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1097:../src/pmc/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1098:../src/pmc/pmc.c ****  */
1099:../src/pmc/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1100:../src/pmc/pmc.c **** {
1101:../src/pmc/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1102:../src/pmc/pmc.c **** 		return 1;
1103:../src/pmc/pmc.c **** 	} else {
1104:../src/pmc/pmc.c **** 		return 0;
1105:../src/pmc/pmc.c **** 	}
1106:../src/pmc/pmc.c **** }
1107:../src/pmc/pmc.c **** 
1108:../src/pmc/pmc.c **** /**
1109:../src/pmc/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1110:../src/pmc/pmc.c ****  *
1111:../src/pmc/pmc.c ****  * \param ul_pres Prescaler value.
1112:../src/pmc/pmc.c ****  */
1113:../src/pmc/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1114:../src/pmc/pmc.c **** {
1115:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
1116:../src/pmc/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1117:../src/pmc/pmc.c **** }
1118:../src/pmc/pmc.c **** 
1119:../src/pmc/pmc.c **** /**
1120:../src/pmc/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1121:../src/pmc/pmc.c ****  *
1122:../src/pmc/pmc.c ****  * \param ul_source Source selection value.
1123:../src/pmc/pmc.c ****  */
1124:../src/pmc/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1125:../src/pmc/pmc.c **** {
1126:../src/pmc/pmc.c **** 	PMC->PMC_MCKR =
1127:../src/pmc/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1128:../src/pmc/pmc.c **** }
1129:../src/pmc/pmc.c **** #endif
1130:../src/pmc/pmc.c **** 
1131:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
1132:../src/pmc/pmc.c **** /**
1133:../src/pmc/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1134:../src/pmc/pmc.c ****  *
1135:../src/pmc/pmc.c ****  * \param ul_usbdiv Clock divisor.
1136:../src/pmc/pmc.c ****  */
1137:../src/pmc/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1138:../src/pmc/pmc.c **** {
 2078              		.loc 1 1138 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 2082              		@ link register save eliminated.
 2083              	.LVL163:
1139:../src/pmc/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
 2084              		.loc 1 1139 0
 2085 0000 0002     		lsls	r0, r0, #8
 2086              	.LVL164:
 2087 0002 00F47060 		and	r0, r0, #3840
 2088 0006 014B     		ldr	r3, .L229
 2089 0008 9863     		str	r0, [r3, #56]
 2090 000a 7047     		bx	lr
 2091              	.L230:
 2092              		.align	2
 2093              	.L229:
 2094 000c 00040E40 		.word	1074660352
 2095              		.cfi_endproc
 2096              	.LFE117:
 2098              		.section	.text.pmc_switch_udpck_to_pllbck,"ax",%progbits
 2099              		.align	2
 2100              		.global	pmc_switch_udpck_to_pllbck
 2101              		.thumb
 2102              		.thumb_func
 2104              	pmc_switch_udpck_to_pllbck:
 2105              	.LFB118:
1140:../src/pmc/pmc.c **** }
1141:../src/pmc/pmc.c **** #endif
1142:../src/pmc/pmc.c **** 
1143:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1144:../src/pmc/pmc.c **** /**
1145:../src/pmc/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1146:../src/pmc/pmc.c ****  *
1147:../src/pmc/pmc.c ****  * \param ul_usbdiv Clock divisor.
1148:../src/pmc/pmc.c ****  */
1149:../src/pmc/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1150:../src/pmc/pmc.c **** {
 2106              		.loc 1 1150 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
 2111              	.LVL165:
1151:../src/pmc/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
 2112              		.loc 1 1151 0
 2113 0000 0002     		lsls	r0, r0, #8
 2114              	.LVL166:
 2115 0002 00F47060 		and	r0, r0, #3840
 2116 0006 40F00100 		orr	r0, r0, #1
 2117 000a 014B     		ldr	r3, .L232
 2118 000c 9863     		str	r0, [r3, #56]
 2119 000e 7047     		bx	lr
 2120              	.L233:
 2121              		.align	2
 2122              	.L232:
 2123 0010 00040E40 		.word	1074660352
 2124              		.cfi_endproc
 2125              	.LFE118:
 2127              		.section	.text.pmc_enable_udpck,"ax",%progbits
 2128              		.align	2
 2129              		.global	pmc_enable_udpck
 2130              		.thumb
 2131              		.thumb_func
 2133              	pmc_enable_udpck:
 2134              	.LFB119:
1152:../src/pmc/pmc.c **** }
1153:../src/pmc/pmc.c **** #endif
1154:../src/pmc/pmc.c **** 
1155:../src/pmc/pmc.c **** #if (SAM3XA || SAMV71 || SAMV70 || SAME70 || SAMS70)
1156:../src/pmc/pmc.c **** /**
1157:../src/pmc/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1158:../src/pmc/pmc.c ****  *
1159:../src/pmc/pmc.c ****  * \param ul_usbdiv Clock divisor.
1160:../src/pmc/pmc.c ****  */
1161:../src/pmc/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1162:../src/pmc/pmc.c **** {
1163:../src/pmc/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1164:../src/pmc/pmc.c **** }
1165:../src/pmc/pmc.c **** #endif
1166:../src/pmc/pmc.c **** 
1167:../src/pmc/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
1168:../src/pmc/pmc.c **** /**
1169:../src/pmc/pmc.c ****  * \brief Enable UDP (USB) clock.
1170:../src/pmc/pmc.c ****  */
1171:../src/pmc/pmc.c **** void pmc_enable_udpck(void)
1172:../src/pmc/pmc.c **** {
 2135              		.loc 1 1172 0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 0
 2138              		@ frame_needed = 0, uses_anonymous_args = 0
 2139              		@ link register save eliminated.
1173:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAM4E || SAMG55)
1174:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
 2140              		.loc 1 1174 0
 2141 0000 8022     		movs	r2, #128
 2142 0002 014B     		ldr	r3, .L235
 2143 0004 1A60     		str	r2, [r3]
 2144 0006 7047     		bx	lr
 2145              	.L236:
 2146              		.align	2
 2147              	.L235:
 2148 0008 00040E40 		.word	1074660352
 2149              		.cfi_endproc
 2150              	.LFE119:
 2152              		.section	.text.pmc_disable_udpck,"ax",%progbits
 2153              		.align	2
 2154              		.global	pmc_disable_udpck
 2155              		.thumb
 2156              		.thumb_func
 2158              	pmc_disable_udpck:
 2159              	.LFB120:
1175:../src/pmc/pmc.c **** #elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
1176:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_USBCLK;
1177:../src/pmc/pmc.c **** #else
1178:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1179:../src/pmc/pmc.c **** # endif
1180:../src/pmc/pmc.c **** }
1181:../src/pmc/pmc.c **** 
1182:../src/pmc/pmc.c **** /**
1183:../src/pmc/pmc.c ****  * \brief Disable UDP (USB) clock.
1184:../src/pmc/pmc.c ****  */
1185:../src/pmc/pmc.c **** void pmc_disable_udpck(void)
1186:../src/pmc/pmc.c **** {
 2160              		.loc 1 1186 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
1187:../src/pmc/pmc.c **** #if (SAM3S || SAM4S || SAM4E || SAMG55)
1188:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
 2165              		.loc 1 1188 0
 2166 0000 8022     		movs	r2, #128
 2167 0002 014B     		ldr	r3, .L238
 2168 0004 5A60     		str	r2, [r3, #4]
 2169 0006 7047     		bx	lr
 2170              	.L239:
 2171              		.align	2
 2172              	.L238:
 2173 0008 00040E40 		.word	1074660352
 2174              		.cfi_endproc
 2175              	.LFE120:
 2177              		.section	.text.pmc_enable_interrupt,"ax",%progbits
 2178              		.align	2
 2179              		.global	pmc_enable_interrupt
 2180              		.thumb
 2181              		.thumb_func
 2183              	pmc_enable_interrupt:
 2184              	.LFB121:
1189:../src/pmc/pmc.c **** #elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
1190:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_USBCLK;
1191:../src/pmc/pmc.c **** #else
1192:../src/pmc/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1193:../src/pmc/pmc.c **** # endif
1194:../src/pmc/pmc.c **** }
1195:../src/pmc/pmc.c **** #endif
1196:../src/pmc/pmc.c **** 
1197:../src/pmc/pmc.c **** #if SAMG55
1198:../src/pmc/pmc.c **** /**
1199:../src/pmc/pmc.c ****  * \brief Switch UHP (USB) clock source selection to PLLA clock.
1200:../src/pmc/pmc.c ****  *
1201:../src/pmc/pmc.c ****  * \param ul_usbdiv Clock divisor.
1202:../src/pmc/pmc.c ****  */
1203:../src/pmc/pmc.c **** void pmc_switch_uhpck_to_pllack(uint32_t ul_usbdiv)
1204:../src/pmc/pmc.c **** {
1205:../src/pmc/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1206:../src/pmc/pmc.c **** }
1207:../src/pmc/pmc.c **** 
1208:../src/pmc/pmc.c **** /**
1209:../src/pmc/pmc.c ****  * \brief Switch UHP (USB) clock source selection to PLLB clock.
1210:../src/pmc/pmc.c ****  *
1211:../src/pmc/pmc.c ****  * \param ul_usbdiv Clock divisor.
1212:../src/pmc/pmc.c ****  */
1213:../src/pmc/pmc.c **** void pmc_switch_uhpck_to_pllbck(uint32_t ul_usbdiv)
1214:../src/pmc/pmc.c **** {
1215:../src/pmc/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1216:../src/pmc/pmc.c **** }
1217:../src/pmc/pmc.c **** 
1218:../src/pmc/pmc.c **** /**
1219:../src/pmc/pmc.c ****  * \brief Enable UHP (USB) clock.
1220:../src/pmc/pmc.c ****  */
1221:../src/pmc/pmc.c **** void pmc_enable_uhpck(void)
1222:../src/pmc/pmc.c **** {
1223:../src/pmc/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UHP;
1224:../src/pmc/pmc.c **** }
1225:../src/pmc/pmc.c **** #endif
1226:../src/pmc/pmc.c **** 
1227:../src/pmc/pmc.c **** /**
1228:../src/pmc/pmc.c ****  * \brief Enable PMC interrupts.
1229:../src/pmc/pmc.c ****  *
1230:../src/pmc/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1231:../src/pmc/pmc.c ****  */
1232:../src/pmc/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1233:../src/pmc/pmc.c **** {
 2185              		.loc 1 1233 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189              		@ link register save eliminated.
 2190              	.LVL167:
1234:../src/pmc/pmc.c **** 	PMC->PMC_IER = ul_sources;
 2191              		.loc 1 1234 0
 2192 0000 014B     		ldr	r3, .L241
 2193 0002 1866     		str	r0, [r3, #96]
 2194 0004 7047     		bx	lr
 2195              	.L242:
 2196 0006 00BF     		.align	2
 2197              	.L241:
 2198 0008 00040E40 		.word	1074660352
 2199              		.cfi_endproc
 2200              	.LFE121:
 2202              		.section	.text.pmc_disable_interrupt,"ax",%progbits
 2203              		.align	2
 2204              		.global	pmc_disable_interrupt
 2205              		.thumb
 2206              		.thumb_func
 2208              	pmc_disable_interrupt:
 2209              	.LFB122:
1235:../src/pmc/pmc.c **** }
1236:../src/pmc/pmc.c **** 
1237:../src/pmc/pmc.c **** /**
1238:../src/pmc/pmc.c ****  * \brief Disable PMC interrupts.
1239:../src/pmc/pmc.c ****  *
1240:../src/pmc/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1241:../src/pmc/pmc.c ****  */
1242:../src/pmc/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1243:../src/pmc/pmc.c **** {
 2210              		.loc 1 1243 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214              		@ link register save eliminated.
 2215              	.LVL168:
1244:../src/pmc/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 2216              		.loc 1 1244 0
 2217 0000 014B     		ldr	r3, .L244
 2218 0002 5866     		str	r0, [r3, #100]
 2219 0004 7047     		bx	lr
 2220              	.L245:
 2221 0006 00BF     		.align	2
 2222              	.L244:
 2223 0008 00040E40 		.word	1074660352
 2224              		.cfi_endproc
 2225              	.LFE122:
 2227              		.section	.text.pmc_get_interrupt_mask,"ax",%progbits
 2228              		.align	2
 2229              		.global	pmc_get_interrupt_mask
 2230              		.thumb
 2231              		.thumb_func
 2233              	pmc_get_interrupt_mask:
 2234              	.LFB123:
1245:../src/pmc/pmc.c **** }
1246:../src/pmc/pmc.c **** 
1247:../src/pmc/pmc.c **** /**
1248:../src/pmc/pmc.c ****  * \brief Get PMC interrupt mask.
1249:../src/pmc/pmc.c ****  *
1250:../src/pmc/pmc.c ****  * \return The interrupt mask value.
1251:../src/pmc/pmc.c ****  */
1252:../src/pmc/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1253:../src/pmc/pmc.c **** {
 2235              		.loc 1 1253 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 0
 2238              		@ frame_needed = 0, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
1254:../src/pmc/pmc.c **** 	return PMC->PMC_IMR;
 2240              		.loc 1 1254 0
 2241 0000 014B     		ldr	r3, .L247
 2242 0002 D86E     		ldr	r0, [r3, #108]
1255:../src/pmc/pmc.c **** }
 2243              		.loc 1 1255 0
 2244 0004 7047     		bx	lr
 2245              	.L248:
 2246 0006 00BF     		.align	2
 2247              	.L247:
 2248 0008 00040E40 		.word	1074660352
 2249              		.cfi_endproc
 2250              	.LFE123:
 2252              		.section	.text.pmc_get_status,"ax",%progbits
 2253              		.align	2
 2254              		.global	pmc_get_status
 2255              		.thumb
 2256              		.thumb_func
 2258              	pmc_get_status:
 2259              	.LFB124:
1256:../src/pmc/pmc.c **** 
1257:../src/pmc/pmc.c **** /**
1258:../src/pmc/pmc.c ****  * \brief Get current status.
1259:../src/pmc/pmc.c ****  *
1260:../src/pmc/pmc.c ****  * \return The current PMC status.
1261:../src/pmc/pmc.c ****  */
1262:../src/pmc/pmc.c **** uint32_t pmc_get_status(void)
1263:../src/pmc/pmc.c **** {
 2260              		.loc 1 1263 0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 0
 2263              		@ frame_needed = 0, uses_anonymous_args = 0
 2264              		@ link register save eliminated.
1264:../src/pmc/pmc.c **** 	return PMC->PMC_SR;
 2265              		.loc 1 1264 0
 2266 0000 014B     		ldr	r3, .L250
 2267 0002 986E     		ldr	r0, [r3, #104]
1265:../src/pmc/pmc.c **** }
 2268              		.loc 1 1265 0
 2269 0004 7047     		bx	lr
 2270              	.L251:
 2271 0006 00BF     		.align	2
 2272              	.L250:
 2273 0008 00040E40 		.word	1074660352
 2274              		.cfi_endproc
 2275              	.LFE124:
 2277              		.section	.text.pmc_set_fast_startup_input,"ax",%progbits
 2278              		.align	2
 2279              		.global	pmc_set_fast_startup_input
 2280              		.thumb
 2281              		.thumb_func
 2283              	pmc_set_fast_startup_input:
 2284              	.LFB125:
1266:../src/pmc/pmc.c **** 
1267:../src/pmc/pmc.c **** /**
1268:../src/pmc/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1269:../src/pmc/pmc.c ****  *        (event generation).
1270:../src/pmc/pmc.c ****  *
1271:../src/pmc/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1272:../src/pmc/pmc.c ****  */
1273:../src/pmc/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1274:../src/pmc/pmc.c **** {
 2285              		.loc 1 1274 0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289              		@ link register save eliminated.
 2290              	.LVL169:
1275:../src/pmc/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2291              		.loc 1 1275 0
 2292 0000 C0F31200 		ubfx	r0, r0, #0, #19
 2293              	.LVL170:
1276:../src/pmc/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 2294              		.loc 1 1276 0
 2295 0004 024A     		ldr	r2, .L253
 2296 0006 136F     		ldr	r3, [r2, #112]
 2297 0008 1843     		orrs	r0, r0, r3
 2298              	.LVL171:
 2299 000a 1067     		str	r0, [r2, #112]
 2300 000c 7047     		bx	lr
 2301              	.L254:
 2302 000e 00BF     		.align	2
 2303              	.L253:
 2304 0010 00040E40 		.word	1074660352
 2305              		.cfi_endproc
 2306              	.LFE125:
 2308              		.section	.text.pmc_clr_fast_startup_input,"ax",%progbits
 2309              		.align	2
 2310              		.global	pmc_clr_fast_startup_input
 2311              		.thumb
 2312              		.thumb_func
 2314              	pmc_clr_fast_startup_input:
 2315              	.LFB126:
1277:../src/pmc/pmc.c **** }
1278:../src/pmc/pmc.c **** 
1279:../src/pmc/pmc.c **** /**
1280:../src/pmc/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1281:../src/pmc/pmc.c ****  *        (remove event generation).
1282:../src/pmc/pmc.c ****  *
1283:../src/pmc/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1284:../src/pmc/pmc.c ****  */
1285:../src/pmc/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1286:../src/pmc/pmc.c **** {
 2316              		.loc 1 1286 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              		@ link register save eliminated.
 2321              	.LVL172:
1287:../src/pmc/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2322              		.loc 1 1287 0
 2323 0000 C0F31200 		ubfx	r0, r0, #0, #19
 2324              	.LVL173:
1288:../src/pmc/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 2325              		.loc 1 1288 0
 2326 0004 024A     		ldr	r2, .L256
 2327 0006 136F     		ldr	r3, [r2, #112]
 2328 0008 23EA0000 		bic	r0, r3, r0
 2329              	.LVL174:
 2330 000c 1067     		str	r0, [r2, #112]
 2331 000e 7047     		bx	lr
 2332              	.L257:
 2333              		.align	2
 2334              	.L256:
 2335 0010 00040E40 		.word	1074660352
 2336              		.cfi_endproc
 2337              	.LFE126:
 2339              		.section	.text.pmc_enable_sleepmode,"ax",%progbits
 2340              		.align	2
 2341              		.global	pmc_enable_sleepmode
 2342              		.thumb
 2343              		.thumb_func
 2345              	pmc_enable_sleepmode:
 2346              	.LFB127:
1289:../src/pmc/pmc.c **** }
1290:../src/pmc/pmc.c **** 
1291:../src/pmc/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1292:../src/pmc/pmc.c **** /**
1293:../src/pmc/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1294:../src/pmc/pmc.c ****  *        (event generation).
1295:../src/pmc/pmc.c ****  *
1296:../src/pmc/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1297:../src/pmc/pmc.c ****  */
1298:../src/pmc/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1299:../src/pmc/pmc.c **** {
1300:../src/pmc/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1301:../src/pmc/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1302:../src/pmc/pmc.c **** }
1303:../src/pmc/pmc.c **** 
1304:../src/pmc/pmc.c **** /**
1305:../src/pmc/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1306:../src/pmc/pmc.c ****  *        (remove event generation).
1307:../src/pmc/pmc.c ****  *
1308:../src/pmc/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1309:../src/pmc/pmc.c ****  */
1310:../src/pmc/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1311:../src/pmc/pmc.c **** {
1312:../src/pmc/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1313:../src/pmc/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1314:../src/pmc/pmc.c **** }
1315:../src/pmc/pmc.c **** #endif
1316:../src/pmc/pmc.c **** 
1317:../src/pmc/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1318:../src/pmc/pmc.c **** /**
1319:../src/pmc/pmc.c ****  * \brief Enable Sleep Mode.
1320:../src/pmc/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1321:../src/pmc/pmc.c ****  *
1322:../src/pmc/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1323:../src/pmc/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP, SAMV71 and SAM4E series,
1324:../src/pmc/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1325:../src/pmc/pmc.c ****  */
1326:../src/pmc/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1327:../src/pmc/pmc.c **** {
 2347              		.loc 1 1327 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
 2352              	.LVL175:
1328:../src/pmc/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1329:../src/pmc/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
 2353              		.loc 1 1329 0
 2354 0000 074A     		ldr	r2, .L261
 2355 0002 136F     		ldr	r3, [r2, #112]
 2356 0004 23F48013 		bic	r3, r3, #1048576
 2357 0008 1367     		str	r3, [r2, #112]
1330:../src/pmc/pmc.c **** #endif
1331:../src/pmc/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 2358              		.loc 1 1331 0
 2359 000a 064A     		ldr	r2, .L261+4
 2360 000c 1369     		ldr	r3, [r2, #16]
 2361 000e 23F00403 		bic	r3, r3, #4
 2362 0012 1361     		str	r3, [r2, #16]
1332:../src/pmc/pmc.c **** 
1333:../src/pmc/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1334:../src/pmc/pmc.c **** 	UNUSED(uc_type);
1335:../src/pmc/pmc.c **** 	__WFI();
1336:../src/pmc/pmc.c **** #else
1337:../src/pmc/pmc.c **** 	if (uc_type == 0) {
 2363              		.loc 1 1337 0
 2364 0014 08B9     		cbnz	r0, .L259
 2365              	.LBB12:
 2366              	.LBB13:
 2367              		.file 2 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h"
   1:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /**************************************************************************//**
   2:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @version  V4.00
   5:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @date     28. August 2014
   6:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  *
   7:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * @note
   8:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  *
   9:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  ******************************************************************************/
  10:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  12:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    All rights reserved.
  13:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****      specific prior written permission.
  23:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    *
  24:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  37:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  38:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  41:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  42:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   Access to dedicated instructions
  45:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   @{
  46:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** */
  47:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  48:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* ARM armcc specific functions */
  50:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  51:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
  54:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  55:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  56:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  No Operation
  57:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  58:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  60:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __NOP                             __nop
  61:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  62:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  63:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  65:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     until one of a number of events occurs.
  67:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  68:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __WFI                             __wfi
  69:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  70:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  71:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Event
  72:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  73:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  76:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __WFE                             __wfe
  77:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  78:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  79:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Send Event
  80:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  81:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  83:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __SEV                             __sev
  84:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  85:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  86:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  88:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
  92:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  94:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  95:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
  97:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 100:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 102:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 103:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 105:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 108:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 110:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 111:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 113:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 115:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 117:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 118:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __REV                             __rev
 119:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 120:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 121:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 123:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 125:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 127:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 128:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 131:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   rev16 r0, r0
 132:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 133:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 134:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 135:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 136:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 138:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 140:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 142:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 143:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 146:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   revsh r0, r0
 147:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 148:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 149:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 150:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 151:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 152:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 154:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 156:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Rotated value
 159:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 160:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __ROR                             __ror
 161:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 162:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 163:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Breakpoint
 164:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 165:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 168:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 171:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 173:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 174:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 175:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 176:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 178:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 180:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Reversed value
 182:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 183:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __RBIT                            __rbit
 184:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 185:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 186:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 188:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 189:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 190:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 193:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 195:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 196:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 198:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 199:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 200:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 203:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 205:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 206:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 208:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 209:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 210:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 213:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 215:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 216:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 218:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 219:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 220:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 221:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 223:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 224:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 225:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 227:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 228:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 230:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 231:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 232:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 233:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 235:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 236:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 237:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 239:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 240:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 242:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 243:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 244:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 245:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          0  Function succeeded
 247:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return          1  Function failed
 248:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 249:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 251:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 252:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 254:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 256:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 257:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CLREX                           __clrex
 258:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 259:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 260:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Signed Saturate
 261:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 262:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function saturates a signed value.
 263:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 264:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             Saturated value
 267:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 268:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __SSAT                            __ssat
 269:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 270:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 271:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 273:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function saturates an unsigned value.
 274:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 275:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             Saturated value
 278:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 279:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __USAT                            __usat
 280:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 281:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 282:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Count leading zeros
 283:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 284:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 286:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             number of leading zeros in value
 288:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 289:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CLZ                             __clz
 290:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 291:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 292:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 293:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 294:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit. The carry input is shifted in at 
 295:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 296:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    value  Value to rotate
 297:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return               Rotated value
 298:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 299:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 300:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 301:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 302:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   rrx r0, r0
 303:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   bx lr
 304:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 305:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 306:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 307:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 308:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 309:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 310:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 311:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 312:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 313:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 314:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 315:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 316:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 317:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 318:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 319:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 320:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 321:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 322:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 323:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 324:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 325:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 326:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 327:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 328:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 329:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 330:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 331:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 332:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 333:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 334:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 335:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 336:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 337:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 338:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 339:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 340:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 341:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 342:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 343:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 344:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 345:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 346:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 347:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 348:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 349:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 350:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 351:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 352:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 353:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 354:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 355:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 356:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 357:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 358:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 359:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 360:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 361:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 362:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]  value  Value to store
 363:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 364:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 365:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 366:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 367:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 368:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 369:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 370:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 371:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* GNU gcc specific functions */
 372:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 373:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 374:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 375:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 376:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 377:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 378:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 379:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #else
 380:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 381:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 382:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** #endif
 383:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 384:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  No Operation
 385:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 386:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 387:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 388:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 389:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 390:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("nop");
 391:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 392:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 393:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 394:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Interrupt
 395:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 396:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 397:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     until one of a number of events occurs.
 398:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 399:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 400:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 401:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("wfi");
 2368              		.loc 2 401 0
 2369              		.syntax unified
 2370              	@ 401 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 2371 0016 30BF     		wfi
 2372              	@ 0 "" 2
 2373              		.thumb
 2374              		.syntax unified
 2375 0018 7047     		bx	lr
 2376              	.L259:
 2377              	.LBE13:
 2378              	.LBE12:
 2379              	.LBB14:
 2380              	.LBB15:
 402:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 403:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 404:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 405:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** /** \brief  Wait For Event
 406:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** 
 407:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 408:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 409:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****  */
 410:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 411:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** {
 412:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h ****   __ASM volatile ("wfe");
 2381              		.loc 2 412 0
 2382              		.syntax unified
 2383              	@ 412 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 2384 001a 20BF     		wfe
 2385              	@ 0 "" 2
 2386              		.thumb
 2387              		.syntax unified
 2388 001c 7047     		bx	lr
 2389              	.L262:
 2390 001e 00BF     		.align	2
 2391              	.L261:
 2392 0020 00040E40 		.word	1074660352
 2393 0024 00ED00E0 		.word	-536810240
 2394              	.LBE15:
 2395              	.LBE14:
 2396              		.cfi_endproc
 2397              	.LFE127:
 2399              		.section	.text.pmc_enable_waitmode,"ax",%progbits
 2400              		.align	2
 2401              		.global	pmc_enable_waitmode
 2402              		.thumb
 2403              		.thumb_func
 2405              	pmc_enable_waitmode:
 2406              	.LFB128:
1338:../src/pmc/pmc.c **** 		__WFI();
1339:../src/pmc/pmc.c **** 	} else {
1340:../src/pmc/pmc.c **** 		__WFE();
1341:../src/pmc/pmc.c **** 	}
1342:../src/pmc/pmc.c **** #endif
1343:../src/pmc/pmc.c **** }
1344:../src/pmc/pmc.c **** #endif
1345:../src/pmc/pmc.c **** 
1346:../src/pmc/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP || SAMV71 || SAMV70 || SAME70 || 
1347:../src/pmc/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1348:../src/pmc/pmc.c **** /**
1349:../src/pmc/pmc.c ****  * \brief Set the embedded flash state in wait mode
1350:../src/pmc/pmc.c ****  *
1351:../src/pmc/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1352:../src/pmc/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1353:../src/pmc/pmc.c ****  */
1354:../src/pmc/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1355:../src/pmc/pmc.c **** {
1356:../src/pmc/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
1357:../src/pmc/pmc.c **** }
1358:../src/pmc/pmc.c **** 
1359:../src/pmc/pmc.c **** /**
1360:../src/pmc/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) + FLPM
1361:../src/pmc/pmc.c ****  *
1362:../src/pmc/pmc.c ****  * \note In this function, FLPM will retain, WAITMODE bit will be set,
1363:../src/pmc/pmc.c ****  * Generally, this function will be called by pmc_sleep() in order to
1364:../src/pmc/pmc.c ****  * complete all sequence entering wait mode.
1365:../src/pmc/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1366:../src/pmc/pmc.c ****  */
1367:../src/pmc/pmc.c **** void pmc_enable_waitmode(void)
1368:../src/pmc/pmc.c **** {
1369:../src/pmc/pmc.c **** 	uint32_t i;
1370:../src/pmc/pmc.c **** 
1371:../src/pmc/pmc.c **** 	/* Flash in wait mode */
1372:../src/pmc/pmc.c **** 	i = PMC->PMC_FSMR;
1373:../src/pmc/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1374:../src/pmc/pmc.c **** #if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
1375:../src/pmc/pmc.c **** 	i |= ul_flash_in_wait_mode;
1376:../src/pmc/pmc.c **** #else
1377:../src/pmc/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1378:../src/pmc/pmc.c **** #endif
1379:../src/pmc/pmc.c **** 	PMC->PMC_FSMR = i;
1380:../src/pmc/pmc.c **** 
1381:../src/pmc/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1382:../src/pmc/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
1383:../src/pmc/pmc.c **** 
1384:../src/pmc/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1385:../src/pmc/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
1386:../src/pmc/pmc.c **** 
1387:../src/pmc/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1388:../src/pmc/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1389:../src/pmc/pmc.c **** 	 */
1390:../src/pmc/pmc.c **** 	for (i = 0; i < 500; i++) {
1391:../src/pmc/pmc.c **** 		__NOP();
1392:../src/pmc/pmc.c **** 	}
1393:../src/pmc/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1394:../src/pmc/pmc.c **** 
1395:../src/pmc/pmc.c **** #if (!SAMG)
1396:../src/pmc/pmc.c **** 	/* Restore Flash in idle mode */
1397:../src/pmc/pmc.c **** 	i = PMC->PMC_FSMR;
1398:../src/pmc/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1399:../src/pmc/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1400:../src/pmc/pmc.c **** 	PMC->PMC_FSMR = i;
1401:../src/pmc/pmc.c **** #endif
1402:../src/pmc/pmc.c **** }
1403:../src/pmc/pmc.c **** #else
1404:../src/pmc/pmc.c **** /**
1405:../src/pmc/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1406:../src/pmc/pmc.c ****  * (LPM bit = 1)
1407:../src/pmc/pmc.c ****  */
1408:../src/pmc/pmc.c **** void pmc_enable_waitmode(void)
1409:../src/pmc/pmc.c **** {
 2407              		.loc 1 1409 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
1410:../src/pmc/pmc.c **** 	uint32_t i;
1411:../src/pmc/pmc.c **** 
1412:../src/pmc/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
 2412              		.loc 1 1412 0
 2413 0000 0B4A     		ldr	r2, .L267
 2414 0002 136F     		ldr	r3, [r2, #112]
 2415 0004 43F48013 		orr	r3, r3, #1048576
 2416 0008 1367     		str	r3, [r2, #112]
1413:../src/pmc/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
 2417              		.loc 1 1413 0
 2418 000a 0A4A     		ldr	r2, .L267+4
 2419 000c 1369     		ldr	r3, [r2, #16]
 2420 000e 23F00403 		bic	r3, r3, #4
 2421 0012 1361     		str	r3, [r2, #16]
 2422              	.LBB16:
 2423              	.LBB17:
 2424              		.loc 2 412 0
 2425              		.syntax unified
 2426              	@ 412 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 2427 0014 20BF     		wfe
 2428              	@ 0 "" 2
 2429              	.LVL176:
 2430              		.thumb
 2431              		.syntax unified
 2432              	.LBE17:
 2433              	.LBE16:
1414:../src/pmc/pmc.c **** 
1415:../src/pmc/pmc.c **** 	__WFE();
1416:../src/pmc/pmc.c **** 
1417:../src/pmc/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1418:../src/pmc/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1419:../src/pmc/pmc.c **** 	 */
1420:../src/pmc/pmc.c **** 	for (i = 0; i < 500; i++) {
 2434              		.loc 1 1420 0
 2435 0016 0023     		movs	r3, #0
 2436 0018 01E0     		b	.L264
 2437              	.LVL177:
 2438              	.L265:
 2439              	.LBB18:
 2440              	.LBB19:
 390:/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h **** }
 2441              		.loc 2 390 0
 2442              		.syntax unified
 2443              	@ 390 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 2444 001a 00BF     		nop
 2445              	@ 0 "" 2
 2446              		.thumb
 2447              		.syntax unified
 2448              	.LBE19:
 2449              	.LBE18:
 2450              		.loc 1 1420 0
 2451 001c 0133     		adds	r3, r3, #1
 2452              	.LVL178:
 2453              	.L264:
 2454              		.loc 1 1420 0 is_stmt 0 discriminator 1
 2455 001e B3F5FA7F 		cmp	r3, #500
 2456 0022 FAD3     		bcc	.L265
 2457              	.LVL179:
 2458              	.L266:
1421:../src/pmc/pmc.c **** 		__NOP();
1422:../src/pmc/pmc.c **** 	}
1423:../src/pmc/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 2459              		.loc 1 1423 0 is_stmt 1 discriminator 1
 2460 0024 024B     		ldr	r3, .L267
 2461 0026 1B6A     		ldr	r3, [r3, #32]
 2462 0028 13F0080F 		tst	r3, #8
 2463 002c FAD0     		beq	.L266
1424:../src/pmc/pmc.c **** 
1425:../src/pmc/pmc.c **** }
 2464              		.loc 1 1425 0
 2465 002e 7047     		bx	lr
 2466              	.L268:
 2467              		.align	2
 2468              	.L267:
 2469 0030 00040E40 		.word	1074660352
 2470 0034 00ED00E0 		.word	-536810240
 2471              		.cfi_endproc
 2472              	.LFE128:
 2474              		.section	.text.pmc_enable_backupmode,"ax",%progbits
 2475              		.align	2
 2476              		.global	pmc_enable_backupmode
 2477              		.thumb
 2478              		.thumb_func
 2480              	pmc_enable_backupmode:
 2481              	.LFB129:
1426:../src/pmc/pmc.c **** #endif
1427:../src/pmc/pmc.c **** 
1428:../src/pmc/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1429:../src/pmc/pmc.c **** /**
1430:../src/pmc/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1431:../src/pmc/pmc.c ****  * (SLEEPDEEP bit = 1)
1432:../src/pmc/pmc.c ****  */
1433:../src/pmc/pmc.c **** void pmc_enable_backupmode(void)
1434:../src/pmc/pmc.c **** {
 2482              		.loc 1 1434 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
1435:../src/pmc/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1436:../src/pmc/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1437:../src/pmc/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1438:../src/pmc/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1439:../src/pmc/pmc.c **** #endif
1440:../src/pmc/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 2487              		.loc 1 1440 0
 2488 0000 034A     		ldr	r2, .L270
 2489 0002 1369     		ldr	r3, [r2, #16]
 2490 0004 43F00403 		orr	r3, r3, #4
 2491 0008 1361     		str	r3, [r2, #16]
 2492              	.LBB20:
 2493              	.LBB21:
 2494              		.loc 2 412 0
 2495              		.syntax unified
 2496              	@ 412 "/home/bekeband/workspace/OLIMEX_Start/src/core_cmInstr.h" 1
 2497 000a 20BF     		wfe
 2498              	@ 0 "" 2
 2499              		.thumb
 2500              		.syntax unified
 2501 000c 7047     		bx	lr
 2502              	.L271:
 2503 000e 00BF     		.align	2
 2504              	.L270:
 2505 0010 00ED00E0 		.word	-536810240
 2506              	.LBE21:
 2507              	.LBE20:
 2508              		.cfi_endproc
 2509              	.LFE129:
 2511              		.section	.text.pmc_enable_clock_failure_detector,"ax",%progbits
 2512              		.align	2
 2513              		.global	pmc_enable_clock_failure_detector
 2514              		.thumb
 2515              		.thumb_func
 2517              	pmc_enable_clock_failure_detector:
 2518              	.LFB130:
1441:../src/pmc/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 |
1442:../src/pmc/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
1443:../src/pmc/pmc.c **** 	__WFE();
1444:../src/pmc/pmc.c **** 	__WFI();
1445:../src/pmc/pmc.c **** #else
1446:../src/pmc/pmc.c **** 	__WFE();
1447:../src/pmc/pmc.c **** #endif
1448:../src/pmc/pmc.c **** }
1449:../src/pmc/pmc.c **** #endif
1450:../src/pmc/pmc.c **** 
1451:../src/pmc/pmc.c **** /**
1452:../src/pmc/pmc.c ****  * \brief Enable Clock Failure Detector.
1453:../src/pmc/pmc.c ****  */
1454:../src/pmc/pmc.c **** void pmc_enable_clock_failure_detector(void)
1455:../src/pmc/pmc.c **** {
 2519              		.loc 1 1455 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              		@ link register save eliminated.
1456:../src/pmc/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 2524              		.loc 1 1456 0
 2525 0000 034A     		ldr	r2, .L273
 2526 0002 136A     		ldr	r3, [r2, #32]
 2527              	.LVL180:
1457:../src/pmc/pmc.c **** 
1458:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 2528              		.loc 1 1458 0
 2529 0004 43F00D73 		orr	r3, r3, #36962304
 2530              	.LVL181:
 2531 0008 43F44033 		orr	r3, r3, #196608
 2532 000c 1362     		str	r3, [r2, #32]
 2533 000e 7047     		bx	lr
 2534              	.L274:
 2535              		.align	2
 2536              	.L273:
 2537 0010 00040E40 		.word	1074660352
 2538              		.cfi_endproc
 2539              	.LFE130:
 2541              		.section	.text.pmc_disable_clock_failure_detector,"ax",%progbits
 2542              		.align	2
 2543              		.global	pmc_disable_clock_failure_detector
 2544              		.thumb
 2545              		.thumb_func
 2547              	pmc_disable_clock_failure_detector:
 2548              	.LFB131:
1459:../src/pmc/pmc.c **** }
1460:../src/pmc/pmc.c **** 
1461:../src/pmc/pmc.c **** /**
1462:../src/pmc/pmc.c ****  * \brief Disable Clock Failure Detector.
1463:../src/pmc/pmc.c ****  */
1464:../src/pmc/pmc.c **** void pmc_disable_clock_failure_detector(void)
1465:../src/pmc/pmc.c **** {
 2549              		.loc 1 1465 0
 2550              		.cfi_startproc
 2551              		@ args = 0, pretend = 0, frame = 0
 2552              		@ frame_needed = 0, uses_anonymous_args = 0
 2553              		@ link register save eliminated.
1466:../src/pmc/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 2554              		.loc 1 1466 0
 2555 0000 034A     		ldr	r2, .L276
 2556 0002 136A     		ldr	r3, [r2, #32]
 2557 0004 23F00073 		bic	r3, r3, #33554432
 2558              	.LVL182:
1467:../src/pmc/pmc.c **** 
1468:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 2559              		.loc 1 1468 0
 2560 0008 43F45C13 		orr	r3, r3, #3604480
 2561              	.LVL183:
 2562 000c 1362     		str	r3, [r2, #32]
 2563 000e 7047     		bx	lr
 2564              	.L277:
 2565              		.align	2
 2566              	.L276:
 2567 0010 00040E40 		.word	1074660352
 2568              		.cfi_endproc
 2569              	.LFE131:
 2571              		.section	.text.pmc_set_writeprotect,"ax",%progbits
 2572              		.align	2
 2573              		.global	pmc_set_writeprotect
 2574              		.thumb
 2575              		.thumb_func
 2577              	pmc_set_writeprotect:
 2578              	.LFB132:
1469:../src/pmc/pmc.c **** }
1470:../src/pmc/pmc.c **** 
1471:../src/pmc/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1472:../src/pmc/pmc.c **** /**
1473:../src/pmc/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1474:../src/pmc/pmc.c ****  */
1475:../src/pmc/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1476:../src/pmc/pmc.c **** {
1477:../src/pmc/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1478:../src/pmc/pmc.c **** 
1479:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1480:../src/pmc/pmc.c **** }
1481:../src/pmc/pmc.c **** 
1482:../src/pmc/pmc.c **** /**
1483:../src/pmc/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1484:../src/pmc/pmc.c ****  */
1485:../src/pmc/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1486:../src/pmc/pmc.c **** {
1487:../src/pmc/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1488:../src/pmc/pmc.c **** 
1489:../src/pmc/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1490:../src/pmc/pmc.c **** }
1491:../src/pmc/pmc.c **** #endif
1492:../src/pmc/pmc.c **** 
1493:../src/pmc/pmc.c **** /**
1494:../src/pmc/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1495:../src/pmc/pmc.c ****  *
1496:../src/pmc/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1497:../src/pmc/pmc.c ****  */
1498:../src/pmc/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1499:../src/pmc/pmc.c **** {
 2579              		.loc 1 1499 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 2583              		@ link register save eliminated.
 2584              	.LVL184:
1500:../src/pmc/pmc.c **** 	if (ul_enable) {
 2585              		.loc 1 1500 0
 2586 0000 20B1     		cbz	r0, .L279
1501:../src/pmc/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 2587              		.loc 1 1501 0
 2588 0002 054A     		ldr	r2, .L281
 2589 0004 054B     		ldr	r3, .L281+4
 2590 0006 C3F8E420 		str	r2, [r3, #228]
 2591 000a 7047     		bx	lr
 2592              	.L279:
1502:../src/pmc/pmc.c **** 	} else {
1503:../src/pmc/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
 2593              		.loc 1 1503 0
 2594 000c 044A     		ldr	r2, .L281+8
 2595 000e 034B     		ldr	r3, .L281+4
 2596 0010 C3F8E420 		str	r2, [r3, #228]
 2597 0014 7047     		bx	lr
 2598              	.L282:
 2599 0016 00BF     		.align	2
 2600              	.L281:
 2601 0018 01434D50 		.word	1347240705
 2602 001c 00040E40 		.word	1074660352
 2603 0020 00434D50 		.word	1347240704
 2604              		.cfi_endproc
 2605              	.LFE132:
 2607              		.section	.text.pmc_get_writeprotect_status,"ax",%progbits
 2608              		.align	2
 2609              		.global	pmc_get_writeprotect_status
 2610              		.thumb
 2611              		.thumb_func
 2613              	pmc_get_writeprotect_status:
 2614              	.LFB133:
1504:../src/pmc/pmc.c **** 	}
1505:../src/pmc/pmc.c **** }
1506:../src/pmc/pmc.c **** 
1507:../src/pmc/pmc.c **** /**
1508:../src/pmc/pmc.c ****  * \brief Return write protect status.
1509:../src/pmc/pmc.c ****  *
1510:../src/pmc/pmc.c ****  * \return Return write protect status.
1511:../src/pmc/pmc.c ****  */
1512:../src/pmc/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1513:../src/pmc/pmc.c **** {
 2615              		.loc 1 1513 0
 2616              		.cfi_startproc
 2617              		@ args = 0, pretend = 0, frame = 0
 2618              		@ frame_needed = 0, uses_anonymous_args = 0
 2619              		@ link register save eliminated.
1514:../src/pmc/pmc.c **** 	return PMC->PMC_WPSR;
 2620              		.loc 1 1514 0
 2621 0000 014B     		ldr	r3, .L284
 2622 0002 D3F8E800 		ldr	r0, [r3, #232]
1515:../src/pmc/pmc.c **** }
 2623              		.loc 1 1515 0
 2624 0006 7047     		bx	lr
 2625              	.L285:
 2626              		.align	2
 2627              	.L284:
 2628 0008 00040E40 		.word	1074660352
 2629              		.cfi_endproc
 2630              	.LFE133:
 2632              		.section	.bss.cpu_irq_critical_section_counter,"aw",%nobits
 2633              		.align	2
 2636              	cpu_irq_critical_section_counter:
 2637 0000 00000000 		.space	4
 2638              		.section	.bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 2641              	cpu_irq_prev_interrupt_state:
 2642 0000 00       		.space	1
 2643              		.text
 2644              	.Letext0:
 2645              		.file 3 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 2646              		.file 4 "/usr/local/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 2647              		.file 5 "/home/bekeband/workspace/OLIMEX_Start/src/sam3s4b.h"
 2648              		.file 6 "/home/bekeband/workspace/OLIMEX_Start/src/core_cm3.h"
 2649              		.file 7 "/home/bekeband/workspace/OLIMEX_Start/src/component/component_pmc.h"
 2650              		.file 8 "/home/bekeband/workspace/OLIMEX_Start/src/component/component_supc.h"
 2651              		.file 9 "/home/bekeband/workspace/OLIMEX_Start/src/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
     /tmp/cci5s72k.s:20     .text.pmc_mck_set_prescaler:00000000 $t
     /tmp/cci5s72k.s:25     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
     /tmp/cci5s72k.s:53     .text.pmc_mck_set_prescaler:00000018 $d
     /tmp/cci5s72k.s:58     .text.pmc_mck_set_source:00000000 $t
     /tmp/cci5s72k.s:63     .text.pmc_mck_set_source:00000000 pmc_mck_set_source
     /tmp/cci5s72k.s:90     .text.pmc_mck_set_source:00000018 $d
     /tmp/cci5s72k.s:95     .text.pmc_switch_mck_to_sclk:00000000 $t
     /tmp/cci5s72k.s:100    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
     /tmp/cci5s72k.s:172    .text.pmc_switch_mck_to_sclk:0000004c $d
     /tmp/cci5s72k.s:177    .text.pmc_switch_mck_to_mainck:00000000 $t
     /tmp/cci5s72k.s:182    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
     /tmp/cci5s72k.s:255    .text.pmc_switch_mck_to_mainck:00000050 $d
     /tmp/cci5s72k.s:260    .text.pmc_switch_mck_to_pllack:00000000 $t
     /tmp/cci5s72k.s:265    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
     /tmp/cci5s72k.s:336    .text.pmc_switch_mck_to_pllack:00000050 $d
     /tmp/cci5s72k.s:341    .text.pmc_switch_mck_to_pllbck:00000000 $t
     /tmp/cci5s72k.s:346    .text.pmc_switch_mck_to_pllbck:00000000 pmc_switch_mck_to_pllbck
     /tmp/cci5s72k.s:416    .text.pmc_switch_mck_to_pllbck:0000004c $d
     /tmp/cci5s72k.s:421    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
     /tmp/cci5s72k.s:426    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
     /tmp/cci5s72k.s:452    .text.pmc_switch_sclk_to_32kxtal:0000001c $d
     /tmp/cci5s72k.s:458    .text.pmc_osc_is_ready_32kxtal:00000000 $t
     /tmp/cci5s72k.s:463    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
     /tmp/cci5s72k.s:494    .text.pmc_osc_is_ready_32kxtal:00000020 $d
     /tmp/cci5s72k.s:500    .text.pmc_switch_mainck_to_fastrc:00000000 $t
     /tmp/cci5s72k.s:505    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
     /tmp/cci5s72k.s:553    .text.pmc_switch_mainck_to_fastrc:0000004c $d
     /tmp/cci5s72k.s:558    .text.pmc_osc_enable_fastrc:00000000 $t
     /tmp/cci5s72k.s:563    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
     /tmp/cci5s72k.s:605    .text.pmc_osc_enable_fastrc:00000038 $d
     /tmp/cci5s72k.s:610    .text.pmc_osc_disable_fastrc:00000000 $t
     /tmp/cci5s72k.s:615    .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
     /tmp/cci5s72k.s:635    .text.pmc_osc_disable_fastrc:00000014 $d
     /tmp/cci5s72k.s:640    .text.pmc_osc_is_ready_fastrc:00000000 $t
     /tmp/cci5s72k.s:645    .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
     /tmp/cci5s72k.s:661    .text.pmc_osc_is_ready_fastrc:0000000c $d
     /tmp/cci5s72k.s:666    .text.pmc_osc_enable_main_xtal:00000000 $t
     /tmp/cci5s72k.s:671    .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
     /tmp/cci5s72k.s:710    .text.pmc_osc_enable_main_xtal:00000024 $d
     /tmp/cci5s72k.s:715    .text.pmc_osc_bypass_main_xtal:00000000 $t
     /tmp/cci5s72k.s:720    .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
     /tmp/cci5s72k.s:745    .text.pmc_osc_bypass_main_xtal:00000014 $d
     /tmp/cci5s72k.s:750    .text.pmc_osc_disable_main_xtal:00000000 $t
     /tmp/cci5s72k.s:755    .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
     /tmp/cci5s72k.s:777    .text.pmc_osc_disable_main_xtal:00000010 $d
     /tmp/cci5s72k.s:782    .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
     /tmp/cci5s72k.s:787    .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
     /tmp/cci5s72k.s:803    .text.pmc_osc_is_bypassed_main_xtal:0000000c $d
     /tmp/cci5s72k.s:808    .text.pmc_osc_is_ready_main_xtal:00000000 $t
     /tmp/cci5s72k.s:813    .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
     /tmp/cci5s72k.s:829    .text.pmc_osc_is_ready_main_xtal:0000000c $d
     /tmp/cci5s72k.s:834    .text.pmc_switch_mainck_to_xtal:00000000 $t
     /tmp/cci5s72k.s:839    .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
     /tmp/cci5s72k.s:895    .text.pmc_switch_mainck_to_xtal:00000048 $d
     /tmp/cci5s72k.s:902    .text.pmc_osc_disable_xtal:00000000 $t
     /tmp/cci5s72k.s:907    .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
     /tmp/cci5s72k.s:937    .text.pmc_osc_disable_xtal:0000002c $d
     /tmp/cci5s72k.s:942    .text.pmc_osc_is_ready_mainck:00000000 $t
     /tmp/cci5s72k.s:947    .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
     /tmp/cci5s72k.s:963    .text.pmc_osc_is_ready_mainck:0000000c $d
     /tmp/cci5s72k.s:968    .text.pmc_mainck_osc_select:00000000 $t
     /tmp/cci5s72k.s:973    .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
     /tmp/cci5s72k.s:1005   .text.pmc_mainck_osc_select:0000001c $d
     /tmp/cci5s72k.s:1010   .text.pmc_disable_pllack:00000000 $t
     /tmp/cci5s72k.s:1015   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
     /tmp/cci5s72k.s:1030   .text.pmc_disable_pllack:0000000c $d
     /tmp/cci5s72k.s:1035   .text.pmc_enable_pllack:00000000 $t
     /tmp/cci5s72k.s:1040   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
     /tmp/cci5s72k.s:1087   .text.pmc_enable_pllack:00000034 $d
     /tmp/cci5s72k.s:1093   .text.pmc_is_locked_pllack:00000000 $t
     /tmp/cci5s72k.s:1098   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
     /tmp/cci5s72k.s:1114   .text.pmc_is_locked_pllack:0000000c $d
     /tmp/cci5s72k.s:1119   .text.pmc_disable_pllbck:00000000 $t
     /tmp/cci5s72k.s:1124   .text.pmc_disable_pllbck:00000000 pmc_disable_pllbck
     /tmp/cci5s72k.s:1139   .text.pmc_disable_pllbck:00000008 $d
     /tmp/cci5s72k.s:1144   .text.pmc_enable_pllbck:00000000 $t
     /tmp/cci5s72k.s:1149   .text.pmc_enable_pllbck:00000000 pmc_enable_pllbck
     /tmp/cci5s72k.s:1193   .text.pmc_enable_pllbck:00000030 $d
     /tmp/cci5s72k.s:1199   .text.pmc_is_locked_pllbck:00000000 $t
     /tmp/cci5s72k.s:1204   .text.pmc_is_locked_pllbck:00000000 pmc_is_locked_pllbck
     /tmp/cci5s72k.s:1220   .text.pmc_is_locked_pllbck:0000000c $d
     /tmp/cci5s72k.s:1225   .text.pmc_enable_periph_clk:00000000 $t
     /tmp/cci5s72k.s:1230   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
     /tmp/cci5s72k.s:1302   .text.pmc_enable_periph_clk:00000050 $d
     /tmp/cci5s72k.s:1307   .text.pmc_disable_periph_clk:00000000 $t
     /tmp/cci5s72k.s:1312   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
     /tmp/cci5s72k.s:1384   .text.pmc_disable_periph_clk:00000050 $d
     /tmp/cci5s72k.s:1389   .text.pmc_enable_all_periph_clk:00000000 $t
     /tmp/cci5s72k.s:1394   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
     /tmp/cci5s72k.s:1427   .text.pmc_enable_all_periph_clk:00000030 $d
     /tmp/cci5s72k.s:1432   .text.pmc_disable_all_periph_clk:00000000 $t
     /tmp/cci5s72k.s:1437   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
     /tmp/cci5s72k.s:1469   .text.pmc_disable_all_periph_clk:00000028 $d
     /tmp/cci5s72k.s:1474   .text.pmc_is_periph_clk_enabled:00000000 $t
     /tmp/cci5s72k.s:1479   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
     /tmp/cci5s72k.s:1531   .text.pmc_is_periph_clk_enabled:00000034 $d
     /tmp/cci5s72k.s:1536   .text.pmc_pck_set_prescaler:00000000 $t
     /tmp/cci5s72k.s:1541   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
     /tmp/cci5s72k.s:1583   .text.pmc_pck_set_prescaler:00000030 $d
     /tmp/cci5s72k.s:1588   .text.pmc_pck_set_source:00000000 $t
     /tmp/cci5s72k.s:1593   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
     /tmp/cci5s72k.s:1635   .text.pmc_pck_set_source:00000030 $d
     /tmp/cci5s72k.s:1640   .text.pmc_switch_pck_to_sclk:00000000 $t
     /tmp/cci5s72k.s:1645   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
     /tmp/cci5s72k.s:1692   .text.pmc_switch_pck_to_sclk:0000002c $d
     /tmp/cci5s72k.s:1697   .text.pmc_switch_pck_to_mainck:00000000 $t
     /tmp/cci5s72k.s:1702   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
     /tmp/cci5s72k.s:1749   .text.pmc_switch_pck_to_mainck:00000030 $d
     /tmp/cci5s72k.s:1754   .text.pmc_switch_pck_to_pllack:00000000 $t
     /tmp/cci5s72k.s:1759   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
     /tmp/cci5s72k.s:1806   .text.pmc_switch_pck_to_pllack:00000030 $d
     /tmp/cci5s72k.s:1811   .text.pmc_switch_pck_to_pllbck:00000000 $t
     /tmp/cci5s72k.s:1816   .text.pmc_switch_pck_to_pllbck:00000000 pmc_switch_pck_to_pllbck
     /tmp/cci5s72k.s:1864   .text.pmc_switch_pck_to_pllbck:00000030 $d
     /tmp/cci5s72k.s:1869   .text.pmc_switch_pck_to_mck:00000000 $t
     /tmp/cci5s72k.s:1874   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
     /tmp/cci5s72k.s:1921   .text.pmc_switch_pck_to_mck:00000030 $d
     /tmp/cci5s72k.s:1926   .text.pmc_enable_pck:00000000 $t
     /tmp/cci5s72k.s:1931   .text.pmc_enable_pck:00000000 pmc_enable_pck
     /tmp/cci5s72k.s:1949   .text.pmc_enable_pck:00000010 $d
     /tmp/cci5s72k.s:1954   .text.pmc_disable_pck:00000000 $t
     /tmp/cci5s72k.s:1959   .text.pmc_disable_pck:00000000 pmc_disable_pck
     /tmp/cci5s72k.s:1977   .text.pmc_disable_pck:00000010 $d
     /tmp/cci5s72k.s:1982   .text.pmc_enable_all_pck:00000000 $t
     /tmp/cci5s72k.s:1987   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
     /tmp/cci5s72k.s:2002   .text.pmc_enable_all_pck:0000000c $d
     /tmp/cci5s72k.s:2007   .text.pmc_disable_all_pck:00000000 $t
     /tmp/cci5s72k.s:2012   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
     /tmp/cci5s72k.s:2027   .text.pmc_disable_all_pck:0000000c $d
     /tmp/cci5s72k.s:2032   .text.pmc_is_pck_enabled:00000000 $t
     /tmp/cci5s72k.s:2037   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
     /tmp/cci5s72k.s:2066   .text.pmc_is_pck_enabled:00000018 $d
     /tmp/cci5s72k.s:2071   .text.pmc_switch_udpck_to_pllack:00000000 $t
     /tmp/cci5s72k.s:2076   .text.pmc_switch_udpck_to_pllack:00000000 pmc_switch_udpck_to_pllack
     /tmp/cci5s72k.s:2094   .text.pmc_switch_udpck_to_pllack:0000000c $d
     /tmp/cci5s72k.s:2099   .text.pmc_switch_udpck_to_pllbck:00000000 $t
     /tmp/cci5s72k.s:2104   .text.pmc_switch_udpck_to_pllbck:00000000 pmc_switch_udpck_to_pllbck
     /tmp/cci5s72k.s:2123   .text.pmc_switch_udpck_to_pllbck:00000010 $d
     /tmp/cci5s72k.s:2128   .text.pmc_enable_udpck:00000000 $t
     /tmp/cci5s72k.s:2133   .text.pmc_enable_udpck:00000000 pmc_enable_udpck
     /tmp/cci5s72k.s:2148   .text.pmc_enable_udpck:00000008 $d
     /tmp/cci5s72k.s:2153   .text.pmc_disable_udpck:00000000 $t
     /tmp/cci5s72k.s:2158   .text.pmc_disable_udpck:00000000 pmc_disable_udpck
     /tmp/cci5s72k.s:2173   .text.pmc_disable_udpck:00000008 $d
     /tmp/cci5s72k.s:2178   .text.pmc_enable_interrupt:00000000 $t
     /tmp/cci5s72k.s:2183   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
     /tmp/cci5s72k.s:2198   .text.pmc_enable_interrupt:00000008 $d
     /tmp/cci5s72k.s:2203   .text.pmc_disable_interrupt:00000000 $t
     /tmp/cci5s72k.s:2208   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
     /tmp/cci5s72k.s:2223   .text.pmc_disable_interrupt:00000008 $d
     /tmp/cci5s72k.s:2228   .text.pmc_get_interrupt_mask:00000000 $t
     /tmp/cci5s72k.s:2233   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
     /tmp/cci5s72k.s:2248   .text.pmc_get_interrupt_mask:00000008 $d
     /tmp/cci5s72k.s:2253   .text.pmc_get_status:00000000 $t
     /tmp/cci5s72k.s:2258   .text.pmc_get_status:00000000 pmc_get_status
     /tmp/cci5s72k.s:2273   .text.pmc_get_status:00000008 $d
     /tmp/cci5s72k.s:2278   .text.pmc_set_fast_startup_input:00000000 $t
     /tmp/cci5s72k.s:2283   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
     /tmp/cci5s72k.s:2304   .text.pmc_set_fast_startup_input:00000010 $d
     /tmp/cci5s72k.s:2309   .text.pmc_clr_fast_startup_input:00000000 $t
     /tmp/cci5s72k.s:2314   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
     /tmp/cci5s72k.s:2335   .text.pmc_clr_fast_startup_input:00000010 $d
     /tmp/cci5s72k.s:2340   .text.pmc_enable_sleepmode:00000000 $t
     /tmp/cci5s72k.s:2345   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
     /tmp/cci5s72k.s:2392   .text.pmc_enable_sleepmode:00000020 $d
     /tmp/cci5s72k.s:2400   .text.pmc_enable_waitmode:00000000 $t
     /tmp/cci5s72k.s:2405   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
     /tmp/cci5s72k.s:2469   .text.pmc_enable_waitmode:00000030 $d
     /tmp/cci5s72k.s:2475   .text.pmc_enable_backupmode:00000000 $t
     /tmp/cci5s72k.s:2480   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
     /tmp/cci5s72k.s:2505   .text.pmc_enable_backupmode:00000010 $d
     /tmp/cci5s72k.s:2512   .text.pmc_enable_clock_failure_detector:00000000 $t
     /tmp/cci5s72k.s:2517   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
     /tmp/cci5s72k.s:2537   .text.pmc_enable_clock_failure_detector:00000010 $d
     /tmp/cci5s72k.s:2542   .text.pmc_disable_clock_failure_detector:00000000 $t
     /tmp/cci5s72k.s:2547   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
     /tmp/cci5s72k.s:2567   .text.pmc_disable_clock_failure_detector:00000010 $d
     /tmp/cci5s72k.s:2572   .text.pmc_set_writeprotect:00000000 $t
     /tmp/cci5s72k.s:2577   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
     /tmp/cci5s72k.s:2601   .text.pmc_set_writeprotect:00000018 $d
     /tmp/cci5s72k.s:2608   .text.pmc_get_writeprotect_status:00000000 $t
     /tmp/cci5s72k.s:2613   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
     /tmp/cci5s72k.s:2628   .text.pmc_get_writeprotect_status:00000008 $d
     /tmp/cci5s72k.s:2633   .bss.cpu_irq_critical_section_counter:00000000 $d
     /tmp/cci5s72k.s:2636   .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
     /tmp/cci5s72k.s:2641   .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
     /tmp/cci5s72k.s:2642   .bss.cpu_irq_prev_interrupt_state:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22b0b12aa5a71f1d303bb4102a500f20
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4.parts.h.48.e0e2ea619afac603c89fe3ed31aee15f
                           .group:00000000 wm4.tpaste.h.48.b41cf557065b1d02756f7dcff09d49b9
                           .group:00000000 wm4.stringz.h.48.ed3117824abe39c5e1281f5c5c443171
                           .group:00000000 wm4.mrepeat.h.62.d4f39ef966b631e185fbb702f9b80ecc
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.sam3s4b.h.226.24ac70e3db261e60e9d210f1232ad825
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cm3.h.160.e022dd848961f928eab0fbd8650d106b
                           .group:00000000 wm4.component_acc.h.46.865c75bb2e3a9d4f38652271e089b5c8
                           .group:00000000 wm4.component_adc.h.46.52ba0aeb0af22cb1f1d91b64dde93956
                           .group:00000000 wm4.component_chipid.h.46.43a273f46f4c32081dfee459ad8862da
                           .group:00000000 wm4.component_crccu.h.46.3d5d84ebcceb8af0782dcb99da35d7d0
                           .group:00000000 wm4.component_dacc.h.46.9b850907590bd31997b006351cf81000
                           .group:00000000 wm4.component_efc.h.46.5a9ec99498daf6c49989fb6d077d312d
                           .group:00000000 wm4.component_gpbr.h.46.1788b80e501f9df943793fa21cfbbe21
                           .group:00000000 wm4.component_hsmci.h.46.2dc64c4ca9a764fbaa2fd4fd1541de68
                           .group:00000000 wm4.component_matrix.h.46.2f4d70bb97c9923e855a3d0c5f56d95e
                           .group:00000000 wm4.component_pdc.h.46.dfd3350dd71c534e17334339feb77f7c
                           .group:00000000 wm4.component_pio.h.46.dc6628e5aa2d62d441a2f9edf013a75a
                           .group:00000000 wm4.component_pmc.h.46.3a13206d3ecf2f1946cf88c02281a26b
                           .group:00000000 wm4.component_pwm.h.46.89366ac40583cd8cd91a5fed13cff02c
                           .group:00000000 wm4.component_rstc.h.46.ef0fbefe4bc03f652c9f4a03bfd1ef46
                           .group:00000000 wm4.component_rtc.h.46.cb1a84d0ff4d043a12d4d2139109e615
                           .group:00000000 wm4.component_rtt.h.46.e35d95fd2652721ab93a68f868a14334
                           .group:00000000 wm4.component_spi.h.46.fbe616cc22048ae3dbe0157a75a200d2
                           .group:00000000 wm4.component_ssc.h.46.bf814ca321f25fab9ac26489e1dec9f0
                           .group:00000000 wm4.component_supc.h.46.013b2a48420cc402d8153de678272576
                           .group:00000000 wm4.component_tc.h.46.8ee6425921e5bd880a2aabd4ecd71522
                           .group:00000000 wm4.component_twi.h.46.1b26436f50ce08e4cbf79a4fdffbcc40
                           .group:00000000 wm4.component_uart.h.46.2ec10b01d23d880667901e3e18729356
                           .group:00000000 wm4.component_udp.h.46.817a2ee6a2f80ac39e7bfbe0ff852001
                           .group:00000000 wm4.component_usart.h.46.e73badf8b79b1144a5e58ae3c7f99afd
                           .group:00000000 wm4.component_wdt.h.46.9058aedbbe8c7f88e4bce28490af6b23
                           .group:00000000 wm4.instance_hsmci.h.46.0921b488c345ac98ef3ba7ad69508825
                           .group:00000000 wm4.instance_ssc.h.46.eebd23f2ef145a585a82c5cef060c7ea
                           .group:00000000 wm4.instance_spi.h.46.26621c46b178e9ca6762bb17a24ec410
                           .group:00000000 wm4.instance_tc0.h.46.ead4b45558da2f42ca95730d1beaaa00
                           .group:00000000 wm4.instance_twi0.h.46.cb546cfb1d37706d80f563947a14da44
                           .group:00000000 wm4.instance_twi1.h.46.5f1af4ccf4d6b33c96c4e388359796ac
                           .group:00000000 wm4.instance_pwm.h.46.76f280edd0f8b1bfcce61f4d903d0259
                           .group:00000000 wm4.instance_usart0.h.46.3c469d2b920fd3e12092b7294ca82da9
                           .group:00000000 wm4.instance_usart1.h.46.398f0294bdd8277ea274c7a419e95901
                           .group:00000000 wm4.instance_udp.h.46.40973cfe8c89095098371468c1887576
                           .group:00000000 wm4.instance_adc.h.46.63258f34d0c27b11736611a7b2b2f27b
                           .group:00000000 wm4.instance_dacc.h.46.5ae4a5035dc78df5a5c17d9d1e76e633
                           .group:00000000 wm4.instance_acc.h.46.2e4a9cb4cb3a92c914800b95f627dc57
                           .group:00000000 wm4.instance_crccu.h.46.184237fe1c77c165bb334c02320f869e
                           .group:00000000 wm4.instance_matrix.h.46.d111ad2ca1e7198ed94a2e1213aa58a3
                           .group:00000000 wm4.instance_pmc.h.46.d5d037bdb46a612e424292373f68d9f8
                           .group:00000000 wm4.instance_uart0.h.46.dc252f382de697c23724fa503782af1d
                           .group:00000000 wm4.instance_chipid.h.46.8f77c51e2ab9edf7d26da8400aab7875
                           .group:00000000 wm4.instance_uart1.h.46.283c4a1cf98fcb8466ac9bceadb0b677
                           .group:00000000 wm4.instance_efc.h.46.9f291aa734b1cb8d75fd144e72f97e2b
                           .group:00000000 wm4.instance_pioa.h.46.cf0f81cda67dc3776fe52603ff60a82f
                           .group:00000000 wm4.instance_piob.h.46.fd1caa7213e73c46d15f69de6af123fb
                           .group:00000000 wm4.instance_rstc.h.46.cb75da875c2442dd75e5a8799bd32e87
                           .group:00000000 wm4.instance_supc.h.46.90f370dafc0bdfb8646ce68458e514e6
                           .group:00000000 wm4.instance_rtt.h.46.5758ae3574a477219b8abb8fe940acb4
                           .group:00000000 wm4.instance_wdt.h.46.b7fdc89b044099cb92c28a2f305b0c66
                           .group:00000000 wm4.instance_rtc.h.46.9d6ddf34c4ffdc6eec5effd1b6d4f045
                           .group:00000000 wm4.instance_gpbr.h.46.672198928bf79182f671b278dd185af8
                           .group:00000000 wm4.sam3s4b.h.317.e7cdc49d5fdc97b75252ee6763540354
                           .group:00000000 wm4.pio_sam3s4b.h.46.b91cb9b5c8fcc478a4299e5df5dba6ff
                           .group:00000000 wm4.sam3s4b.h.452.d371283092f6029dc967aa8f16a63977
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.f5f8300e4d8e4fd74800d02abaf0cc79
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4._timeval.h.30.81d73a3eee9df6c17d94febfd4f5f751
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.31.43869e1a2488877c4cd47d2792524430
                           .group:00000000 wm4.types.h.91.482c289990230376cfd504a2907d47e7
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.8f3036bd0ed314ae051372ccc1fe8f02
                           .group:00000000 wm4.compiler.h.91.eeb6296462f96c51e8e0205ed94a5b09
                           .group:00000000 wm4.interrupt_sam_nvic.h.48.062d9b5b508e1df54b17551a6cd30aa3
                           .group:00000000 wm4.compiler.h.430.149e09620daad34df46237982e03ccfa
                           .group:00000000 wm4.pmc.h.61.ef3a6829e8b958770a939129eb6ef309

NO UNDEFINED SYMBOLS
